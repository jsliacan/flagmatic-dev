/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__flagmatic__hypergraph_flag
#define __PYX_HAVE_API__flagmatic__hypergraph_flag
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "math.h"
#include "gmp.h"
#include "longintrepr.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* None.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "flagmatic/hypergraph_flag.pyx",
  "flagmatic/hypergraph_flag.pxd",
  "__init__.pxd",
  "type.pxd",
  "sage_object.pxd",
};

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_4sage_9structure_11sage_object_SageObject;
struct __pyx_obj_9flagmatic_4flag_Flag;
struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag;
struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block;
struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block;
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags;
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr;
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "sage/structure/sage_object.pxd":4
 * from cpython.object cimport Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
 * 
 * cdef class SageObject:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4sage_9structure_11sage_object_SageObject {
  PyObject_HEAD
};


/* "flag.pxd":3
 * from sage.structure.sage_object cimport SageObject
 * 
 * cdef class Flag (SageObject):             # <<<<<<<<<<<<<<
 * 
 * 	cdef public bint _is_immutable
 */
struct __pyx_obj_9flagmatic_4flag_Flag {
  struct __pyx_obj_4sage_9structure_11sage_object_SageObject __pyx_base;
  int _is_immutable;
};


/* "flagmatic/hypergraph_flag.pxd":36
 * DEF MAX_NUMBER_OF_VERTICES = 35
 * 
 * cdef class HypergraphFlag (Flag):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int _n
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag {
  struct __pyx_obj_9flagmatic_4flag_Flag __pyx_base;
  struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_vtab;
  int _n;
  int _r;
  int _oriented;
  int _multiplicity;
  int _t;
  int is_degenerate;
  int _certified_minimal_isomorph;
  int ne;
  int _edges[0x100];
};


/* "flagmatic/hypergraph_flag.pxd":51
 * 	cdef int c_has_subgraph (self, HypergraphFlag h)
 * 
 * cdef class combinatorial_info_block:             # <<<<<<<<<<<<<<
 * 	cdef int np
 * 	cdef int *p
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block {
  PyObject_HEAD
  int np;
  int *p;
};


/* "flagmatic/hypergraph_flag.pxd":61
 * cdef int *generate_equal_pair_combinations(int n, int s, int m, int *number_of)
 * 
 * cdef class graph_block:             # <<<<<<<<<<<<<<
 * 	cdef int n, len
 * 	cdef void **graphs
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block {
  PyObject_HEAD
  int n;
  int len;
  void **graphs;
};


/* "flagmatic/hypergraph_flag.pyx":479
 * 
 * 	@classmethod
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an integer n, and a type tg, returns a list of all tg-flags on n
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags {
  PyObject_HEAD
  PyObject *__pyx_v_multiplicity;
  PyObject *__pyx_v_nb;
  PyObject *__pyx_v_possible_edges;
};


/* "flagmatic/hypergraph_flag.pyx":544
 * 
 * 		if multiplicity > 1:
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])             # <<<<<<<<<<<<<<
 * 
 * 		for sg in smaller_graphs:
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *__pyx_outer_scope;
  PyObject *__pyx_v_e;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "flagmatic/hypergraph_flag.pyx":559
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */
struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *__pyx_outer_scope;
  PyObject *__pyx_v_e;
};



/* "flagmatic/hypergraph_flag.pyx":62
 * 
 * 
 * cdef class HypergraphFlag (Flag):             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag {
  PyObject *(*is_labelled_isomorphic)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, int __pyx_skip_dispatch);
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *(*c_induced_subgraph)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, int *, int);
  int (*c_has_subgraph)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *);
};
static struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_vtabptr_9flagmatic_15hypergraph_flag_HypergraphFlag;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX         && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_labelled_isomorphic(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, int *__pyx_v_verts, int __pyx_v_num_verts); /* proto*/
static int __pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_has_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_h); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'sage.structure.sage_object' */
static PyTypeObject *__pyx_ptype_4sage_9structure_11sage_object_SageObject = 0;
static CYTHON_INLINE int __pyx_f_4sage_9structure_11sage_object_rich_to_bool(int, int); /*proto*/

/* Module declarations from 'flagmatic.flag' */
static PyTypeObject *__pyx_ptype_9flagmatic_4flag_Flag = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'sage.libs.gmp.types' */

/* Module declarations from 'sage.libs.gmp.random' */

/* Module declarations from 'sage.libs.gmp.mpz' */

/* Module declarations from 'sage.libs.gmp.mpq' */

/* Module declarations from 'sage.libs.gmp.pylong' */

/* Module declarations from 'sage.libs.gmp.all' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'flagmatic.hypergraph_flag' */
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag = 0;
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block = 0;
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag_graph_block = 0;
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags = 0;
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr = 0;
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_permutations_fixing(int, int, int *); /*proto*/
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations(int, int, int *); /*proto*/
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations_plus(int, int, int *); /*proto*/
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_pair_combinations(int, int, int, int, int *); /*proto*/
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_equal_pair_combinations(int, int, int, int *); /*proto*/
static void __pyx_f_9flagmatic_15hypergraph_flag_raw_minimize_edges(int *, int, int, int); /*proto*/
static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_permutations(int, int *); /*proto*/
#define __Pyx_MODULE_NAME "flagmatic.hypergraph_flag"
int __pyx_module_is_main_flagmatic__hypergraph_flag = 0;

/* Implementation of 'flagmatic.hypergraph_flag' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_RuntimeError;
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "%d:";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_QQ[] = "QQ";
static const char __pyx_k_ZZ[] = "ZZ";
static const char __pyx_k_gb[] = "gb";
static const char __pyx_k_m1[] = "m1";
static const char __pyx_k_m2[] = "m2";
static const char __pyx_k_ne[] = "ne";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_tg[] = "tg";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k__15[] = ":";
static const char __pyx_k__18[] = ")";
static const char __pyx_k__19[] = "(";
static const char __pyx_k__25[] = "|";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_2_12[] = "2:12";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "__copy__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_repr[] = "_repr_";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_verb[] = "\\verb|";
static const char __pyx_k_3_123[] = "3:123";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Tuples[] = "Tuples";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_flags1[] = "flags1";
static const char __pyx_k_flags2[] = "flags2";
static const char __pyx_k_graphs[] = "graphs";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_resize[] = "resize";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_sparse[] = "sparse";
static const char __pyx_k_Integer[] = "Integer";
static const char __pyx_k_Subsets[] = "Subsets";
static const char __pyx_k_degrees[] = "degrees";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_induced[] = "induced";
static const char __pyx_k_minimal[] = "minimal";
static const char __pyx_k_relabel[] = "relabel";
static const char __pyx_k_add_edge[] = "add_edge";
static const char __pyx_k_binomial[] = "binomial";
static const char __pyx_k_iterkeys[] = "iterkeys";
static const char __pyx_k_oriented[] = "oriented";
static const char __pyx_k_refcheck[] = "refcheck";
static const char __pyx_k_Invalid_t[] = "Invalid t.";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_flag_basis[] = "flag_basis";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_type_verts[] = "type_verts";
static const char __pyx_k_delete_edge[] = "delete_edge";
static const char __pyx_k_flag_orbits[] = "flag_orbits";
static const char __pyx_k_Combinations[] = "Combinations";
static const char __pyx_k_Permutations[] = "Permutations";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_block_matrix[] = "block_matrix";
static const char __pyx_k_edge_density[] = "edge_density";
static const char __pyx_k_gram_schmidt[] = "gram_schmidt";
static const char __pyx_k_multiplicity[] = "multiplicity";
static const char __pyx_k_split_vertex[] = "split_vertex";
static const char __pyx_k_bad_edge_size[] = "bad edge size.";
static const char __pyx_k_decode_symbol[] = "decode_symbol";
static const char __pyx_k_flag_products[] = "flag_products";
static const char __pyx_k_is_degenerate[] = "is_degenerate";
static const char __pyx_k_orthogonalize[] = "orthogonalize";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_Too_many_edges[] = "Too many edges.";
static const char __pyx_k_generate_flags[] = "generate_flags";
static const char __pyx_k_minimize_edges[] = "minimize_edges";
static const char __pyx_k_representation[] = "representation";
static const char __pyx_k_sage_rings_all[] = "sage.rings.all";
static const char __pyx_k_generate_graphs[] = "generate_graphs";
static const char __pyx_k_require_mutable[] = "_require_mutable";
static const char __pyx_k_sage_matrix_all[] = "sage.matrix.all";
static const char __pyx_k_edge_not_present[] = "edge not present.";
static const char __pyx_k_forbidden_graphs[] = "forbidden_graphs";
static const char __pyx_k_get_combinations[] = "get_combinations";
static const char __pyx_k_get_permutations[] = "get_permutations";
static const char __pyx_k_induced_subgraph[] = "induced_subgraph";
static const char __pyx_k_init_from_string[] = "init_from_string";
static const char __pyx_k_make_graph_block[] = "make_graph_block";
static const char __pyx_k_sage_rings_arith[] = "sage.rings.arith";
static const char __pyx_k_Too_many_vertices[] = "Too many vertices.";
static const char __pyx_k_falling_factorial[] = "falling_factorial";
static const char __pyx_k_identify_vertices[] = "identify_vertices";
static const char __pyx_k_must_have_highest[] = "must_have_highest";
static const char __pyx_k_print_graph_block[] = "print_graph_block";
static const char __pyx_k_sage_combinat_all[] = "sage.combinat.all";
static const char __pyx_k_sage_modules_misc[] = "sage.modules.misc";
static const char __pyx_k_homomorphic_images[] = "homomorphic_images";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_has_forbidden_graphs[] = "has_forbidden_graphs";
static const char __pyx_k_minimal_by_inclusion[] = "minimal_by_inclusion";
static const char __pyx_k_default_density_graph[] = "default_density_graph";
static const char __pyx_k_get_combinations_plus[] = "get_combinations_plus";
static const char __pyx_k_get_pair_combinations[] = "get_pair_combinations";
static const char __pyx_k_make_minimal_isomorph[] = "make_minimal_isomorph";
static const char __pyx_k_previous_combinations[] = "previous_combinations";
static const char __pyx_k_previous_permutations[] = "previous_permutations";
static const char __pyx_k_Invalid_representation[] = "Invalid representation.";
static const char __pyx_k_forbidden_edge_numbers[] = "forbidden_edge_numbers";
static const char __pyx_k_is_labelled_isomorphic[] = "is_labelled_isomorphic";
static const char __pyx_k_remove_duplicate_edges[] = "remove_duplicate_edges";
static const char __pyx_k_n_cannot_be_less_than_t[] = "n cannot be less than t.";
static const char __pyx_k_forbidden_induced_graphs[] = "forbidden_induced_graphs";
static const char __pyx_k_Multigraphs_not_supported[] = "Multigraphs not supported.";
static const char __pyx_k_Not_possible_due_to_edges[] = "Not possible due to edges.";
static const char __pyx_k_flagmatic_hypergraph_flag[] = "flagmatic.hypergraph_flag";
static const char __pyx_k_has_forbidden_edge_numbers[] = "has_forbidden_edge_numbers";
static const char __pyx_k_previous_combinations_plus[] = "previous_combinations_plus";
static const char __pyx_k_previous_pair_combinations[] = "previous_pair_combinations";
static const char __pyx_k_degenerate_induced_subgraph[] = "degenerate_induced_subgraph";
static const char __pyx_k_degenerate_subgraph_density[] = "degenerate_subgraph_density";
static const char __pyx_k_get_equal_pair_combinations[] = "get_equal_pair_combinations";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_generate_flags_locals_genexpr[] = "generate_flags.<locals>.genexpr";
static const char __pyx_k_only_2_graphs_can_be_oriented[] = "only 2-graphs can be oriented.";
static const char __pyx_k_Unsupported_number_of_vertices[] = "Unsupported number of vertices.";
static const char __pyx_k_flagmatic_2_Copyright_c_2012_E[] = "\n\nflagmatic 2\n\nCopyright (c) 2012, E. R. Vaughan. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1) Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2) Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nFurther development of Flagmatic is supported by ERC.\nhttp://cordis.europa.eu/project/rcn/104324_en.html\n";
static const char __pyx_k_Users_srobik_Github_flagmatic_d[] = "/Users/srobik/Github/flagmatic-dev/pkg/flagmatic/hypergraph_flag.pyx";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_0123456789abcdefghijklmnopqrstuv[] = "0123456789abcdefghijklmnopqrstuvwxyz";
static const char __pyx_k_Cannot_identify_vertices_of_mult[] = "Cannot identify vertices of multigraphs.";
static const char __pyx_k_Cannot_split_vertices_of_multigr[] = "Cannot split vertices of multigraphs.";
static const char __pyx_k_Cannot_take_complements_of_multi[] = "Cannot take complements of multigraphs.";
static const char __pyx_k_Cannot_take_complements_of_orien[] = "Cannot take complements of oriented graphs.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_cannot_change_edge_size_of_a_non[] = "cannot change edge size of a non-empty flag.";
static const char __pyx_k_degenerate_graphs_are_not_suppor[] = "degenerate graphs are not supported.";
static const char __pyx_k_init_from_string_locals_decode_s[] = "init_from_string.<locals>.decode_symbol";
static const char __pyx_k_minimal_by_inclusion_locals_lamb[] = "minimal_by_inclusion.<locals>.<lambda>";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_only_2_graphs_and_3_graphs_are_s[] = "only 2-graphs and 3-graphs are supported.";
static const char __pyx_k_previous_equal_pair_combinations[] = "previous_equal_pair_combinations";
static const char __pyx_k_type_must_not_contain_labelled_v[] = "type must not contain labelled vertices.";
static const char __pyx_k_type_should_not_contain_labelled[] = "type should not contain labelled vertices.";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_0123456789abcdefghijklmnopqrstuv;
static PyObject *__pyx_kp_s_2_12;
static PyObject *__pyx_kp_s_3_123;
static PyObject *__pyx_kp_s_Cannot_identify_vertices_of_mult;
static PyObject *__pyx_kp_s_Cannot_split_vertices_of_multigr;
static PyObject *__pyx_kp_s_Cannot_take_complements_of_multi;
static PyObject *__pyx_kp_s_Cannot_take_complements_of_orien;
static PyObject *__pyx_n_s_Combinations;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_Integer;
static PyObject *__pyx_kp_s_Invalid_representation;
static PyObject *__pyx_kp_s_Invalid_t;
static PyObject *__pyx_kp_s_Multigraphs_not_supported;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Not_possible_due_to_edges;
static PyObject *__pyx_n_s_Permutations;
static PyObject *__pyx_n_s_QQ;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Subsets;
static PyObject *__pyx_kp_s_Too_many_edges;
static PyObject *__pyx_kp_s_Too_many_vertices;
static PyObject *__pyx_n_s_Tuples;
static PyObject *__pyx_kp_s_Unsupported_number_of_vertices;
static PyObject *__pyx_kp_s_Users_srobik_Github_flagmatic_d;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_ZZ;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_n_s_add_edge;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_s_bad_edge_size;
static PyObject *__pyx_n_s_binomial;
static PyObject *__pyx_n_s_block_matrix;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_kp_s_cannot_change_edge_size_of_a_non;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_n_s_decode_symbol;
static PyObject *__pyx_n_s_default_density_graph;
static PyObject *__pyx_kp_s_degenerate_graphs_are_not_suppor;
static PyObject *__pyx_n_s_degenerate_induced_subgraph;
static PyObject *__pyx_n_s_degenerate_subgraph_density;
static PyObject *__pyx_n_s_degrees;
static PyObject *__pyx_n_s_delete_edge;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_edge_density;
static PyObject *__pyx_kp_s_edge_not_present;
static PyObject *__pyx_n_s_edges;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_falling_factorial;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flag_basis;
static PyObject *__pyx_n_s_flag_orbits;
static PyObject *__pyx_n_s_flag_products;
static PyObject *__pyx_n_s_flagmatic_hypergraph_flag;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flags1;
static PyObject *__pyx_n_s_flags2;
static PyObject *__pyx_n_s_forbidden_edge_numbers;
static PyObject *__pyx_n_s_forbidden_graphs;
static PyObject *__pyx_n_s_forbidden_induced_graphs;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_gb;
static PyObject *__pyx_n_s_generate_flags;
static PyObject *__pyx_n_s_generate_flags_locals_genexpr;
static PyObject *__pyx_n_s_generate_graphs;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_combinations;
static PyObject *__pyx_n_s_get_combinations_plus;
static PyObject *__pyx_n_s_get_equal_pair_combinations;
static PyObject *__pyx_n_s_get_pair_combinations;
static PyObject *__pyx_n_s_get_permutations;
static PyObject *__pyx_n_s_gram_schmidt;
static PyObject *__pyx_n_s_graphs;
static PyObject *__pyx_n_s_has_forbidden_edge_numbers;
static PyObject *__pyx_n_s_has_forbidden_graphs;
static PyObject *__pyx_n_s_homomorphic_images;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_identify_vertices;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_induced;
static PyObject *__pyx_n_s_induced_subgraph;
static PyObject *__pyx_n_s_init_from_string;
static PyObject *__pyx_n_s_init_from_string_locals_decode_s;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_is_degenerate;
static PyObject *__pyx_n_s_is_labelled_isomorphic;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iterkeys;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_m1;
static PyObject *__pyx_n_s_m2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_graph_block;
static PyObject *__pyx_n_s_make_minimal_isomorph;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_minimal;
static PyObject *__pyx_n_s_minimal_by_inclusion;
static PyObject *__pyx_n_s_minimal_by_inclusion_locals_lamb;
static PyObject *__pyx_n_s_minimize_edges;
static PyObject *__pyx_n_s_multiplicity;
static PyObject *__pyx_n_s_must_have_highest;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_kp_s_n_cannot_be_less_than_t;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ne;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_only_2_graphs_and_3_graphs_are_s;
static PyObject *__pyx_kp_s_only_2_graphs_can_be_oriented;
static PyObject *__pyx_n_s_oriented;
static PyObject *__pyx_n_s_orthogonalize;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_previous_combinations;
static PyObject *__pyx_n_s_previous_combinations_plus;
static PyObject *__pyx_n_s_previous_equal_pair_combinations;
static PyObject *__pyx_n_s_previous_pair_combinations;
static PyObject *__pyx_n_s_previous_permutations;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_graph_block;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_refcheck;
static PyObject *__pyx_n_s_relabel;
static PyObject *__pyx_n_s_remove_duplicate_edges;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_representation;
static PyObject *__pyx_n_s_require_mutable;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sage_combinat_all;
static PyObject *__pyx_n_s_sage_matrix_all;
static PyObject *__pyx_n_s_sage_modules_misc;
static PyObject *__pyx_n_s_sage_rings_all;
static PyObject *__pyx_n_s_sage_rings_arith;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_sparse;
static PyObject *__pyx_n_s_split_vertex;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tg;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_s_type_must_not_contain_labelled_v;
static PyObject *__pyx_kp_s_type_should_not_contain_labelled;
static PyObject *__pyx_n_s_type_verts;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_kp_s_verb;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag___init__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_representation, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2add_edge(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_4delete_edge(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_6__getitem__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8__iter__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_10init_from_string(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12_repr_(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14__copy__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16_latex_(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_18__reduce__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_20__hash__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_22__richcmp__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_24is_labelled_isomorphic(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_26default_density_graph(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_28generate_flags(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_n, PyObject *__pyx_v_tg, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_forbidden_graphs, PyObject *__pyx_v_forbidden_induced_graphs); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_30generate_graphs(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_n, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_forbidden_graphs, PyObject *__pyx_v_forbidden_induced_graphs); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_32flag_orbits(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_34flag_basis(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags, PyObject *__pyx_v_orthogonalize); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_36homomorphic_images(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_g); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_38minimal_by_inclusion(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_graphs); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_40degrees(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_42edge_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_44subgraph_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_h); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_46complement(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_minimal); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_48relabel(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_50identify_vertices(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_remove_duplicate_edges); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_52minimize_edges(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_54make_minimal_isomorph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_56induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_58has_forbidden_edge_numbers(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_must_have_highest); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_60has_forbidden_graphs(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_graphs, PyObject *__pyx_v_must_have_highest, PyObject *__pyx_v_induced); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_62split_vertex(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_64degenerate_induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_66degenerate_edge_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_68degenerate_subgraph_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_h); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_70degenerate_flag_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags, PyObject *__pyx_v_type_verts); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_72flag_products(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_tg, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags1, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags2); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_get_permutations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_2get_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_4get_combinations_plus(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_6get_pair_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_8get_equal_pair_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_10make_graph_block(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graphs, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_12print_graph_block(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_HypergraphFlag(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_combinatorial_info_block(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_graph_block(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__28;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;

/* "flagmatic/hypergraph_flag.pyx":65
 * 
 * 
 * 	def __init__(self, representation=None, r=3, oriented=False, multiplicity=1):             # <<<<<<<<<<<<<<
 * 
 * 		if oriented and r != 2:
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_representation = 0;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_oriented = 0;
  PyObject *__pyx_v_multiplicity = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_representation,&__pyx_n_s_r,&__pyx_n_s_oriented,&__pyx_n_s_multiplicity,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_3);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_representation);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_oriented);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_multiplicity);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 65, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_representation = values[0];
    __pyx_v_r = values[1];
    __pyx_v_oriented = values[2];
    __pyx_v_multiplicity = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag___init__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_representation, __pyx_v_r, __pyx_v_oriented, __pyx_v_multiplicity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag___init__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_representation, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "flagmatic/hypergraph_flag.pyx":67
 * 	def __init__(self, representation=None, r=3, oriented=False, multiplicity=1):
 * 
 * 		if oriented and r != 2:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("only 2-graphs can be oriented.")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_oriented); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 67, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_r, __pyx_int_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":68
 * 
 * 		if oriented and r != 2:
 * 			raise NotImplementedError("only 2-graphs can be oriented.")             # <<<<<<<<<<<<<<
 * 
 * 		if multiplicity < 1:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 68, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":67
 * 	def __init__(self, representation=None, r=3, oriented=False, multiplicity=1):
 * 
 * 		if oriented and r != 2:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("only 2-graphs can be oriented.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":70
 * 			raise NotImplementedError("only 2-graphs can be oriented.")
 * 
 * 		if multiplicity < 1:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_multiplicity, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":71
 * 
 * 		if multiplicity < 1:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(oriented, bool):
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 71, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":70
 * 			raise NotImplementedError("only 2-graphs can be oriented.")
 * 
 * 		if multiplicity < 1:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":73
 * 			raise ValueError
 * 
 * 		if not isinstance(oriented, bool):             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_oriented, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":74
 * 
 * 		if not isinstance(oriented, bool):
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		self._r = r
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 74, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":73
 * 			raise ValueError
 * 
 * 		if not isinstance(oriented, bool):             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":76
 * 			raise ValueError
 * 
 * 		self._r = r             # <<<<<<<<<<<<<<
 * 		self._oriented = oriented
 * 		self._multiplicity = multiplicity
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_r); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_v_self->_r = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":77
 * 
 * 		self._r = r
 * 		self._oriented = oriented             # <<<<<<<<<<<<<<
 * 		self._multiplicity = multiplicity
 * 		self._certified_minimal_isomorph = False
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_oriented); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_v_self->_oriented = __pyx_t_2;

  /* "flagmatic/hypergraph_flag.pyx":78
 * 		self._r = r
 * 		self._oriented = oriented
 * 		self._multiplicity = multiplicity             # <<<<<<<<<<<<<<
 * 		self._certified_minimal_isomorph = False
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_multiplicity); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_v_self->_multiplicity = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":79
 * 		self._oriented = oriented
 * 		self._multiplicity = multiplicity
 * 		self._certified_minimal_isomorph = False             # <<<<<<<<<<<<<<
 * 
 * 		if representation is None:
 */
  __pyx_v_self->_certified_minimal_isomorph = 0;

  /* "flagmatic/hypergraph_flag.pyx":81
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if representation is None:             # <<<<<<<<<<<<<<
 * 			self._n = 0
 * 			self.ne = 0
 */
  __pyx_t_2 = (__pyx_v_representation == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":82
 * 
 * 		if representation is None:
 * 			self._n = 0             # <<<<<<<<<<<<<<
 * 			self.ne = 0
 * 			self._t = 0
 */
    __pyx_v_self->_n = 0;

    /* "flagmatic/hypergraph_flag.pyx":83
 * 		if representation is None:
 * 			self._n = 0
 * 			self.ne = 0             # <<<<<<<<<<<<<<
 * 			self._t = 0
 * 
 */
    __pyx_v_self->ne = 0;

    /* "flagmatic/hypergraph_flag.pyx":84
 * 			self._n = 0
 * 			self.ne = 0
 * 			self._t = 0             # <<<<<<<<<<<<<<
 * 
 * 		elif isinstance(representation, basestring):
 */
    __pyx_v_self->_t = 0;

    /* "flagmatic/hypergraph_flag.pyx":81
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if representation is None:             # <<<<<<<<<<<<<<
 * 			self._n = 0
 * 			self.ne = 0
 */
    goto __pyx_L8;
  }

  /* "flagmatic/hypergraph_flag.pyx":86
 * 			self._t = 0
 * 
 * 		elif isinstance(representation, basestring):             # <<<<<<<<<<<<<<
 * 			self.init_from_string(representation)
 * 
 */
  __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_representation); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":87
 * 
 * 		elif isinstance(representation, basestring):
 * 			self.init_from_string(representation)             # <<<<<<<<<<<<<<
 * 
 * 		elif representation in ZZ:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_from_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_representation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_representation);
      __Pyx_GIVEREF(__pyx_v_representation);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_representation);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":86
 * 			self._t = 0
 * 
 * 		elif isinstance(representation, basestring):             # <<<<<<<<<<<<<<
 * 			self.init_from_string(representation)
 * 
 */
    goto __pyx_L8;
  }

  /* "flagmatic/hypergraph_flag.pyx":89
 * 			self.init_from_string(representation)
 * 
 * 		elif representation in ZZ:             # <<<<<<<<<<<<<<
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Unsupported number of vertices.")
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ZZ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_representation, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":90
 * 
 * 		elif representation in ZZ:
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Unsupported number of vertices.")
 * 			self._n = representation
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_representation, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_representation, __pyx_int_35, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":91
 * 		elif representation in ZZ:
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Unsupported number of vertices.")             # <<<<<<<<<<<<<<
 * 			self._n = representation
 * 			self.ne = 0
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 91, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":90
 * 
 * 		elif representation in ZZ:
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Unsupported number of vertices.")
 * 			self._n = representation
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":92
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Unsupported number of vertices.")
 * 			self._n = representation             # <<<<<<<<<<<<<<
 * 			self.ne = 0
 * 			self._t = 0
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_representation); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __pyx_v_self->_n = __pyx_t_4;

    /* "flagmatic/hypergraph_flag.pyx":93
 * 				raise ValueError("Unsupported number of vertices.")
 * 			self._n = representation
 * 			self.ne = 0             # <<<<<<<<<<<<<<
 * 			self._t = 0
 * 
 */
    __pyx_v_self->ne = 0;

    /* "flagmatic/hypergraph_flag.pyx":94
 * 			self._n = representation
 * 			self.ne = 0
 * 			self._t = 0             # <<<<<<<<<<<<<<
 * 
 * 		else:
 */
    __pyx_v_self->_t = 0;

    /* "flagmatic/hypergraph_flag.pyx":89
 * 			self.init_from_string(representation)
 * 
 * 		elif representation in ZZ:             # <<<<<<<<<<<<<<
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Unsupported number of vertices.")
 */
    goto __pyx_L8;
  }

  /* "flagmatic/hypergraph_flag.pyx":97
 * 
 * 		else:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 97, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "flagmatic/hypergraph_flag.pyx":65
 * 
 * 
 * 	def __init__(self, representation=None, r=3, oriented=False, multiplicity=1):             # <<<<<<<<<<<<<<
 * 
 * 		if oriented and r != 2:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":105
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 
 * 			cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_v_edge_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":108
 * 
 * 			cdef int i
 * 			edge_list = []             # <<<<<<<<<<<<<<
 * 			if self._r == 3:
 * 				for i in range(0, 3 * self.ne, 3):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edge_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":109
 * 			cdef int i
 * 			edge_list = []
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				for i in range(0, 3 * self.ne, 3):
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":110
 * 			edge_list = []
 * 			if self._r == 3:
 * 				for i in range(0, 3 * self.ne, 3):             # <<<<<<<<<<<<<<
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 * 			elif self._r == 2:
 */
    __pyx_t_2 = (3 * __pyx_v_self->ne);
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=3) {
      __pyx_v_i = __pyx_t_3;

      /* "flagmatic/hypergraph_flag.pyx":111
 * 			if self._r == 3:
 * 				for i in range(0, 3 * self.ne, 3):
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))             # <<<<<<<<<<<<<<
 * 			elif self._r == 2:
 * 				for i in range(0, 2 * self.ne, 2):
 */
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[(__pyx_v_i + 1)])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[(__pyx_v_i + 2)])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_edge_list, __pyx_t_6); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "flagmatic/hypergraph_flag.pyx":109
 * 			cdef int i
 * 			edge_list = []
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				for i in range(0, 3 * self.ne, 3):
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":112
 * 				for i in range(0, 3 * self.ne, 3):
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 * 			elif self._r == 2:             # <<<<<<<<<<<<<<
 * 				for i in range(0, 2 * self.ne, 2):
 * 					edge_list.append((self._edges[i], self._edges[i + 1]))
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":113
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 * 			elif self._r == 2:
 * 				for i in range(0, 2 * self.ne, 2):             # <<<<<<<<<<<<<<
 * 					edge_list.append((self._edges[i], self._edges[i + 1]))
 * 
 */
    __pyx_t_2 = (2 * __pyx_v_self->ne);
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=2) {
      __pyx_v_i = __pyx_t_3;

      /* "flagmatic/hypergraph_flag.pyx":114
 * 			elif self._r == 2:
 * 				for i in range(0, 2 * self.ne, 2):
 * 					edge_list.append((self._edges[i], self._edges[i + 1]))             # <<<<<<<<<<<<<<
 * 
 * 			return tuple(edge_list)
 */
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[(__pyx_v_i + 1)])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_6 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_edge_list, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }

    /* "flagmatic/hypergraph_flag.pyx":112
 * 				for i in range(0, 3 * self.ne, 3):
 * 					edge_list.append((self._edges[i], self._edges[i + 1], self._edges[i + 2]))
 * 			elif self._r == 2:             # <<<<<<<<<<<<<<
 * 				for i in range(0, 2 * self.ne, 2):
 * 					edge_list.append((self._edges[i], self._edges[i + 1]))
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":116
 * 					edge_list.append((self._edges[i], self._edges[i + 1]))
 * 
 * 			return tuple(edge_list)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_AsTuple(__pyx_v_edge_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":105
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 
 * 			cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":124
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._r
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":125
 * 
 * 		def __get__(self):
 * 			return self._r             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":124
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._r
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.r.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":127
 * 			return self._r
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_2__set__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "flagmatic/hypergraph_flag.pyx":129
 * 		def __set__(self, value):
 * 
 * 			self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 			if not (value == 2 or value == 3):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":131
 * 			self._require_mutable()
 * 
 * 			if not (value == 2 or value == 3):             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":132
 * 
 * 			if not (value == 2 or value == 3):
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")             # <<<<<<<<<<<<<<
 * 
 * 			if self.ne != 0:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 132, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":131
 * 			self._require_mutable()
 * 
 * 			if not (value == 2 or value == 3):             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":134
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")
 * 
 * 			if self.ne != 0:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("cannot change edge size of a non-empty flag.")
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->ne != 0) != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":135
 * 
 * 			if self.ne != 0:
 * 				raise NotImplementedError("cannot change edge size of a non-empty flag.")             # <<<<<<<<<<<<<<
 * 
 * 			self._r = value
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 135, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":134
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")
 * 
 * 			if self.ne != 0:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("cannot change edge size of a non-empty flag.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":137
 * 				raise NotImplementedError("cannot change edge size of a non-empty flag.")
 * 
 * 			self._r = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_v_self->_r = __pyx_t_6;

  /* "flagmatic/hypergraph_flag.pyx":127
 * 			return self._r
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.r.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":145
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._oriented
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":146
 * 
 * 		def __get__(self):
 * 			return self._oriented             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_oriented); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":145
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._oriented
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.oriented.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":148
 * 			return self._oriented
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_2__set__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "flagmatic/hypergraph_flag.pyx":150
 * 		def __set__(self, value):
 * 
 * 			self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 			if not isinstance(value, bool):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":152
 * 			self._require_mutable()
 * 
 * 			if not isinstance(value, bool):             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  __pyx_t_1 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_value, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":153
 * 
 * 			if not isinstance(value, bool):
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 			self._oriented = value
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 153, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":152
 * 			self._require_mutable()
 * 
 * 			if not isinstance(value, bool):             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":155
 * 				raise ValueError
 * 
 * 			self._oriented = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_v_self->_oriented = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":148
 * 			return self._oriented
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.oriented.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":165
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._multiplicity
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":166
 * 
 * 		def __get__(self):
 * 			return self._multiplicity             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_multiplicity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":165
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._multiplicity
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.multiplicity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":168
 * 			return self._multiplicity
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_2__set__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "flagmatic/hypergraph_flag.pyx":170
 * 		def __set__(self, value):
 * 
 * 			self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 			if value < 1:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":172
 * 			self._require_mutable()
 * 
 * 			if value < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":173
 * 
 * 			if value < 1:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 			self._multiplicity = value
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 173, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":172
 * 			self._require_mutable()
 * 
 * 			if value < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":175
 * 				raise ValueError
 * 
 * 			self._multiplicity = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_v_self->_multiplicity = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":168
 * 			return self._multiplicity
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.multiplicity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":183
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._n
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":184
 * 
 * 		def __get__(self):
 * 			return self._n             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":183
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._n
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.n.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":186
 * 			return self._n
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			cdef int i
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_2__set__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "flagmatic/hypergraph_flag.pyx":190
 * 			cdef int i
 * 
 * 			self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 			if value < self._t:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":192
 * 			self._require_mutable()
 * 
 * 			if value < self._t:             # <<<<<<<<<<<<<<
 * 				raise ValueError("n cannot be less than t.")
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":193
 * 
 * 			if value < self._t:
 * 				raise ValueError("n cannot be less than t.")             # <<<<<<<<<<<<<<
 * 
 * 			if value < self._n:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 193, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":192
 * 			self._require_mutable()
 * 
 * 			if value < self._t:             # <<<<<<<<<<<<<<
 * 				raise ValueError("n cannot be less than t.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":195
 * 				raise ValueError("n cannot be less than t.")
 * 
 * 			if value < self._n:             # <<<<<<<<<<<<<<
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":196
 * 
 * 			if value < self._n:
 * 				for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 					if self._edges[i] >= value:
 * 						raise ValueError("Not possible due to edges.")
 */
    __pyx_t_5 = (__pyx_v_self->_r * __pyx_v_self->ne);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "flagmatic/hypergraph_flag.pyx":197
 * 			if value < self._n:
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:             # <<<<<<<<<<<<<<
 * 						raise ValueError("Not possible due to edges.")
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_value, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":198
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:
 * 						raise ValueError("Not possible due to edges.")             # <<<<<<<<<<<<<<
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 198, __pyx_L1_error)

        /* "flagmatic/hypergraph_flag.pyx":197
 * 			if value < self._n:
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:             # <<<<<<<<<<<<<<
 * 						raise ValueError("Not possible due to edges.")
 * 
 */
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":195
 * 				raise ValueError("n cannot be less than t.")
 * 
 * 			if value < self._n:             # <<<<<<<<<<<<<<
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":200
 * 						raise ValueError("Not possible due to edges.")
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Too many vertices.")
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_int_35, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":201
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Too many vertices.")             # <<<<<<<<<<<<<<
 * 
 * 			self._n = value
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 201, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":200
 * 						raise ValueError("Not possible due to edges.")
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Too many vertices.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":203
 * 				raise ValueError("Too many vertices.")
 * 
 * 			self._n = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_self->_n = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":186
 * 			return self._n
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			cdef int i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.n.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":211
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._t
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flagmatic/hypergraph_flag.pyx":212
 * 
 * 		def __get__(self):
 * 			return self._t             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":211
 * 		"""
 * 
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self._t
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.t.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":214
 * 			return self._t
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

/* Python wrapper */
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_2__set__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_2__set__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "flagmatic/hypergraph_flag.pyx":216
 * 		def __set__(self, value):
 * 
 * 			self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 			if value < 0 or value > self._n:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":218
 * 			self._require_mutable()
 * 
 * 			if value < 0 or value > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":219
 * 
 * 			if value < 0 or value > self._n:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 			self._t = value
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 219, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":218
 * 			self._require_mutable()
 * 
 * 			if value < 0 or value > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":221
 * 				raise ValueError
 * 
 * 			self._t = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_v_self->_t = __pyx_t_6;

  /* "flagmatic/hypergraph_flag.pyx":214
 * 			return self._t
 * 
 * 		def __set__(self, value):             # <<<<<<<<<<<<<<
 * 
 * 			self._require_mutable()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.t.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":224
 * 
 * 
 * 	def add_edge(self, edge):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int x, y, z
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_3add_edge(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_3add_edge(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_edge (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2add_edge(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_edge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2add_edge(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_edge) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("add_edge", 0);

  /* "flagmatic/hypergraph_flag.pyx":228
 * 		cdef int x, y, z
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 		self._certified_minimal_isomorph = False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":229
 * 
 * 		self._require_mutable()
 * 		self._certified_minimal_isomorph = False             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
  __pyx_v_self->_certified_minimal_isomorph = 0;

  /* "flagmatic/hypergraph_flag.pyx":231
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":233
 * 		if self._r == 3:
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("Too many edges.")
 * 
 */
    __pyx_t_4 = ((((__pyx_v_self->ne + 1) * 3) > 0x100) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":234
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:
 * 				raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 			x = <int?> edge[0]
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 234, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":233
 * 		if self._r == 3:
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("Too many edges.")
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":236
 * 				raise NotImplementedError("Too many edges.")
 * 
 * 			x = <int?> edge[0]             # <<<<<<<<<<<<<<
 * 			y = <int?> edge[1]
 * 			z = <int?> edge[2]
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_edge, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = ((int)__pyx_t_5);

    /* "flagmatic/hypergraph_flag.pyx":237
 * 
 * 			x = <int?> edge[0]
 * 			y = <int?> edge[1]             # <<<<<<<<<<<<<<
 * 			z = <int?> edge[2]
 * 			if x < 1 or y < 1 or z < 1:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_edge, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = ((int)__pyx_t_5);

    /* "flagmatic/hypergraph_flag.pyx":238
 * 			x = <int?> edge[0]
 * 			y = <int?> edge[1]
 * 			z = <int?> edge[2]             # <<<<<<<<<<<<<<
 * 			if x < 1 or y < 1 or z < 1:
 * 				raise ValueError
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_edge, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_z = ((int)__pyx_t_5);

    /* "flagmatic/hypergraph_flag.pyx":239
 * 			y = <int?> edge[1]
 * 			z = <int?> edge[2]
 * 			if x < 1 or y < 1 or z < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 			if x > self._n or y > self._n or z > self._n:
 */
    __pyx_t_6 = ((__pyx_v_x < 1) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_y < 1) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_z < 1) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":240
 * 			z = <int?> edge[2]
 * 			if x < 1 or y < 1 or z < 1:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 			if x > self._n or y > self._n or z > self._n:
 * 				raise ValueError
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 240, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":239
 * 			y = <int?> edge[1]
 * 			z = <int?> edge[2]
 * 			if x < 1 or y < 1 or z < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 			if x > self._n or y > self._n or z > self._n:
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":241
 * 			if x < 1 or y < 1 or z < 1:
 * 				raise ValueError
 * 			if x > self._n or y > self._n or z > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    __pyx_t_6 = ((__pyx_v_x > __pyx_v_self->_n) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_y > __pyx_v_self->_n) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_z > __pyx_v_self->_n) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":242
 * 				raise ValueError
 * 			if x > self._n or y > self._n or z > self._n:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 			self._edges[3 * self.ne] = x
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 242, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":241
 * 			if x < 1 or y < 1 or z < 1:
 * 				raise ValueError
 * 			if x > self._n or y > self._n or z > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":244
 * 				raise ValueError
 * 
 * 			self._edges[3 * self.ne] = x             # <<<<<<<<<<<<<<
 * 			self._edges[3 * self.ne + 1] = y
 * 			self._edges[3 * self.ne + 2] = z
 */
    (__pyx_v_self->_edges[(3 * __pyx_v_self->ne)]) = __pyx_v_x;

    /* "flagmatic/hypergraph_flag.pyx":245
 * 
 * 			self._edges[3 * self.ne] = x
 * 			self._edges[3 * self.ne + 1] = y             # <<<<<<<<<<<<<<
 * 			self._edges[3 * self.ne + 2] = z
 * 			self.ne += 1
 */
    (__pyx_v_self->_edges[((3 * __pyx_v_self->ne) + 1)]) = __pyx_v_y;

    /* "flagmatic/hypergraph_flag.pyx":246
 * 			self._edges[3 * self.ne] = x
 * 			self._edges[3 * self.ne + 1] = y
 * 			self._edges[3 * self.ne + 2] = z             # <<<<<<<<<<<<<<
 * 			self.ne += 1
 * 
 */
    (__pyx_v_self->_edges[((3 * __pyx_v_self->ne) + 2)]) = __pyx_v_z;

    /* "flagmatic/hypergraph_flag.pyx":247
 * 			self._edges[3 * self.ne + 1] = y
 * 			self._edges[3 * self.ne + 2] = z
 * 			self.ne += 1             # <<<<<<<<<<<<<<
 * 
 * 			if x == y or x == z or y == z:
 */
    __pyx_v_self->ne = (__pyx_v_self->ne + 1);

    /* "flagmatic/hypergraph_flag.pyx":249
 * 			self.ne += 1
 * 
 * 			if x == y or x == z or y == z:             # <<<<<<<<<<<<<<
 * 				self.is_degenerate = True
 * 
 */
    __pyx_t_6 = ((__pyx_v_x == __pyx_v_y) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_x == __pyx_v_z) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_y == __pyx_v_z) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":250
 * 
 * 			if x == y or x == z or y == z:
 * 				self.is_degenerate = True             # <<<<<<<<<<<<<<
 * 
 * 		elif self._r == 2:
 */
      __pyx_v_self->is_degenerate = 1;

      /* "flagmatic/hypergraph_flag.pyx":249
 * 			self.ne += 1
 * 
 * 			if x == y or x == z or y == z:             # <<<<<<<<<<<<<<
 * 				self.is_degenerate = True
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":231
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":252
 * 				self.is_degenerate = True
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":254
 * 		elif self._r == 2:
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("Too many edges.")
 * 
 */
    __pyx_t_4 = ((((__pyx_v_self->ne + 1) * 2) > 0x100) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":255
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:
 * 				raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 			x = <int?> edge[0]
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 255, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":254
 * 		elif self._r == 2:
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 				raise NotImplementedError("Too many edges.")
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":257
 * 				raise NotImplementedError("Too many edges.")
 * 
 * 			x = <int?> edge[0]             # <<<<<<<<<<<<<<
 * 			y = <int?> edge[1]
 * 			if x < 1 or y < 1:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_edge, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = ((int)__pyx_t_5);

    /* "flagmatic/hypergraph_flag.pyx":258
 * 
 * 			x = <int?> edge[0]
 * 			y = <int?> edge[1]             # <<<<<<<<<<<<<<
 * 			if x < 1 or y < 1:
 * 				raise ValueError
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_edge, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = ((int)__pyx_t_5);

    /* "flagmatic/hypergraph_flag.pyx":259
 * 			x = <int?> edge[0]
 * 			y = <int?> edge[1]
 * 			if x < 1 or y < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 			if x > self._n or y > self._n:
 */
    __pyx_t_6 = ((__pyx_v_x < 1) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_y < 1) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":260
 * 			y = <int?> edge[1]
 * 			if x < 1 or y < 1:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 			if x > self._n or y > self._n:
 * 				raise ValueError
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 260, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":259
 * 			x = <int?> edge[0]
 * 			y = <int?> edge[1]
 * 			if x < 1 or y < 1:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 			if x > self._n or y > self._n:
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":261
 * 			if x < 1 or y < 1:
 * 				raise ValueError
 * 			if x > self._n or y > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    __pyx_t_6 = ((__pyx_v_x > __pyx_v_self->_n) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_y > __pyx_v_self->_n) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":262
 * 				raise ValueError
 * 			if x > self._n or y > self._n:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 			self._edges[2 * self.ne] = x
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 262, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":261
 * 			if x < 1 or y < 1:
 * 				raise ValueError
 * 			if x > self._n or y > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":264
 * 				raise ValueError
 * 
 * 			self._edges[2 * self.ne] = x             # <<<<<<<<<<<<<<
 * 			self._edges[2 * self.ne + 1] = y
 * 			self.ne += 1
 */
    (__pyx_v_self->_edges[(2 * __pyx_v_self->ne)]) = __pyx_v_x;

    /* "flagmatic/hypergraph_flag.pyx":265
 * 
 * 			self._edges[2 * self.ne] = x
 * 			self._edges[2 * self.ne + 1] = y             # <<<<<<<<<<<<<<
 * 			self.ne += 1
 * 
 */
    (__pyx_v_self->_edges[((2 * __pyx_v_self->ne) + 1)]) = __pyx_v_y;

    /* "flagmatic/hypergraph_flag.pyx":266
 * 			self._edges[2 * self.ne] = x
 * 			self._edges[2 * self.ne + 1] = y
 * 			self.ne += 1             # <<<<<<<<<<<<<<
 * 
 * 			if x == y:
 */
    __pyx_v_self->ne = (__pyx_v_self->ne + 1);

    /* "flagmatic/hypergraph_flag.pyx":268
 * 			self.ne += 1
 * 
 * 			if x == y:             # <<<<<<<<<<<<<<
 * 				self.is_degenerate = True
 * 
 */
    __pyx_t_4 = ((__pyx_v_x == __pyx_v_y) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":269
 * 
 * 			if x == y:
 * 				self.is_degenerate = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_self->is_degenerate = 1;

      /* "flagmatic/hypergraph_flag.pyx":268
 * 			self.ne += 1
 * 
 * 			if x == y:             # <<<<<<<<<<<<<<
 * 				self.is_degenerate = True
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":252
 * 				self.is_degenerate = True
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":224
 * 
 * 
 * 	def add_edge(self, edge):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int x, y, z
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.add_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":274
 * 	# TODO: consider writing more of this in Cython
 * 
 * 	def delete_edge(self, edge):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int k
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5delete_edge(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5delete_edge(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_edge (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_4delete_edge(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_edge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_4delete_edge(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_edge) {
  int __pyx_v_k;
  PyObject *__pyx_v_se = NULL;
  PyObject *__pyx_v_edges = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("delete_edge", 0);

  /* "flagmatic/hypergraph_flag.pyx":278
 * 		cdef int k
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 		self._certified_minimal_isomorph = False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":279
 * 
 * 		self._require_mutable()
 * 		self._certified_minimal_isomorph = False             # <<<<<<<<<<<<<<
 * 
 * 		if not len(edge) == self._r:
 */
  __pyx_v_self->_certified_minimal_isomorph = 0;

  /* "flagmatic/hypergraph_flag.pyx":281
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if not len(edge) == self._r:             # <<<<<<<<<<<<<<
 * 			raise ValueError("bad edge size.")
 * 
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_edge); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_t_5 = ((!((__pyx_t_4 == __pyx_v_self->_r) != 0)) != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":282
 * 
 * 		if not len(edge) == self._r:
 * 			raise ValueError("bad edge size.")             # <<<<<<<<<<<<<<
 * 
 * 		se = tuple(sorted(edge))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 282, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":281
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if not len(edge) == self._r:             # <<<<<<<<<<<<<<
 * 			raise ValueError("bad edge size.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":284
 * 			raise ValueError("bad edge size.")
 * 
 * 		se = tuple(sorted(edge))             # <<<<<<<<<<<<<<
 * 		edges = [tuple(sorted(e)) for e in self.edges]
 * 
 */
  __pyx_t_2 = PySequence_List(__pyx_v_edge); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 284, __pyx_L1_error)
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_AsTuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_se = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":285
 * 
 * 		se = tuple(sorted(edge))
 * 		edges = [tuple(sorted(e)) for e in self.edges]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self.ne):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 285, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 285, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_8 = PySequence_List(__pyx_v_e); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 285, __pyx_L1_error)
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 285, __pyx_L1_error)
    }
    __pyx_t_8 = PyList_AsTuple(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_edges = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":287
 * 		edges = [tuple(sorted(e)) for e in self.edges]
 * 
 * 		for i in range(self.ne):             # <<<<<<<<<<<<<<
 * 			if edges[i] == se:
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ne); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 287, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 287, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":288
 * 
 * 		for i in range(self.ne):
 * 			if edges[i] == se:             # <<<<<<<<<<<<<<
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 * 					self._edges[k] = self._edges[k + self._r]
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_edges, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_v_se, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_5) {

      /* "flagmatic/hypergraph_flag.pyx":289
 * 		for i in range(self.ne):
 * 			if edges[i] == se:
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):             # <<<<<<<<<<<<<<
 * 					self._edges[k] = self._edges[k + self._r]
 * 				self.ne -= 1
 */
      __pyx_t_9 = ((__pyx_v_self->ne - 1) * __pyx_v_self->_r);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_i, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (__pyx_t_11 = __pyx_t_10; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_k = __pyx_t_11;

        /* "flagmatic/hypergraph_flag.pyx":290
 * 			if edges[i] == se:
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 * 					self._edges[k] = self._edges[k + self._r]             # <<<<<<<<<<<<<<
 * 				self.ne -= 1
 * 				return
 */
        (__pyx_v_self->_edges[__pyx_v_k]) = (__pyx_v_self->_edges[(__pyx_v_k + __pyx_v_self->_r)]);
      }

      /* "flagmatic/hypergraph_flag.pyx":291
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 * 					self._edges[k] = self._edges[k + self._r]
 * 				self.ne -= 1             # <<<<<<<<<<<<<<
 * 				return
 * 
 */
      __pyx_v_self->ne = (__pyx_v_self->ne - 1);

      /* "flagmatic/hypergraph_flag.pyx":292
 * 					self._edges[k] = self._edges[k + self._r]
 * 				self.ne -= 1
 * 				return             # <<<<<<<<<<<<<<
 * 
 * 		raise ValueError("edge not present.")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":288
 * 
 * 		for i in range(self.ne):
 * 			if edges[i] == se:             # <<<<<<<<<<<<<<
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 * 					self._edges[k] = self._edges[k + self._r]
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":287
 * 		edges = [tuple(sorted(e)) for e in self.edges]
 * 
 * 		for i in range(self.ne):             # <<<<<<<<<<<<<<
 * 			if edges[i] == se:
 * 				for k in range(i * self._r, (self.ne - 1) * self._r):
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":294
 * 				return
 * 
 * 		raise ValueError("edge not present.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 294, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":274
 * 	# TODO: consider writing more of this in Cython
 * 
 * 	def delete_edge(self, edge):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int k
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.delete_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_se);
  __Pyx_XDECREF(__pyx_v_edges);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":297
 * 
 * 
 * 	def __getitem__(self, name):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i = <int?> name
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_6__getitem__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_6__getitem__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "flagmatic/hypergraph_flag.pyx":299
 * 	def __getitem__(self, name):
 * 
 * 		cdef int i = <int?> name             # <<<<<<<<<<<<<<
 * 		if i < self.ne:
 * 			if self._r == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_name); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
  __pyx_v_i = ((int)__pyx_t_1);

  /* "flagmatic/hypergraph_flag.pyx":300
 * 
 * 		cdef int i = <int?> name
 * 		if i < self.ne:             # <<<<<<<<<<<<<<
 * 			if self._r == 3:
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 */
  __pyx_t_2 = ((__pyx_v_i < __pyx_v_self->ne) != 0);
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":301
 * 		cdef int i = <int?> name
 * 		if i < self.ne:
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 * 			elif self._r == 2:
 */
    switch (__pyx_v_self->_r) {
      case 3:

      /* "flagmatic/hypergraph_flag.pyx":302
 * 		if i < self.ne:
 * 			if self._r == 3:
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])             # <<<<<<<<<<<<<<
 * 			elif self._r == 2:
 * 				return (self._edges[2 * i], self._edges[2 * i + 1])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[(3 * __pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[((3 * __pyx_v_i) + 1)])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[((3 * __pyx_v_i) + 2)])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":301
 * 		cdef int i = <int?> name
 * 		if i < self.ne:
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 * 			elif self._r == 2:
 */
      break;

      /* "flagmatic/hypergraph_flag.pyx":303
 * 			if self._r == 3:
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 * 			elif self._r == 2:             # <<<<<<<<<<<<<<
 * 				return (self._edges[2 * i], self._edges[2 * i + 1])
 * 		else:
 */
      case 2:

      /* "flagmatic/hypergraph_flag.pyx":304
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 * 			elif self._r == 2:
 * 				return (self._edges[2 * i], self._edges[2 * i + 1])             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise IndexError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[(2 * __pyx_v_i)])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->_edges[((2 * __pyx_v_i) + 1)])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_6 = 0;
      __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":303
 * 			if self._r == 3:
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 * 			elif self._r == 2:             # <<<<<<<<<<<<<<
 * 				return (self._edges[2 * i], self._edges[2 * i + 1])
 * 		else:
 */
      break;
      default: break;
    }

    /* "flagmatic/hypergraph_flag.pyx":300
 * 
 * 		cdef int i = <int?> name
 * 		if i < self.ne:             # <<<<<<<<<<<<<<
 * 			if self._r == 3:
 * 				return (self._edges[3 * i], self._edges[3 * i + 1], self._edges[3 * i + 2])
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":306
 * 				return (self._edges[2 * i], self._edges[2 * i + 1])
 * 		else:
 * 			raise IndexError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_IndexError, 0, 0, 0);
    __PYX_ERR(0, 306, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":297
 * 
 * 
 * 	def __getitem__(self, name):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i = <int?> name
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":309
 * 
 * 
 * 	def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 * 		return list(self.edges).__iter__()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8__iter__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_8__iter__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "flagmatic/hypergraph_flag.pyx":311
 * 	def __iter__(self):
 * 
 * 		return list(self.edges).__iter__()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":309
 * 
 * 
 * 	def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 * 		return list(self.edges).__iter__()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":314
 * 
 * 
 * 	def init_from_string(self, s):             # <<<<<<<<<<<<<<
 * 
 * 		def decode_symbol(c):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_11init_from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_11init_from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_from_string (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_10init_from_string(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":316
 * 	def init_from_string(self, s):
 * 
 * 		def decode_symbol(c):             # <<<<<<<<<<<<<<
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_1decode_symbol(PyObject *__pyx_self, PyObject *__pyx_v_c); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_1decode_symbol = {"decode_symbol", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_1decode_symbol, METH_O, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_1decode_symbol(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decode_symbol (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_self, ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("decode_symbol", 0);

  /* "flagmatic/hypergraph_flag.pyx":317
 * 
 * 		def decode_symbol(c):
 * 			try:             # <<<<<<<<<<<<<<
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "flagmatic/hypergraph_flag.pyx":318
 * 		def decode_symbol(c):
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)             # <<<<<<<<<<<<<<
 * 			except ValueError:
 * 				raise ValueError("Invalid representation.")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0123456789abcdefghijklmnopqrstuv, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_c); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 318, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 318, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_c);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 318, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "flagmatic/hypergraph_flag.pyx":317
 * 
 * 		def decode_symbol(c):
 * 			try:             # <<<<<<<<<<<<<<
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":319
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.init_from_string.decode_symbol", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 319, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_7);

      /* "flagmatic/hypergraph_flag.pyx":320
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 		if s[1] != ":":
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 320, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "flagmatic/hypergraph_flag.pyx":317
 * 
 * 		def decode_symbol(c):
 * 			try:             # <<<<<<<<<<<<<<
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "flagmatic/hypergraph_flag.pyx":316
 * 	def init_from_string(self, s):
 * 
 * 		def decode_symbol(c):             # <<<<<<<<<<<<<<
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.init_from_string.decode_symbol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":314
 * 
 * 
 * 	def init_from_string(self, s):             # <<<<<<<<<<<<<<
 * 
 * 		def decode_symbol(c):
 */

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_10init_from_string(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_v_decode_symbol = 0;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_nei = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("init_from_string", 0);

  /* "flagmatic/hypergraph_flag.pyx":316
 * 	def init_from_string(self, s):
 * 
 * 		def decode_symbol(c):             # <<<<<<<<<<<<<<
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_1decode_symbol, 0, __pyx_n_s_init_from_string_locals_decode_s, NULL, __pyx_n_s_flagmatic_hypergraph_flag, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_decode_symbol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":322
 * 				raise ValueError("Invalid representation.")
 * 
 * 		if s[1] != ":":             # <<<<<<<<<<<<<<
 * 			raise ValueError("Invalid representation.")
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_s, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__15, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":323
 * 
 * 		if s[1] != ":":
 * 			raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 		n = decode_symbol(s[0])
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 323, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":322
 * 				raise ValueError("Invalid representation.")
 * 
 * 		if s[1] != ":":             # <<<<<<<<<<<<<<
 * 			raise ValueError("Invalid representation.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":325
 * 			raise ValueError("Invalid representation.")
 * 
 * 		n = decode_symbol(s[0])             # <<<<<<<<<<<<<<
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:
 * 			raise ValueError("Unsupported number of vertices.")
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_s, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":326
 * 
 * 		n = decode_symbol(s[0])
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 			raise ValueError("Unsupported number of vertices.")
 * 		self._n = n
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_n, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_n, __pyx_int_35, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":327
 * 		n = decode_symbol(s[0])
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:
 * 			raise ValueError("Unsupported number of vertices.")             # <<<<<<<<<<<<<<
 * 		self._n = n
 * 		self.ne = 0
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 327, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":326
 * 
 * 		n = decode_symbol(s[0])
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:             # <<<<<<<<<<<<<<
 * 			raise ValueError("Unsupported number of vertices.")
 * 		self._n = n
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":328
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:
 * 			raise ValueError("Unsupported number of vertices.")
 * 		self._n = n             # <<<<<<<<<<<<<<
 * 		self.ne = 0
 * 		nei = len(s) - 2
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_v_self->_n = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":329
 * 			raise ValueError("Unsupported number of vertices.")
 * 		self._n = n
 * 		self.ne = 0             # <<<<<<<<<<<<<<
 * 		nei = len(s) - 2
 * 
 */
  __pyx_v_self->ne = 0;

  /* "flagmatic/hypergraph_flag.pyx":330
 * 		self._n = n
 * 		self.ne = 0
 * 		nei = len(s) - 2             # <<<<<<<<<<<<<<
 * 
 * 		if s[-1] == ")":
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_s); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_6 - 2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nei = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":332
 * 		nei = len(s) - 2
 * 
 * 		if s[-1] == ")":             # <<<<<<<<<<<<<<
 * 			if s[-3] != "(":
 * 				raise ValueError("Invalid representation.")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_s, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__18, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":333
 * 
 * 		if s[-1] == ")":
 * 			if s[-3] != "(":             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 			t = decode_symbol(s[-2])
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_s, -3L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__19, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":334
 * 		if s[-1] == ")":
 * 			if s[-3] != "(":
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 334, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":333
 * 
 * 		if s[-1] == ")":
 * 			if s[-3] != "(":             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 			t = decode_symbol(s[-2])
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":335
 * 			if s[-3] != "(":
 * 				raise ValueError("Invalid representation.")
 * 			t = decode_symbol(s[-2])             # <<<<<<<<<<<<<<
 * 			if t < 0 or t > n:
 * 				raise ValueError("Invalid t.")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_s, -2L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_t = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":336
 * 				raise ValueError("Invalid representation.")
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid t.")
 * 			nei -= 3
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_t, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_t, __pyx_v_n, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":337
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:
 * 				raise ValueError("Invalid t.")             # <<<<<<<<<<<<<<
 * 			nei -= 3
 * 		else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 337, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":336
 * 				raise ValueError("Invalid representation.")
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid t.")
 * 			nei -= 3
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":338
 * 			if t < 0 or t > n:
 * 				raise ValueError("Invalid t.")
 * 			nei -= 3             # <<<<<<<<<<<<<<
 * 		else:
 * 			t = 0
 */
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_nei, __pyx_int_3, 3, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_nei, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":332
 * 		nei = len(s) - 2
 * 
 * 		if s[-1] == ")":             # <<<<<<<<<<<<<<
 * 			if s[-3] != "(":
 * 				raise ValueError("Invalid representation.")
 */
    goto __pyx_L7;
  }

  /* "flagmatic/hypergraph_flag.pyx":340
 * 			nei -= 3
 * 		else:
 * 			t = 0             # <<<<<<<<<<<<<<
 * 
 * 		self._t = t
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_t = __pyx_int_0;
  }
  __pyx_L7:;

  /* "flagmatic/hypergraph_flag.pyx":342
 * 			t = 0
 * 
 * 		self._t = t             # <<<<<<<<<<<<<<
 * 
 * 		if nei > MAX_NUMBER_OF_EDGE_INTS:
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_t); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_v_self->_t = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":344
 * 		self._t = t
 * 
 * 		if nei > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Too many edges.")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_nei, __pyx_int_256, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":345
 * 
 * 		if nei > MAX_NUMBER_OF_EDGE_INTS:
 * 			raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 345, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":344
 * 		self._t = t
 * 
 * 		if nei > MAX_NUMBER_OF_EDGE_INTS:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Too many edges.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":347
 * 			raise NotImplementedError("Too many edges.")
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			if nei % 3 != 0:
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":349
 * 		if self._r == 3:
 * 
 * 			if nei % 3 != 0:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_v_nei, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":350
 * 
 * 			if nei % 3 != 0:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(2, 2 + nei, 3):
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 350, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":349
 * 		if self._r == 3:
 * 
 * 			if nei % 3 != 0:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":352
 * 				raise ValueError("Invalid representation.")
 * 
 * 			for i in range(2, 2 + nei, 3):             # <<<<<<<<<<<<<<
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1]), decode_symbol(s[i + 2])))
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_AddCObj(__pyx_int_2, __pyx_v_nei, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 352, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":353
 * 
 * 			for i in range(2, 2 + nei, 3):
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1]), decode_symbol(s[i + 2])))             # <<<<<<<<<<<<<<
 * 
 * 		elif self._r == 2:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_GetItem(__pyx_v_s, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = PyObject_GetItem(__pyx_v_s, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_GetItem(__pyx_v_s, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":352
 * 				raise ValueError("Invalid representation.")
 * 
 * 			for i in range(2, 2 + nei, 3):             # <<<<<<<<<<<<<<
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1]), decode_symbol(s[i + 2])))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":347
 * 			raise NotImplementedError("Too many edges.")
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			if nei % 3 != 0:
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":355
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1]), decode_symbol(s[i + 2])))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			if nei % 2 != 0:
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":357
 * 		elif self._r == 2:
 * 
 * 			if nei % 2 != 0:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_v_nei, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":358
 * 
 * 			if nei % 2 != 0:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(2, 2 + nei, 2):
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 358, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":357
 * 		elif self._r == 2:
 * 
 * 			if nei % 2 != 0:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Invalid representation.")
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":360
 * 				raise ValueError("Invalid representation.")
 * 
 * 			for i in range(2, 2 + nei, 2):             # <<<<<<<<<<<<<<
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1])))
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_AddCObj(__pyx_int_2, __pyx_v_nei, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_2);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 360, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 360, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":361
 * 
 * 			for i in range(2, 2 + nei, 2):
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1])))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_GetItem(__pyx_v_s, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = PyObject_GetItem(__pyx_v_s, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16init_from_string_decode_symbol(__pyx_v_decode_symbol, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
      __pyx_t_12 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":360
 * 				raise ValueError("Invalid representation.")
 * 
 * 			for i in range(2, 2 + nei, 2):             # <<<<<<<<<<<<<<
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1])))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":355
 * 				self.add_edge((decode_symbol(s[i]), decode_symbol(s[i + 1]), decode_symbol(s[i + 2])))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			if nei % 2 != 0:
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":314
 * 
 * 
 * 	def init_from_string(self, s):             # <<<<<<<<<<<<<<
 * 
 * 		def decode_symbol(c):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.init_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_decode_symbol);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_nei);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":364
 * 
 * 
 * 	def _repr_(self):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13_repr_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12_repr_(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_12_repr_(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  int __pyx_v_i;
  char *__pyx_v_symbols;
  PyObject *__pyx_v_string_rep = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_repr_", 0);

  /* "flagmatic/hypergraph_flag.pyx":367
 * 
 * 		cdef int i
 * 		cdef char *symbols = "0123456789abcdefghijklmnopqrstuvwxyz"             # <<<<<<<<<<<<<<
 * 
 * 		if self._n > 35:
 */
  __pyx_v_symbols = ((char *)"0123456789abcdefghijklmnopqrstuvwxyz");

  /* "flagmatic/hypergraph_flag.pyx":369
 * 		cdef char *symbols = "0123456789abcdefghijklmnopqrstuvwxyz"
 * 
 * 		if self._n > 35:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_n > 35) != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":370
 * 
 * 		if self._n > 35:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		string_rep = chr(symbols[self._n]) + ":"
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 370, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":369
 * 		cdef char *symbols = "0123456789abcdefghijklmnopqrstuvwxyz"
 * 
 * 		if self._n > 35:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":372
 * 			raise NotImplementedError
 * 
 * 		string_rep = chr(symbols[self._n]) + ":"             # <<<<<<<<<<<<<<
 * 		for i in range(self._r * self.ne):
 * 			string_rep += chr(symbols[self._edges[i]])
 */
  __pyx_t_2 = __Pyx_PyInt_From_char((__pyx_v_symbols[__pyx_v_self->_n])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_string_rep = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":373
 * 
 * 		string_rep = chr(symbols[self._n]) + ":"
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			string_rep += chr(symbols[self._edges[i]])
 * 		if self._t > 0:
 */
  __pyx_t_4 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "flagmatic/hypergraph_flag.pyx":374
 * 		string_rep = chr(symbols[self._n]) + ":"
 * 		for i in range(self._r * self.ne):
 * 			string_rep += chr(symbols[self._edges[i]])             # <<<<<<<<<<<<<<
 * 		if self._t > 0:
 * 			string_rep += "(" + chr(symbols[self._t]) + ")"
 */
    __pyx_t_3 = __Pyx_PyInt_From_char((__pyx_v_symbols[(__pyx_v_self->_edges[__pyx_v_i])])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_string_rep, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_string_rep, __pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":375
 * 		for i in range(self._r * self.ne):
 * 			string_rep += chr(symbols[self._edges[i]])
 * 		if self._t > 0:             # <<<<<<<<<<<<<<
 * 			string_rep += "(" + chr(symbols[self._t]) + ")"
 * 		return string_rep
 */
  __pyx_t_1 = ((__pyx_v_self->_t > 0) != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":376
 * 			string_rep += chr(symbols[self._edges[i]])
 * 		if self._t > 0:
 * 			string_rep += "(" + chr(symbols[self._t]) + ")"             # <<<<<<<<<<<<<<
 * 		return string_rep
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_char((__pyx_v_symbols[__pyx_v_self->_t])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s__19, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_string_rep, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_string_rep, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":375
 * 		for i in range(self._r * self.ne):
 * 			string_rep += chr(symbols[self._edges[i]])
 * 		if self._t > 0:             # <<<<<<<<<<<<<<
 * 			string_rep += "(" + chr(symbols[self._t]) + ")"
 * 		return string_rep
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":377
 * 		if self._t > 0:
 * 			string_rep += "(" + chr(symbols[self._t]) + ")"
 * 		return string_rep             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_string_rep);
  __pyx_r = __pyx_v_string_rep;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":364
 * 
 * 
 * 	def _repr_(self):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag._repr_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_string_rep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":383
 * 	# TODO: maintain vigilance that we have everything...
 * 
 * 	def __copy__(self):             # <<<<<<<<<<<<<<
 * 		r"""
 * 		Make a (mutable) copy.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_15__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_14__copy__[] = "\n\t\tMake a (mutable) copy.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_15__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14__copy__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14__copy__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  int __pyx_v_i;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_ng = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "flagmatic/hypergraph_flag.pyx":390
 * 		cdef HypergraphFlag ng
 * 
 * 		ng = type(self)()             # <<<<<<<<<<<<<<
 * 		ng._n = self._n
 * 		ng._r = self._r
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_t_2 = ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))); __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag))))) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_v_ng = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":391
 * 
 * 		ng = type(self)()
 * 		ng._n = self._n             # <<<<<<<<<<<<<<
 * 		ng._r = self._r
 * 		ng._oriented = self._oriented
 */
  __pyx_t_4 = __pyx_v_self->_n;
  __pyx_v_ng->_n = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":392
 * 		ng = type(self)()
 * 		ng._n = self._n
 * 		ng._r = self._r             # <<<<<<<<<<<<<<
 * 		ng._oriented = self._oriented
 * 		ng._multiplicity = self._multiplicity
 */
  __pyx_t_4 = __pyx_v_self->_r;
  __pyx_v_ng->_r = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":393
 * 		ng._n = self._n
 * 		ng._r = self._r
 * 		ng._oriented = self._oriented             # <<<<<<<<<<<<<<
 * 		ng._multiplicity = self._multiplicity
 * 		ng._t = self._t
 */
  __pyx_t_5 = __pyx_v_self->_oriented;
  __pyx_v_ng->_oriented = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":394
 * 		ng._r = self._r
 * 		ng._oriented = self._oriented
 * 		ng._multiplicity = self._multiplicity             # <<<<<<<<<<<<<<
 * 		ng._t = self._t
 * 		ng.ne = self.ne
 */
  __pyx_t_4 = __pyx_v_self->_multiplicity;
  __pyx_v_ng->_multiplicity = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":395
 * 		ng._oriented = self._oriented
 * 		ng._multiplicity = self._multiplicity
 * 		ng._t = self._t             # <<<<<<<<<<<<<<
 * 		ng.ne = self.ne
 * 		ng.is_degenerate = self.is_degenerate
 */
  __pyx_t_4 = __pyx_v_self->_t;
  __pyx_v_ng->_t = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":396
 * 		ng._multiplicity = self._multiplicity
 * 		ng._t = self._t
 * 		ng.ne = self.ne             # <<<<<<<<<<<<<<
 * 		ng.is_degenerate = self.is_degenerate
 * 		ng._certified_minimal_isomorph = self._certified_minimal_isomorph
 */
  __pyx_t_4 = __pyx_v_self->ne;
  __pyx_v_ng->ne = __pyx_t_4;

  /* "flagmatic/hypergraph_flag.pyx":397
 * 		ng._t = self._t
 * 		ng.ne = self.ne
 * 		ng.is_degenerate = self.is_degenerate             # <<<<<<<<<<<<<<
 * 		ng._certified_minimal_isomorph = self._certified_minimal_isomorph
 * 
 */
  __pyx_t_5 = __pyx_v_self->is_degenerate;
  __pyx_v_ng->is_degenerate = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":398
 * 		ng.ne = self.ne
 * 		ng.is_degenerate = self.is_degenerate
 * 		ng._certified_minimal_isomorph = self._certified_minimal_isomorph             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self._r * self.ne):
 */
  __pyx_t_5 = __pyx_v_self->_certified_minimal_isomorph;
  __pyx_v_ng->_certified_minimal_isomorph = __pyx_t_5;

  /* "flagmatic/hypergraph_flag.pyx":400
 * 		ng._certified_minimal_isomorph = self._certified_minimal_isomorph
 * 
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			ng._edges[i] = self._edges[i]
 * 
 */
  __pyx_t_4 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":401
 * 
 * 		for i in range(self._r * self.ne):
 * 			ng._edges[i] = self._edges[i]             # <<<<<<<<<<<<<<
 * 
 * 		return ng
 */
    (__pyx_v_ng->_edges[__pyx_v_i]) = (__pyx_v_self->_edges[__pyx_v_i]);
  }

  /* "flagmatic/hypergraph_flag.pyx":403
 * 			ng._edges[i] = self._edges[i]
 * 
 * 		return ng             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ng));
  __pyx_r = ((PyObject *)__pyx_v_ng);
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":383
 * 	# TODO: maintain vigilance that we have everything...
 * 
 * 	def __copy__(self):             # <<<<<<<<<<<<<<
 * 		r"""
 * 		Make a (mutable) copy.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ng);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":406
 * 
 * 
 * 	def _latex_(self):             # <<<<<<<<<<<<<<
 * 		return "\\verb|" + self._repr_() + "|"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_17_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_17_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16_latex_(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_16_latex_(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_latex_", 0);

  /* "flagmatic/hypergraph_flag.pyx":407
 * 
 * 	def _latex_(self):
 * 		return "\\verb|" + self._repr_() + "|"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_verb, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__25); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":406
 * 
 * 
 * 	def _latex_(self):             # <<<<<<<<<<<<<<
 * 		return "\\verb|" + self._repr_() + "|"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag._latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":412
 * 	# TODO: check that this is best way to do this. What about is_degenerate, _certified_minimal_isomorph?
 * 
 * 	def __reduce__(self):             # <<<<<<<<<<<<<<
 * 		return (type(self), (self._repr_(), self._r, self._oriented, self._multiplicity))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_19__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_19__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_18__reduce__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_18__reduce__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "flagmatic/hypergraph_flag.pyx":413
 * 
 * 	def __reduce__(self):
 * 		return (type(self), (self._repr_(), self._r, self._oriented, self._multiplicity))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->_oriented); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_multiplicity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":412
 * 	# TODO: check that this is best way to do this. What about is_degenerate, _certified_minimal_isomorph?
 * 
 * 	def __reduce__(self):             # <<<<<<<<<<<<<<
 * 		return (type(self), (self._repr_(), self._r, self._oriented, self._multiplicity))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":418
 * 	# TODO: work out how to make sets of these work
 * 
 * 	def __hash__(self):             # <<<<<<<<<<<<<<
 * 		return hash(self._repr_() + str(self._r) + str(self._oriented) + str(self._multiplicity))
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_21__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_21__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_20__hash__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_20__hash__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "flagmatic/hypergraph_flag.pyx":419
 * 
 * 	def __hash__(self):
 * 		return hash(self._repr_() + str(self._r) + str(self._oriented) + str(self._multiplicity))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_oriented); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_multiplicity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Hash(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":418
 * 	# TODO: work out how to make sets of these work
 * 
 * 	def __hash__(self):             # <<<<<<<<<<<<<<
 * 		return hash(self._repr_() + str(self._r) + str(self._oriented) + str(self._multiplicity))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":425
 * 	# Not sure what happens at the moment with < and >.
 * 
 * 	def __richcmp__(HypergraphFlag self, HypergraphFlag other not None, int op):             # <<<<<<<<<<<<<<
 * 
 * 		if not (op == 2 or op == 3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_23__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_23__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, 1, "self", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, 0, "other", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_22__richcmp__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_22__richcmp__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_g1 = NULL;
  PyObject *__pyx_v_g2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "flagmatic/hypergraph_flag.pyx":427
 * 	def __richcmp__(HypergraphFlag self, HypergraphFlag other not None, int op):
 * 
 * 		if not (op == 2 or op == 3):             # <<<<<<<<<<<<<<
 * 			return NotImplemented
 * 
 */
  switch (__pyx_v_op) {
    case 2:
    case 3:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":428
 * 
 * 		if not (op == 2 or op == 3):
 * 			return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 		g1 = self.__copy__()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":427
 * 	def __richcmp__(HypergraphFlag self, HypergraphFlag other not None, int op):
 * 
 * 		if not (op == 2 or op == 3):             # <<<<<<<<<<<<<<
 * 			return NotImplemented
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":430
 * 			return NotImplemented
 * 
 * 		g1 = self.__copy__()             # <<<<<<<<<<<<<<
 * 		g1.make_minimal_isomorph()
 * 		g2 = other.__copy__()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_g1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":431
 * 
 * 		g1 = self.__copy__()
 * 		g1.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 		g2 = other.__copy__()
 * 		g2.make_minimal_isomorph()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_g1, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":432
 * 		g1 = self.__copy__()
 * 		g1.make_minimal_isomorph()
 * 		g2 = other.__copy__()             # <<<<<<<<<<<<<<
 * 		g2.make_minimal_isomorph()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_g2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":433
 * 		g1.make_minimal_isomorph()
 * 		g2 = other.__copy__()
 * 		g2.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 		if op == 2: # ==
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_g2, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":435
 * 		g2.make_minimal_isomorph()
 * 
 * 		if op == 2: # ==             # <<<<<<<<<<<<<<
 * 			return g1.is_labelled_isomorphic(g2)
 * 		elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":436
 * 
 * 		if op == 2: # ==
 * 			return g1.is_labelled_isomorphic(g2)             # <<<<<<<<<<<<<<
 * 		elif op == 3: # !=
 * 			return not g1.is_labelled_isomorphic(g2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_g1, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_g2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_g2);
      __Pyx_GIVEREF(__pyx_v_g2);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_g2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":435
 * 		g2.make_minimal_isomorph()
 * 
 * 		if op == 2: # ==             # <<<<<<<<<<<<<<
 * 			return g1.is_labelled_isomorphic(g2)
 * 		elif op == 3: # !=
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":437
 * 		if op == 2: # ==
 * 			return g1.is_labelled_isomorphic(g2)
 * 		elif op == 3: # !=             # <<<<<<<<<<<<<<
 * 			return not g1.is_labelled_isomorphic(g2)
 * 
 */
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":438
 * 			return g1.is_labelled_isomorphic(g2)
 * 		elif op == 3: # !=
 * 			return not g1.is_labelled_isomorphic(g2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_g1, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_g2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_g2);
      __Pyx_GIVEREF(__pyx_v_g2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_g2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":437
 * 		if op == 2: # ==
 * 			return g1.is_labelled_isomorphic(g2)
 * 		elif op == 3: # !=             # <<<<<<<<<<<<<<
 * 			return not g1.is_labelled_isomorphic(g2)
 * 
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":425
 * 	# Not sure what happens at the moment with < and >.
 * 
 * 	def __richcmp__(HypergraphFlag self, HypergraphFlag other not None, int op):             # <<<<<<<<<<<<<<
 * 
 * 		if not (op == 2 or op == 3):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_g1);
  __Pyx_XDECREF(__pyx_v_g2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":441
 * 
 * 
 * 	cpdef is_labelled_isomorphic(self, HypergraphFlag other):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_25is_labelled_isomorphic(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_labelled_isomorphic(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("is_labelled_isomorphic", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_25is_labelled_isomorphic)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_other));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_other));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":445
 * 		cdef int i
 * 
 * 		if self._r != other._r:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->_r != __pyx_v_other->_r) != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":446
 * 
 * 		if self._r != other._r:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 		if self._oriented != other._oriented:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":445
 * 		cdef int i
 * 
 * 		if self._r != other._r:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":448
 * 			return False
 * 
 * 		if self._oriented != other._oriented:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->_oriented != __pyx_v_other->_oriented) != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":449
 * 
 * 		if self._oriented != other._oriented:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 		#  Should this be checked?
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":448
 * 			return False
 * 
 * 		if self._oriented != other._oriented:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":455
 * 		#	return False
 * 
 * 		if self._n != other._n:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->_n != __pyx_v_other->_n) != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":456
 * 
 * 		if self._n != other._n:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 		if self._t != other._t:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":455
 * 		#	return False
 * 
 * 		if self._n != other._n:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":458
 * 			return False
 * 
 * 		if self._t != other._t:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->_t != __pyx_v_other->_t) != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":459
 * 
 * 		if self._t != other._t:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 		if self.ne != other.ne:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":458
 * 			return False
 * 
 * 		if self._t != other._t:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":461
 * 			return False
 * 
 * 		if self.ne != other.ne:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->ne != __pyx_v_other->ne) != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":462
 * 
 * 		if self.ne != other.ne:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self._r * self.ne):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":461
 * 			return False
 * 
 * 		if self.ne != other.ne:             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":464
 * 			return False
 * 
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			if self._edges[i] != other._edges[i]:
 * 				return False
 */
  __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":465
 * 
 * 		for i in range(self._r * self.ne):
 * 			if self._edges[i] != other._edges[i]:             # <<<<<<<<<<<<<<
 * 				return False
 * 
 */
    __pyx_t_6 = (((__pyx_v_self->_edges[__pyx_v_i]) != (__pyx_v_other->_edges[__pyx_v_i])) != 0);
    if (__pyx_t_6) {

      /* "flagmatic/hypergraph_flag.pyx":466
 * 		for i in range(self._r * self.ne):
 * 			if self._edges[i] != other._edges[i]:
 * 				return False             # <<<<<<<<<<<<<<
 * 
 * 		return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":465
 * 
 * 		for i in range(self._r * self.ne):
 * 			if self._edges[i] != other._edges[i]:             # <<<<<<<<<<<<<<
 * 				return False
 * 
 */
    }
  }

  /* "flagmatic/hypergraph_flag.pyx":468
 * 				return False
 * 
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":441
 * 
 * 
 * 	cpdef is_labelled_isomorphic(self, HypergraphFlag other):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.is_labelled_isomorphic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_25is_labelled_isomorphic(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_25is_labelled_isomorphic(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_labelled_isomorphic (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, 1, "other", 0))) __PYX_ERR(0, 441, __pyx_L1_error)
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_24is_labelled_isomorphic(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_24is_labelled_isomorphic(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_labelled_isomorphic", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_labelled_isomorphic(__pyx_v_self, __pyx_v_other, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.is_labelled_isomorphic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":472
 * 
 * 	@classmethod
 * 	def default_density_graph(cls, r=3, oriented=False):             # <<<<<<<<<<<<<<
 * 		edge_graph = cls("%d:" % r, r, oriented)
 * 		edge_graph.add_edge(range(1, r + 1))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27default_density_graph(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27default_density_graph(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_oriented = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_density_graph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_oriented,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_3);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_oriented);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "default_density_graph") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r = values[0];
    __pyx_v_oriented = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("default_density_graph", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.default_density_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_26default_density_graph(((PyTypeObject*)__pyx_v_cls), __pyx_v_r, __pyx_v_oriented);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_26default_density_graph(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented) {
  PyObject *__pyx_v_edge_graph = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("default_density_graph", 0);

  /* "flagmatic/hypergraph_flag.pyx":473
 * 	@classmethod
 * 	def default_density_graph(cls, r=3, oriented=False):
 * 		edge_graph = cls("%d:" % r, r, oriented)             # <<<<<<<<<<<<<<
 * 		edge_graph.add_edge(range(1, r + 1))
 * 		return edge_graph
 */
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_v_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_r);
  __Pyx_INCREF(__pyx_v_oriented);
  __Pyx_GIVEREF(__pyx_v_oriented);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_oriented);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_edge_graph = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":474
 * 	def default_density_graph(cls, r=3, oriented=False):
 * 		edge_graph = cls("%d:" % r, r, oriented)
 * 		edge_graph.add_edge(range(1, r + 1))             # <<<<<<<<<<<<<<
 * 		return edge_graph
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge_graph, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_r, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":475
 * 		edge_graph = cls("%d:" % r, r, oriented)
 * 		edge_graph.add_edge(range(1, r + 1))
 * 		return edge_graph             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_edge_graph);
  __pyx_r = __pyx_v_edge_graph;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":472
 * 
 * 	@classmethod
 * 	def default_density_graph(cls, r=3, oriented=False):             # <<<<<<<<<<<<<<
 * 		edge_graph = cls("%d:" % r, r, oriented)
 * 		edge_graph.add_edge(range(1, r + 1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.default_density_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":479
 * 
 * 	@classmethod
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an integer n, and a type tg, returns a list of all tg-flags on n
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_29generate_flags(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_28generate_flags[] = "\n\t\tFor an integer n, and a type tg, returns a list of all tg-flags on n\n\t\tvertices, that satisfy certain constraints.\n\t\t\n\t\tforbidden_edge_numbers should be a list of pairs (n, m): this forbids n-sets\n\t\tfrom spanning exactly m edges.\n\t\t\n\t\tforbidden_graphs should be a list of graphs that are forbidden as subgraphs.\n\t\t\n\t\tforbidden_induced_subgraphs should be a list of graphs that are forbidden as\n\t\t_induced_ subgraphs.\n\t\t\n\t\tEXAMPLES:\n\t\t\n\t\t\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_29generate_flags(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_tg = 0;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_oriented = 0;
  PyObject *__pyx_v_multiplicity = 0;
  PyObject *__pyx_v_forbidden_edge_numbers = 0;
  PyObject *__pyx_v_forbidden_graphs = 0;
  PyObject *__pyx_v_forbidden_induced_graphs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_flags (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_tg,&__pyx_n_s_r,&__pyx_n_s_oriented,&__pyx_n_s_multiplicity,&__pyx_n_s_forbidden_edge_numbers,&__pyx_n_s_forbidden_graphs,&__pyx_n_s_forbidden_induced_graphs,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_int_3);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_flags", 0, 2, 8, 1); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_oriented);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_multiplicity);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_edge_numbers);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_graphs);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_induced_graphs);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_flags") < 0)) __PYX_ERR(0, 479, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
    __pyx_v_tg = values[1];
    __pyx_v_r = values[2];
    __pyx_v_oriented = values[3];
    __pyx_v_multiplicity = values[4];
    __pyx_v_forbidden_edge_numbers = values[5];
    __pyx_v_forbidden_graphs = values[6];
    __pyx_v_forbidden_induced_graphs = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_flags", 0, 2, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 479, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_28generate_flags(((PyTypeObject*)__pyx_v_cls), __pyx_v_n, __pyx_v_tg, __pyx_v_r, __pyx_v_oriented, __pyx_v_multiplicity, __pyx_v_forbidden_edge_numbers, __pyx_v_forbidden_graphs, __pyx_v_forbidden_induced_graphs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "flagmatic/hypergraph_flag.pyx":544
 * 
 * 		if multiplicity > 1:
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])             # <<<<<<<<<<<<<<
 * 
 * 		for sg in smaller_graphs:
 */

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_generate_flags_locals_genexpr); if (unlikely(!gen)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_flags.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 544, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) { __Pyx_RaiseClosureNameError("possible_edges"); __PYX_ERR(0, 544, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 544, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_e);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_e, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_multiplicity)) { __Pyx_RaiseClosureNameError("multiplicity"); __PYX_ERR(0, 544, __pyx_L1_error) }
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_e);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_e);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_e);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_multiplicity); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_temp;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 544, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "flagmatic/hypergraph_flag.pyx":559
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_5generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_generate_flags_locals_genexpr); if (unlikely(!gen)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_flags.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 559, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) { __Pyx_RaiseClosureNameError("possible_edges"); __PYX_ERR(0, 559, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_possible_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 559, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_e);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_e, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_nb)) { __Pyx_RaiseClosureNameError("nb"); __PYX_ERR(0, 559, __pyx_L1_error) }
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_e, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_nb, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __pyx_t_4 = 0;
    __pyx_t_8 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_nb)) { __Pyx_RaiseClosureNameError("nb"); __PYX_ERR(0, 559, __pyx_L1_error) }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_nb, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":479
 * 
 * 	@classmethod
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an integer n, and a type tg, returns a list of all tg-flags on n
 */

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_28generate_flags(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_n, PyObject *__pyx_v_tg, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_forbidden_graphs, PyObject *__pyx_v_forbidden_induced_graphs) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *__pyx_cur_scope;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_ntg = NULL;
  PyObject *__pyx_v_max_ne = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_max_e = NULL;
  PyObject *__pyx_v_new_graphs = NULL;
  PyObject *__pyx_v_hashes = NULL;
  PyObject *__pyx_v_smaller_graphs = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_sg = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_pe = NULL;
  PyObject *__pyx_v_ds = NULL;
  PyObject *__pyx_v_maxd = NULL;
  PyObject *__pyx_v_ne = NULL;
  PyObject *__pyx_v_ng = NULL;
  PyObject *__pyx_v_e = NULL;
  Py_hash_t __pyx_v_ng_hash;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  Py_hash_t __pyx_t_21;
  __Pyx_RefNannySetupContext("generate_flags", 0);
  __pyx_cur_scope = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(__pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_multiplicity = __pyx_v_multiplicity;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_multiplicity);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_multiplicity);

  /* "flagmatic/hypergraph_flag.pyx":497
 * 		"""
 * 
 * 		if not (r == 2 or r == 3):             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_r, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_r, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_1) != 0);
  if (__pyx_t_3) {

    /* "flagmatic/hypergraph_flag.pyx":498
 * 
 * 		if not (r == 2 or r == 3):
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if oriented and r != 2:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 498, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":497
 * 		"""
 * 
 * 		if not (r == 2 or r == 3):             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":500
 * 			raise NotImplementedError
 * 
 * 		if oriented and r != 2:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_oriented); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 500, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_r, __pyx_int_2, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_t_1;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_3) {

    /* "flagmatic/hypergraph_flag.pyx":501
 * 
 * 		if oriented and r != 2:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if tg is None:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 501, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":500
 * 			raise NotImplementedError
 * 
 * 		if oriented and r != 2:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":503
 * 			raise NotImplementedError
 * 
 * 		if tg is None:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_3 = (__pyx_v_tg == Py_None);
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":504
 * 
 * 		if tg is None:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		if r != tg.r or oriented != tg.oriented:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 504, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":503
 * 			raise NotImplementedError
 * 
 * 		if tg is None:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":506
 * 			raise ValueError
 * 
 * 		if r != tg.r or oriented != tg.oriented:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_r, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_oriented); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_oriented, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":507
 * 
 * 		if r != tg.r or oriented != tg.oriented:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		if tg.t != 0:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 507, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":506
 * 			raise ValueError
 * 
 * 		if r != tg.r or oriented != tg.oriented:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":509
 * 			raise ValueError
 * 
 * 		if tg.t != 0:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("type must not contain labelled vertices.")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":510
 * 
 * 		if tg.t != 0:
 * 			raise NotImplementedError("type must not contain labelled vertices.")             # <<<<<<<<<<<<<<
 * 
 * 		s = tg.n
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 510, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":509
 * 			raise ValueError
 * 
 * 		if tg.t != 0:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("type must not contain labelled vertices.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":512
 * 			raise NotImplementedError("type must not contain labelled vertices.")
 * 
 * 		s = tg.n             # <<<<<<<<<<<<<<
 * 
 * 		if n < s:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_s = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":514
 * 		s = tg.n
 * 
 * 		if n < s:             # <<<<<<<<<<<<<<
 * 			return []
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_n, __pyx_v_s, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":515
 * 
 * 		if n < s:
 * 			return []             # <<<<<<<<<<<<<<
 * 
 * 		if n == s:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":514
 * 		s = tg.n
 * 
 * 		if n < s:             # <<<<<<<<<<<<<<
 * 			return []
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":517
 * 			return []
 * 
 * 		if n == s:             # <<<<<<<<<<<<<<
 * 			ntg = tg.__copy__()
 * 			ntg.t = s
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_n, __pyx_v_s, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":518
 * 
 * 		if n == s:
 * 			ntg = tg.__copy__()             # <<<<<<<<<<<<<<
 * 			ntg.t = s
 * 			return [ntg]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_ntg = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":519
 * 		if n == s:
 * 			ntg = tg.__copy__()
 * 			ntg.t = s             # <<<<<<<<<<<<<<
 * 			return [ntg]
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_ntg, __pyx_n_s_t, __pyx_v_s) < 0) __PYX_ERR(0, 519, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":520
 * 			ntg = tg.__copy__()
 * 			ntg.t = s
 * 			return [ntg]             # <<<<<<<<<<<<<<
 * 
 * 		max_ne = binomial(n - 1, r - 1) * multiplicity
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ntg);
    __Pyx_GIVEREF(__pyx_v_ntg);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_ntg);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":517
 * 			return []
 * 
 * 		if n == s:             # <<<<<<<<<<<<<<
 * 			ntg = tg.__copy__()
 * 			ntg.t = s
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":522
 * 			return [ntg]
 * 
 * 		max_ne = binomial(n - 1, r - 1) * multiplicity             # <<<<<<<<<<<<<<
 * 		max_e = binomial(n, r) * multiplicity
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_n, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_v_r, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_7) {
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_cur_scope->__pyx_v_multiplicity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_max_ne = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":523
 * 
 * 		max_ne = binomial(n - 1, r - 1) * multiplicity
 * 		max_e = binomial(n, r) * multiplicity             # <<<<<<<<<<<<<<
 * 
 * 		new_graphs = []
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_9) {
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9); __pyx_t_9 = NULL;
  }
  __Pyx_INCREF(__pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_v_n);
  __Pyx_INCREF(__pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_v_r);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_cur_scope->__pyx_v_multiplicity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_e = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":525
 * 		max_e = binomial(n, r) * multiplicity
 * 
 * 		new_graphs = []             # <<<<<<<<<<<<<<
 * 		hashes = set()
 * 
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_new_graphs = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":526
 * 
 * 		new_graphs = []
 * 		hashes = set()             # <<<<<<<<<<<<<<
 * 
 * 		smaller_graphs = cls.generate_flags(n - 1, tg, r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 */
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_hashes = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":528
 * 		hashes = set()
 * 
 * 		smaller_graphs = cls.generate_flags(n - 1, tg, r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,             # <<<<<<<<<<<<<<
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_generate_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_n, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_tg);
  __Pyx_GIVEREF(__pyx_v_tg);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_tg);
  __Pyx_INCREF(__pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_r);
  __Pyx_INCREF(__pyx_v_oriented);
  __Pyx_GIVEREF(__pyx_v_oriented);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_oriented);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_multiplicity);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_multiplicity);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_cur_scope->__pyx_v_multiplicity);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_forbidden_edge_numbers, __pyx_v_forbidden_edge_numbers) < 0) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":529
 * 
 * 		smaller_graphs = cls.generate_flags(n - 1, tg, r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)             # <<<<<<<<<<<<<<
 * 
 * 		possible_edges = []
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_forbidden_graphs, __pyx_v_forbidden_graphs) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_forbidden_induced_graphs, __pyx_v_forbidden_induced_graphs) < 0) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":528
 * 		hashes = set()
 * 
 * 		smaller_graphs = cls.generate_flags(n - 1, tg, r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,             # <<<<<<<<<<<<<<
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_smaller_graphs = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "flagmatic/hypergraph_flag.pyx":531
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 * 
 * 		possible_edges = []             # <<<<<<<<<<<<<<
 * 
 * 		if r == 3:
 */
  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_cur_scope->__pyx_v_possible_edges = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "flagmatic/hypergraph_flag.pyx":533
 * 		possible_edges = []
 * 
 * 		if r == 3:             # <<<<<<<<<<<<<<
 * 			for c in Combinations(range(1, n), 2):
 * 				possible_edges.append((c[0], c[1], n))
 */
  __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_v_r, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":534
 * 
 * 		if r == 3:
 * 			for c in Combinations(range(1, n), 2):             # <<<<<<<<<<<<<<
 * 				possible_edges.append((c[0], c[1], n))
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_n);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_int_2);
    __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_2 = __pyx_t_9; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 534, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_9); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 534, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_9); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 534, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 534, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "flagmatic/hypergraph_flag.pyx":535
 * 		if r == 3:
 * 			for c in Combinations(range(1, n), 2):
 * 				possible_edges.append((c[0], c[1], n))             # <<<<<<<<<<<<<<
 * 
 * 		elif r == 2:
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_c, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_c, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_n);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_possible_edges, __pyx_t_4); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":534
 * 
 * 		if r == 3:
 * 			for c in Combinations(range(1, n), 2):             # <<<<<<<<<<<<<<
 * 				possible_edges.append((c[0], c[1], n))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":533
 * 		possible_edges = []
 * 
 * 		if r == 3:             # <<<<<<<<<<<<<<
 * 			for c in Combinations(range(1, n), 2):
 * 				possible_edges.append((c[0], c[1], n))
 */
    goto __pyx_L16;
  }

  /* "flagmatic/hypergraph_flag.pyx":537
 * 				possible_edges.append((c[0], c[1], n))
 * 
 * 		elif r == 2:             # <<<<<<<<<<<<<<
 * 			for x in range(1, n):
 * 				possible_edges.append((x, n))
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_r, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":538
 * 
 * 		elif r == 2:
 * 			for x in range(1, n):             # <<<<<<<<<<<<<<
 * 				possible_edges.append((x, n))
 * 				if oriented:
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 538, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 538, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 538, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 538, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":539
 * 		elif r == 2:
 * 			for x in range(1, n):
 * 				possible_edges.append((x, n))             # <<<<<<<<<<<<<<
 * 				if oriented:
 * 					possible_edges.append((n, x))
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_n);
      __pyx_t_11 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_possible_edges, __pyx_t_4); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":540
 * 			for x in range(1, n):
 * 				possible_edges.append((x, n))
 * 				if oriented:             # <<<<<<<<<<<<<<
 * 					possible_edges.append((n, x))
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_oriented); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 540, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":541
 * 				possible_edges.append((x, n))
 * 				if oriented:
 * 					possible_edges.append((n, x))             # <<<<<<<<<<<<<<
 * 
 * 		if multiplicity > 1:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_n);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_x);
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_possible_edges, __pyx_t_4); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":540
 * 			for x in range(1, n):
 * 				possible_edges.append((x, n))
 * 				if oriented:             # <<<<<<<<<<<<<<
 * 					possible_edges.append((n, x))
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":538
 * 
 * 		elif r == 2:
 * 			for x in range(1, n):             # <<<<<<<<<<<<<<
 * 				possible_edges.append((x, n))
 * 				if oriented:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":537
 * 				possible_edges.append((c[0], c[1], n))
 * 
 * 		elif r == 2:             # <<<<<<<<<<<<<<
 * 			for x in range(1, n):
 * 				possible_edges.append((x, n))
 */
  }
  __pyx_L16:;

  /* "flagmatic/hypergraph_flag.pyx":543
 * 					possible_edges.append((n, x))
 * 
 * 		if multiplicity > 1:             # <<<<<<<<<<<<<<
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_multiplicity, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":544
 * 
 * 		if multiplicity > 1:
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])             # <<<<<<<<<<<<<<
 * 
 * 		for sg in smaller_graphs:
 */
    __pyx_t_2 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_possible_edges);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_possible_edges, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":543
 * 					possible_edges.append((n, x))
 * 
 * 		if multiplicity > 1:             # <<<<<<<<<<<<<<
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":546
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])
 * 
 * 		for sg in smaller_graphs:             # <<<<<<<<<<<<<<
 * 
 * 			pe = sg.ne
 */
  if (likely(PyList_CheckExact(__pyx_v_smaller_graphs)) || PyTuple_CheckExact(__pyx_v_smaller_graphs)) {
    __pyx_t_4 = __pyx_v_smaller_graphs; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_smaller_graphs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 546, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_10(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 546, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_sg, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":548
 * 		for sg in smaller_graphs:
 * 
 * 			pe = sg.ne             # <<<<<<<<<<<<<<
 * 			ds = sg.degrees()
 * 			maxd = max(ds[s:] + (0,))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sg, __pyx_n_s_ne); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_pe, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":549
 * 
 * 			pe = sg.ne
 * 			ds = sg.degrees()             # <<<<<<<<<<<<<<
 * 			maxd = max(ds[s:] + (0,))
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sg, __pyx_n_s_degrees); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ds, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":550
 * 			pe = sg.ne
 * 			ds = sg.degrees()
 * 			maxd = max(ds[s:] + (0,))             # <<<<<<<<<<<<<<
 * 
 * 			for ne in range(maxd, max_ne + 1):
 */
    __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_ds, 0, 0, &__pyx_v_s, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_tuple__27); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_maxd, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":552
 * 			maxd = max(ds[s:] + (0,))
 * 
 * 			for ne in range(maxd, max_ne + 1):             # <<<<<<<<<<<<<<
 * 
 * 				for nb in Combinations(possible_edges, ne):
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_max_ne, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_maxd);
    __Pyx_GIVEREF(__pyx_v_maxd);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_maxd);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 552, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 552, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 552, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_13(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 552, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_ne, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "flagmatic/hypergraph_flag.pyx":554
 * 			for ne in range(maxd, max_ne + 1):
 * 
 * 				for nb in Combinations(possible_edges, ne):             # <<<<<<<<<<<<<<
 * 
 * 					# For oriented graphs, can't have bidirected edges.
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_14 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_possible_edges);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_possible_edges);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_14, __pyx_cur_scope->__pyx_v_possible_edges);
      __Pyx_INCREF(__pyx_v_ne);
      __Pyx_GIVEREF(__pyx_v_ne);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_14, __pyx_v_ne);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_9 = __pyx_t_2; __Pyx_INCREF(__pyx_t_9); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 554, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 554, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 554, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_15(__pyx_t_9);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 554, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_nb);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_nb, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;

        /* "flagmatic/hypergraph_flag.pyx":558
 * 					# For oriented graphs, can't have bidirected edges.
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:             # <<<<<<<<<<<<<<
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):
 * 							continue
 */
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_oriented); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 558, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":559
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */
          __pyx_t_2 = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_14generate_flags_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_1) {

            /* "flagmatic/hypergraph_flag.pyx":560
 * 					if oriented:
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):
 * 							continue             # <<<<<<<<<<<<<<
 * 
 * 					ng = sg.__copy__()
 */
            goto __pyx_L27_continue;

            /* "flagmatic/hypergraph_flag.pyx":559
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":558
 * 					# For oriented graphs, can't have bidirected edges.
 * 					# TODO: exclude these in a more efficient way!
 * 					if oriented:             # <<<<<<<<<<<<<<
 * 						if any(e in nb and (e[1], e[0]) in nb for e in possible_edges):
 * 							continue
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":562
 * 							continue
 * 
 * 					ng = sg.__copy__()             # <<<<<<<<<<<<<<
 * 					ng.n = n
 * 					for e in nb:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sg, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_6) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 562, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else {
          __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 562, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ng, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "flagmatic/hypergraph_flag.pyx":563
 * 
 * 					ng = sg.__copy__()
 * 					ng.n = n             # <<<<<<<<<<<<<<
 * 					for e in nb:
 * 						ng.add_edge(e)
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_n, __pyx_v_n) < 0) __PYX_ERR(0, 563, __pyx_L1_error)

        /* "flagmatic/hypergraph_flag.pyx":564
 * 					ng = sg.__copy__()
 * 					ng.n = n
 * 					for e in nb:             # <<<<<<<<<<<<<<
 * 						ng.add_edge(e)
 * 
 */
        if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_nb)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_nb)) {
          __pyx_t_7 = __pyx_cur_scope->__pyx_v_nb; __Pyx_INCREF(__pyx_t_7); __pyx_t_16 = 0;
          __pyx_t_17 = NULL;
        } else {
          __pyx_t_16 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_nb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_17 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 564, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_17)) {
            if (likely(PyList_CheckExact(__pyx_t_7))) {
              if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_2); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 564, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_2); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 564, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_17(__pyx_t_7);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 564, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "flagmatic/hypergraph_flag.pyx":565
 * 					ng.n = n
 * 					for e in nb:
 * 						ng.add_edge(e)             # <<<<<<<<<<<<<<
 * 
 * 					if not forbidden_edge_numbers is None and ng.has_forbidden_edge_numbers(forbidden_edge_numbers, must_have_highest=True):
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_18 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_18)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_18);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          if (!__pyx_t_18) {
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
          } else {
            __pyx_t_19 = PyTuple_New(1+1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_18); __pyx_t_18 = NULL;
            __Pyx_INCREF(__pyx_v_e);
            __Pyx_GIVEREF(__pyx_v_e);
            PyTuple_SET_ITEM(__pyx_t_19, 0+1, __pyx_v_e);
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "flagmatic/hypergraph_flag.pyx":564
 * 					ng = sg.__copy__()
 * 					ng.n = n
 * 					for e in nb:             # <<<<<<<<<<<<<<
 * 						ng.add_edge(e)
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "flagmatic/hypergraph_flag.pyx":567
 * 						ng.add_edge(e)
 * 
 * 					if not forbidden_edge_numbers is None and ng.has_forbidden_edge_numbers(forbidden_edge_numbers, must_have_highest=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        __pyx_t_3 = (__pyx_v_forbidden_edge_numbers != Py_None);
        __pyx_t_20 = (__pyx_t_3 != 0);
        if (__pyx_t_20) {
        } else {
          __pyx_t_1 = __pyx_t_20;
          goto __pyx_L34_bool_binop_done;
        }
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_has_forbidden_edge_numbers); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_forbidden_edge_numbers);
        __Pyx_GIVEREF(__pyx_v_forbidden_edge_numbers);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_forbidden_edge_numbers);
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_must_have_highest, Py_True) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
        __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_19); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_1 = __pyx_t_20;
        __pyx_L34_bool_binop_done:;
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":568
 * 
 * 					if not forbidden_edge_numbers is None and ng.has_forbidden_edge_numbers(forbidden_edge_numbers, must_have_highest=True):
 * 						continue             # <<<<<<<<<<<<<<
 * 
 * 					if not forbidden_graphs is None and ng.has_forbidden_graphs(forbidden_graphs, must_have_highest=True):
 */
          goto __pyx_L27_continue;

          /* "flagmatic/hypergraph_flag.pyx":567
 * 						ng.add_edge(e)
 * 
 * 					if not forbidden_edge_numbers is None and ng.has_forbidden_edge_numbers(forbidden_edge_numbers, must_have_highest=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":570
 * 						continue
 * 
 * 					if not forbidden_graphs is None and ng.has_forbidden_graphs(forbidden_graphs, must_have_highest=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        __pyx_t_20 = (__pyx_v_forbidden_graphs != Py_None);
        __pyx_t_3 = (__pyx_t_20 != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L37_bool_binop_done;
        }
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_has_forbidden_graphs); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_forbidden_graphs);
        __Pyx_GIVEREF(__pyx_v_forbidden_graphs);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_forbidden_graphs);
        __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_must_have_highest, Py_True) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = __pyx_t_3;
        __pyx_L37_bool_binop_done:;
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":571
 * 
 * 					if not forbidden_graphs is None and ng.has_forbidden_graphs(forbidden_graphs, must_have_highest=True):
 * 						continue             # <<<<<<<<<<<<<<
 * 
 * 					if not forbidden_induced_graphs is None and ng.has_forbidden_graphs(forbidden_induced_graphs, must_have_highest=True, induced=True):
 */
          goto __pyx_L27_continue;

          /* "flagmatic/hypergraph_flag.pyx":570
 * 						continue
 * 
 * 					if not forbidden_graphs is None and ng.has_forbidden_graphs(forbidden_graphs, must_have_highest=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":573
 * 						continue
 * 
 * 					if not forbidden_induced_graphs is None and ng.has_forbidden_graphs(forbidden_induced_graphs, must_have_highest=True, induced=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        __pyx_t_3 = (__pyx_v_forbidden_induced_graphs != Py_None);
        __pyx_t_20 = (__pyx_t_3 != 0);
        if (__pyx_t_20) {
        } else {
          __pyx_t_1 = __pyx_t_20;
          goto __pyx_L40_bool_binop_done;
        }
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_has_forbidden_graphs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_forbidden_induced_graphs);
        __Pyx_GIVEREF(__pyx_v_forbidden_induced_graphs);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_forbidden_induced_graphs);
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_must_have_highest, Py_True) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_induced, Py_True) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
        __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_19); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_1 = __pyx_t_20;
        __pyx_L40_bool_binop_done:;
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":574
 * 
 * 					if not forbidden_induced_graphs is None and ng.has_forbidden_graphs(forbidden_induced_graphs, must_have_highest=True, induced=True):
 * 						continue             # <<<<<<<<<<<<<<
 * 
 * 					ng.make_minimal_isomorph()
 */
          goto __pyx_L27_continue;

          /* "flagmatic/hypergraph_flag.pyx":573
 * 						continue
 * 
 * 					if not forbidden_induced_graphs is None and ng.has_forbidden_graphs(forbidden_induced_graphs, must_have_highest=True, induced=True):             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":576
 * 						continue
 * 
 * 					ng.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 					ng_hash = hash(ng)
 * 					if not ng_hash in hashes:
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        if (__pyx_t_2) {
          __pyx_t_19 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 576, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        } else {
          __pyx_t_19 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 576, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "flagmatic/hypergraph_flag.pyx":577
 * 
 * 					ng.make_minimal_isomorph()
 * 					ng_hash = hash(ng)             # <<<<<<<<<<<<<<
 * 					if not ng_hash in hashes:
 * 						new_graphs.append(ng)
 */
        __pyx_t_21 = PyObject_Hash(__pyx_v_ng); if (unlikely(__pyx_t_21 == -1)) __PYX_ERR(0, 577, __pyx_L1_error)
        __pyx_v_ng_hash = __pyx_t_21;

        /* "flagmatic/hypergraph_flag.pyx":578
 * 					ng.make_minimal_isomorph()
 * 					ng_hash = hash(ng)
 * 					if not ng_hash in hashes:             # <<<<<<<<<<<<<<
 * 						new_graphs.append(ng)
 * 						hashes.add(ng_hash)
 */
        __pyx_t_19 = __Pyx_PyInt_FromHash_t(__pyx_v_ng_hash); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_19, __pyx_v_hashes, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_20 = (__pyx_t_1 != 0);
        if (__pyx_t_20) {

          /* "flagmatic/hypergraph_flag.pyx":579
 * 					ng_hash = hash(ng)
 * 					if not ng_hash in hashes:
 * 						new_graphs.append(ng)             # <<<<<<<<<<<<<<
 * 						hashes.add(ng_hash)
 * 
 */
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_new_graphs, __pyx_v_ng); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 579, __pyx_L1_error)

          /* "flagmatic/hypergraph_flag.pyx":580
 * 					if not ng_hash in hashes:
 * 						new_graphs.append(ng)
 * 						hashes.add(ng_hash)             # <<<<<<<<<<<<<<
 * 
 * 		return new_graphs
 */
          __pyx_t_19 = __Pyx_PyInt_FromHash_t(__pyx_v_ng_hash); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 580, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_11 = PySet_Add(__pyx_v_hashes, __pyx_t_19); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 580, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

          /* "flagmatic/hypergraph_flag.pyx":578
 * 					ng.make_minimal_isomorph()
 * 					ng_hash = hash(ng)
 * 					if not ng_hash in hashes:             # <<<<<<<<<<<<<<
 * 						new_graphs.append(ng)
 * 						hashes.add(ng_hash)
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":554
 * 			for ne in range(maxd, max_ne + 1):
 * 
 * 				for nb in Combinations(possible_edges, ne):             # <<<<<<<<<<<<<<
 * 
 * 					# For oriented graphs, can't have bidirected edges.
 */
        __pyx_L27_continue:;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "flagmatic/hypergraph_flag.pyx":552
 * 			maxd = max(ds[s:] + (0,))
 * 
 * 			for ne in range(maxd, max_ne + 1):             # <<<<<<<<<<<<<<
 * 
 * 				for nb in Combinations(possible_edges, ne):
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":546
 * 			possible_edges = sum(([e] * multiplicity for e in possible_edges), [])
 * 
 * 		for sg in smaller_graphs:             # <<<<<<<<<<<<<<
 * 
 * 			pe = sg.ne
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":582
 * 						hashes.add(ng_hash)
 * 
 * 		return new_graphs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_new_graphs);
  __pyx_r = __pyx_v_new_graphs;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":479
 * 
 * 	@classmethod
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an integer n, and a type tg, returns a list of all tg-flags on n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_ntg);
  __Pyx_XDECREF(__pyx_v_max_ne);
  __Pyx_XDECREF(__pyx_v_max_e);
  __Pyx_XDECREF(__pyx_v_new_graphs);
  __Pyx_XDECREF(__pyx_v_hashes);
  __Pyx_XDECREF(__pyx_v_smaller_graphs);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_sg);
  __Pyx_XDECREF(__pyx_v_pe);
  __Pyx_XDECREF(__pyx_v_ds);
  __Pyx_XDECREF(__pyx_v_maxd);
  __Pyx_XDECREF(__pyx_v_ne);
  __Pyx_XDECREF(__pyx_v_ng);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":586
 * 
 * 	@classmethod
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_31generate_graphs(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_31generate_graphs(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_oriented = 0;
  PyObject *__pyx_v_multiplicity = 0;
  PyObject *__pyx_v_forbidden_edge_numbers = 0;
  PyObject *__pyx_v_forbidden_graphs = 0;
  PyObject *__pyx_v_forbidden_induced_graphs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_graphs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_r,&__pyx_n_s_oriented,&__pyx_n_s_multiplicity,&__pyx_n_s_forbidden_edge_numbers,&__pyx_n_s_forbidden_graphs,&__pyx_n_s_forbidden_induced_graphs,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_3);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_int_1);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_oriented);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_multiplicity);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_edge_numbers);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_graphs);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_induced_graphs);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_graphs") < 0)) __PYX_ERR(0, 586, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
    __pyx_v_r = values[1];
    __pyx_v_oriented = values[2];
    __pyx_v_multiplicity = values[3];
    __pyx_v_forbidden_edge_numbers = values[4];
    __pyx_v_forbidden_graphs = values[5];
    __pyx_v_forbidden_induced_graphs = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_graphs", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 586, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_graphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_30generate_graphs(((PyTypeObject*)__pyx_v_cls), __pyx_v_n, __pyx_v_r, __pyx_v_oriented, __pyx_v_multiplicity, __pyx_v_forbidden_edge_numbers, __pyx_v_forbidden_graphs, __pyx_v_forbidden_induced_graphs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_30generate_graphs(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_n, PyObject *__pyx_v_r, PyObject *__pyx_v_oriented, PyObject *__pyx_v_multiplicity, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_forbidden_graphs, PyObject *__pyx_v_forbidden_induced_graphs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("generate_graphs", 0);

  /* "flagmatic/hypergraph_flag.pyx":587
 * 	@classmethod
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,             # <<<<<<<<<<<<<<
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_generate_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_r, __pyx_v_r) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_oriented, __pyx_v_oriented) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_multiplicity, __pyx_v_multiplicity) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_r);
  __Pyx_INCREF(__pyx_v_oriented);
  __Pyx_GIVEREF(__pyx_v_oriented);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_oriented);
  __Pyx_INCREF(__pyx_v_multiplicity);
  __Pyx_GIVEREF(__pyx_v_multiplicity);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_multiplicity);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_forbidden_edge_numbers, __pyx_v_forbidden_edge_numbers) < 0) __PYX_ERR(0, 587, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":588
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_forbidden_graphs, __pyx_v_forbidden_graphs) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_forbidden_induced_graphs, __pyx_v_forbidden_induced_graphs) < 0) __PYX_ERR(0, 587, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":587
 * 	@classmethod
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,             # <<<<<<<<<<<<<<
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":586
 * 
 * 	@classmethod
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.generate_graphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":592
 * 
 * 	@classmethod
 * 	def flag_orbits(cls, tg, flags):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a list of tuples.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_33flag_orbits(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_32flag_orbits[] = "\n\t\tflags should be a list of flags of the type tg. Returns a list of tuples.\n\t\tEach tuple contains the indices of the flags that are in the same orbit\n\t\tunder the action of relabelling the vertices of tg.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_33flag_orbits(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tg = 0;
  PyObject *__pyx_v_flags = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flag_orbits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tg,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flag_orbits", 1, 2, 2, 1); __PYX_ERR(0, 592, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flag_orbits") < 0)) __PYX_ERR(0, 592, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_tg = values[0];
    __pyx_v_flags = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flag_orbits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 592, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_orbits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_32flag_orbits(((PyTypeObject*)__pyx_v_cls), __pyx_v_tg, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_32flag_orbits(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_min_flags = NULL;
  PyObject *__pyx_v_fg = NULL;
  PyObject *__pyx_v_mfgs = NULL;
  PyObject *__pyx_v_perm = NULL;
  PyObject *__pyx_v_permplus = NULL;
  PyObject *__pyx_v_ntg = NULL;
  PyObject *__pyx_v_nfg = NULL;
  PyObject *__pyx_v_nfgs = NULL;
  PyObject *__pyx_v_orbs = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("flag_orbits", 0);

  /* "flagmatic/hypergraph_flag.pyx":598
 * 		under the action of relabelling the vertices of tg.
 * 		"""
 * 		s = tg.n             # <<<<<<<<<<<<<<
 * 		min_flags = []
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":599
 * 		"""
 * 		s = tg.n
 * 		min_flags = []             # <<<<<<<<<<<<<<
 * 
 * 		for fg in flags:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_min_flags = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":601
 * 		min_flags = []
 * 
 * 		for fg in flags:             # <<<<<<<<<<<<<<
 * 			mfgs = str(fg)
 * 			for perm in Permutations(range(1, s + 1)):
 */
  if (likely(PyList_CheckExact(__pyx_v_flags)) || PyTuple_CheckExact(__pyx_v_flags)) {
    __pyx_t_1 = __pyx_v_flags; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 601, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 601, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 601, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_fg, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":602
 * 
 * 		for fg in flags:
 * 			mfgs = str(fg)             # <<<<<<<<<<<<<<
 * 			for perm in Permutations(range(1, s + 1)):
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_fg);
    __Pyx_GIVEREF(__pyx_v_fg);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fg);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_mfgs, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":603
 * 		for fg in flags:
 * 			mfgs = str(fg)
 * 			for perm in Permutations(range(1, s + 1)):             # <<<<<<<<<<<<<<
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)
 * 				ntg = tg.__copy__()
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Permutations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_s, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 603, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 603, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 603, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_10(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 603, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_perm, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":604
 * 			mfgs = str(fg)
 * 			for perm in Permutations(range(1, s + 1)):
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)             # <<<<<<<<<<<<<<
 * 				ntg = tg.__copy__()
 * 				ntg.relabel(perm)
 */
      __pyx_t_5 = PySequence_List(__pyx_v_perm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_s, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_fg, __pyx_n_s_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_permplus, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":605
 * 			for perm in Permutations(range(1, s + 1)):
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)
 * 				ntg = tg.__copy__()             # <<<<<<<<<<<<<<
 * 				ntg.relabel(perm)
 * 				nfg = fg.__copy__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ntg, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":606
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)
 * 				ntg = tg.__copy__()
 * 				ntg.relabel(perm)             # <<<<<<<<<<<<<<
 * 				nfg = fg.__copy__()
 * 				nfg.relabel(permplus)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ntg, __pyx_n_s_relabel); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_perm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_perm);
        __Pyx_GIVEREF(__pyx_v_perm);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_perm);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":607
 * 				ntg = tg.__copy__()
 * 				ntg.relabel(perm)
 * 				nfg = fg.__copy__()             # <<<<<<<<<<<<<<
 * 				nfg.relabel(permplus)
 * 				nfg.make_minimal_isomorph()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fg, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nfg, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":608
 * 				ntg.relabel(perm)
 * 				nfg = fg.__copy__()
 * 				nfg.relabel(permplus)             # <<<<<<<<<<<<<<
 * 				nfg.make_minimal_isomorph()
 * 				nfgs = str(nfg)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_nfg, __pyx_n_s_relabel); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_permplus); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_permplus);
        __Pyx_GIVEREF(__pyx_v_permplus);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_permplus);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":609
 * 				nfg = fg.__copy__()
 * 				nfg.relabel(permplus)
 * 				nfg.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 				nfgs = str(nfg)
 * 				if nfgs < mfgs:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_nfg, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":610
 * 				nfg.relabel(permplus)
 * 				nfg.make_minimal_isomorph()
 * 				nfgs = str(nfg)             # <<<<<<<<<<<<<<
 * 				if nfgs < mfgs:
 * 					mfgs = nfgs
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_nfg);
      __Pyx_GIVEREF(__pyx_v_nfg);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_nfg);
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nfgs, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "flagmatic/hypergraph_flag.pyx":611
 * 				nfg.make_minimal_isomorph()
 * 				nfgs = str(nfg)
 * 				if nfgs < mfgs:             # <<<<<<<<<<<<<<
 * 					mfgs = nfgs
 * 			min_flags.append(mfgs)
 */
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_nfgs, __pyx_v_mfgs, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 611, __pyx_L1_error)
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_11) {

        /* "flagmatic/hypergraph_flag.pyx":612
 * 				nfgs = str(nfg)
 * 				if nfgs < mfgs:
 * 					mfgs = nfgs             # <<<<<<<<<<<<<<
 * 			min_flags.append(mfgs)
 * 
 */
        __Pyx_INCREF(__pyx_v_nfgs);
        __Pyx_DECREF_SET(__pyx_v_mfgs, __pyx_v_nfgs);

        /* "flagmatic/hypergraph_flag.pyx":611
 * 				nfg.make_minimal_isomorph()
 * 				nfgs = str(nfg)
 * 				if nfgs < mfgs:             # <<<<<<<<<<<<<<
 * 					mfgs = nfgs
 * 			min_flags.append(mfgs)
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":603
 * 		for fg in flags:
 * 			mfgs = str(fg)
 * 			for perm in Permutations(range(1, s + 1)):             # <<<<<<<<<<<<<<
 * 				permplus = list(perm) + range(s + 1, fg.n + 1)
 * 				ntg = tg.__copy__()
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":613
 * 				if nfgs < mfgs:
 * 					mfgs = nfgs
 * 			min_flags.append(mfgs)             # <<<<<<<<<<<<<<
 * 
 * 		orbs = []
 */
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_min_flags, __pyx_v_mfgs); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 613, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":601
 * 		min_flags = []
 * 
 * 		for fg in flags:             # <<<<<<<<<<<<<<
 * 			mfgs = str(fg)
 * 			for perm in Permutations(range(1, s + 1)):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":615
 * 			min_flags.append(mfgs)
 * 
 * 		orbs = []             # <<<<<<<<<<<<<<
 * 		for mfgs in set(min_flags):
 * 			orbs.append(tuple([i for i in range(len(min_flags)) if min_flags[i] == mfgs]))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_orbs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":616
 * 
 * 		orbs = []
 * 		for mfgs in set(min_flags):             # <<<<<<<<<<<<<<
 * 			orbs.append(tuple([i for i in range(len(min_flags)) if min_flags[i] == mfgs]))
 * 
 */
  __pyx_t_1 = PySet_New(__pyx_v_min_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    {
      __pyx_t_1 = __pyx_t_3(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 616, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_mfgs, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":617
 * 		orbs = []
 * 		for mfgs in set(min_flags):
 * 			orbs.append(tuple([i for i in range(len(min_flags)) if min_flags[i] == mfgs]))             # <<<<<<<<<<<<<<
 * 
 * 		return sorted(orbs)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_GET_SIZE(__pyx_v_min_flags); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 617, __pyx_L1_error)
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_2; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_min_flags, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_v_mfgs, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_11) {
        __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_orbs, __pyx_t_6); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "flagmatic/hypergraph_flag.pyx":616
 * 
 * 		orbs = []
 * 		for mfgs in set(min_flags):             # <<<<<<<<<<<<<<
 * 			orbs.append(tuple([i for i in range(len(min_flags)) if min_flags[i] == mfgs]))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":619
 * 			orbs.append(tuple([i for i in range(len(min_flags)) if min_flags[i] == mfgs]))
 * 
 * 		return sorted(orbs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PySequence_List(__pyx_v_orbs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_12 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":592
 * 
 * 	@classmethod
 * 	def flag_orbits(cls, tg, flags):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a list of tuples.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_orbits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_min_flags);
  __Pyx_XDECREF(__pyx_v_fg);
  __Pyx_XDECREF(__pyx_v_mfgs);
  __Pyx_XDECREF(__pyx_v_perm);
  __Pyx_XDECREF(__pyx_v_permplus);
  __Pyx_XDECREF(__pyx_v_ntg);
  __Pyx_XDECREF(__pyx_v_nfg);
  __Pyx_XDECREF(__pyx_v_nfgs);
  __Pyx_XDECREF(__pyx_v_orbs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":623
 * 
 * 	@classmethod
 * 	def flag_basis(cls, tg, flags, orthogonalize=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a basis for the flags
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_35flag_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_34flag_basis[] = "\n\t\tflags should be a list of flags of the type tg. Returns a basis for the flags\n\t\tthat is a block matrix of two blocks. Uses flag orbits to create invariant-\n\t\tanti-invariant decomposition. If orthogonalize=True, perform Gram-Schmidt\n\t\torthogonalization.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_35flag_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tg = 0;
  PyObject *__pyx_v_flags = 0;
  PyObject *__pyx_v_orthogonalize = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flag_basis (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tg,&__pyx_n_s_flags,&__pyx_n_s_orthogonalize,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flag_basis", 0, 2, 3, 1); __PYX_ERR(0, 623, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orthogonalize);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flag_basis") < 0)) __PYX_ERR(0, 623, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tg = values[0];
    __pyx_v_flags = values[1];
    __pyx_v_orthogonalize = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flag_basis", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 623, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_34flag_basis(((PyTypeObject*)__pyx_v_cls), __pyx_v_tg, __pyx_v_flags, __pyx_v_orthogonalize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_34flag_basis(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags, PyObject *__pyx_v_orthogonalize) {
  PyObject *__pyx_v_orbs = NULL;
  PyObject *__pyx_v_Inv = NULL;
  PyObject *__pyx_v_row = NULL;
  PyObject *__pyx_v_orb = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_AntiInv = NULL;
  PyObject *__pyx_v_AntiInvRows = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_mu = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  __Pyx_RefNannySetupContext("flag_basis", 0);

  /* "flagmatic/hypergraph_flag.pyx":631
 * 		"""
 * 
 * 		orbs = cls.flag_orbits(tg, flags)             # <<<<<<<<<<<<<<
 * 
 * 		Inv = matrix(QQ, len(orbs), len(flags), sparse=True)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_flag_orbits); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_tg);
  __Pyx_GIVEREF(__pyx_v_tg);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_tg);
  __Pyx_INCREF(__pyx_v_flags);
  __Pyx_GIVEREF(__pyx_v_flags);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_flags);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_orbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":633
 * 		orbs = cls.flag_orbits(tg, flags)
 * 
 * 		Inv = matrix(QQ, len(orbs), len(flags), sparse=True)             # <<<<<<<<<<<<<<
 * 		row = 0
 * 		for orb in orbs:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_QQ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Length(__pyx_v_orbs); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sparse, Py_True) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Inv = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "flagmatic/hypergraph_flag.pyx":634
 * 
 * 		Inv = matrix(QQ, len(orbs), len(flags), sparse=True)
 * 		row = 0             # <<<<<<<<<<<<<<
 * 		for orb in orbs:
 * 			for j in orb:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_row = __pyx_int_0;

  /* "flagmatic/hypergraph_flag.pyx":635
 * 		Inv = matrix(QQ, len(orbs), len(flags), sparse=True)
 * 		row = 0
 * 		for orb in orbs:             # <<<<<<<<<<<<<<
 * 			for j in orb:
 * 				Inv[row, j] = 1
 */
  if (likely(PyList_CheckExact(__pyx_v_orbs)) || PyTuple_CheckExact(__pyx_v_orbs)) {
    __pyx_t_5 = __pyx_v_orbs; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_orbs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 635, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 635, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 635, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 635, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 635, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_orb, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":636
 * 		row = 0
 * 		for orb in orbs:
 * 			for j in orb:             # <<<<<<<<<<<<<<
 * 				Inv[row, j] = 1
 * 			row += 1
 */
    if (likely(PyList_CheckExact(__pyx_v_orb)) || PyTuple_CheckExact(__pyx_v_orb)) {
      __pyx_t_3 = __pyx_v_orb; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_orb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 636, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 636, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 636, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 636, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 636, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_9(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 636, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":637
 * 		for orb in orbs:
 * 			for j in orb:
 * 				Inv[row, j] = 1             # <<<<<<<<<<<<<<
 * 			row += 1
 * 
 */
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_row);
      __Pyx_GIVEREF(__pyx_v_row);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_row);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_j);
      if (unlikely(PyObject_SetItem(__pyx_v_Inv, __pyx_t_6, __pyx_int_1) < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flagmatic/hypergraph_flag.pyx":636
 * 		row = 0
 * 		for orb in orbs:
 * 			for j in orb:             # <<<<<<<<<<<<<<
 * 				Inv[row, j] = 1
 * 			row += 1
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":638
 * 			for j in orb:
 * 				Inv[row, j] = 1
 * 			row += 1             # <<<<<<<<<<<<<<
 * 
 * 		# There might be no anti-invariant part.
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_row, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":635
 * 		Inv = matrix(QQ, len(orbs), len(flags), sparse=True)
 * 		row = 0
 * 		for orb in orbs:             # <<<<<<<<<<<<<<
 * 			for j in orb:
 * 				Inv[row, j] = 1
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "flagmatic/hypergraph_flag.pyx":641
 * 
 * 		# There might be no anti-invariant part.
 * 		if len(orbs) == len(flags):             # <<<<<<<<<<<<<<
 * 			return Inv
 * 
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_orbs); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_8 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_10 = ((__pyx_t_4 == __pyx_t_8) != 0);
  if (__pyx_t_10) {

    /* "flagmatic/hypergraph_flag.pyx":642
 * 		# There might be no anti-invariant part.
 * 		if len(orbs) == len(flags):
 * 			return Inv             # <<<<<<<<<<<<<<
 * 
 * 		AntiInv = matrix(QQ, len(flags) - len(orbs), len(flags), sparse=True)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_Inv);
    __pyx_r = __pyx_v_Inv;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":641
 * 
 * 		# There might be no anti-invariant part.
 * 		if len(orbs) == len(flags):             # <<<<<<<<<<<<<<
 * 			return Inv
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":644
 * 			return Inv
 * 
 * 		AntiInv = matrix(QQ, len(flags) - len(orbs), len(flags), sparse=True)             # <<<<<<<<<<<<<<
 * 		row = 0
 * 		for orb in orbs:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_QQ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_4 = PyObject_Length(__pyx_v_orbs); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_8 - __pyx_t_4)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sparse, Py_True) < 0) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_AntiInv = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "flagmatic/hypergraph_flag.pyx":645
 * 
 * 		AntiInv = matrix(QQ, len(flags) - len(orbs), len(flags), sparse=True)
 * 		row = 0             # <<<<<<<<<<<<<<
 * 		for orb in orbs:
 * 			for j in orb[1:]:
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_int_0);

  /* "flagmatic/hypergraph_flag.pyx":646
 * 		AntiInv = matrix(QQ, len(flags) - len(orbs), len(flags), sparse=True)
 * 		row = 0
 * 		for orb in orbs:             # <<<<<<<<<<<<<<
 * 			for j in orb[1:]:
 * 				AntiInv[row, orb[0]] = 1
 */
  if (likely(PyList_CheckExact(__pyx_v_orbs)) || PyTuple_CheckExact(__pyx_v_orbs)) {
    __pyx_t_6 = __pyx_v_orbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_orbs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 646, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_orb, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":647
 * 		row = 0
 * 		for orb in orbs:
 * 			for j in orb[1:]:             # <<<<<<<<<<<<<<
 * 				AntiInv[row, orb[0]] = 1
 * 				AntiInv[row, j] = -1
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_orb, 1, 0, NULL, NULL, &__pyx_slice__28, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 647, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 647, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "flagmatic/hypergraph_flag.pyx":648
 * 		for orb in orbs:
 * 			for j in orb[1:]:
 * 				AntiInv[row, orb[0]] = 1             # <<<<<<<<<<<<<<
 * 				AntiInv[row, j] = -1
 * 				row += 1
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_orb, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_row);
      __Pyx_GIVEREF(__pyx_v_row);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_row);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_AntiInv, __pyx_t_5, __pyx_int_1) < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":649
 * 			for j in orb[1:]:
 * 				AntiInv[row, orb[0]] = 1
 * 				AntiInv[row, j] = -1             # <<<<<<<<<<<<<<
 * 				row += 1
 * 
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_row);
      __Pyx_GIVEREF(__pyx_v_row);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_row);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_j);
      if (unlikely(PyObject_SetItem(__pyx_v_AntiInv, __pyx_t_5, __pyx_int_neg_1) < 0)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":650
 * 				AntiInv[row, orb[0]] = 1
 * 				AntiInv[row, j] = -1
 * 				row += 1             # <<<<<<<<<<<<<<
 * 
 * 		#sys.stdout.write("Invariant-anti-invariant split: %d + %d = %d\n" % (Inv.nrows(), AntiInv.nrows(),
 */
      __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_row, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":647
 * 		row = 0
 * 		for orb in orbs:
 * 			for j in orb[1:]:             # <<<<<<<<<<<<<<
 * 				AntiInv[row, orb[0]] = 1
 * 				AntiInv[row, j] = -1
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":646
 * 		AntiInv = matrix(QQ, len(flags) - len(orbs), len(flags), sparse=True)
 * 		row = 0
 * 		for orb in orbs:             # <<<<<<<<<<<<<<
 * 			for j in orb[1:]:
 * 				AntiInv[row, orb[0]] = 1
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "flagmatic/hypergraph_flag.pyx":655
 * 		#	len(flags)))
 * 
 * 		if orthogonalize:             # <<<<<<<<<<<<<<
 * 
 * 			# Note: the following does not preserve sparsity
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_orthogonalize); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 655, __pyx_L1_error)
  if (__pyx_t_10) {

    /* "flagmatic/hypergraph_flag.pyx":660
 * 			#AntiInv, mu = AntiInv.gram_schmidt()
 * 
 * 			AntiInvRows, mu = gram_schmidt(AntiInv.rows())             # <<<<<<<<<<<<<<
 * 			AntiInv = matrix(QQ, AntiInvRows, sparse=True)
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gram_schmidt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_AntiInv, __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 660, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_11(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_5), 2) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 660, __pyx_L1_error)
      __pyx_L14_unpacking_done:;
    }
    __pyx_v_AntiInvRows = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_mu = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":661
 * 
 * 			AntiInvRows, mu = gram_schmidt(AntiInv.rows())
 * 			AntiInv = matrix(QQ, AntiInvRows, sparse=True)             # <<<<<<<<<<<<<<
 * 
 * 		return block_matrix([[Inv],[AntiInv]])
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_QQ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_AntiInvRows);
    __Pyx_GIVEREF(__pyx_v_AntiInvRows);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_AntiInvRows);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sparse, Py_True) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_AntiInv, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":655
 * 		#	len(flags)))
 * 
 * 		if orthogonalize:             # <<<<<<<<<<<<<<
 * 
 * 			# Note: the following does not preserve sparsity
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":663
 * 			AntiInv = matrix(QQ, AntiInvRows, sparse=True)
 * 
 * 		return block_matrix([[Inv],[AntiInv]])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_block_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_Inv);
  __Pyx_GIVEREF(__pyx_v_Inv);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_Inv);
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_AntiInv);
  __Pyx_GIVEREF(__pyx_v_AntiInv);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_AntiInv);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":623
 * 
 * 	@classmethod
 * 	def flag_basis(cls, tg, flags, orthogonalize=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a basis for the flags
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orbs);
  __Pyx_XDECREF(__pyx_v_Inv);
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XDECREF(__pyx_v_orb);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_AntiInv);
  __Pyx_XDECREF(__pyx_v_AntiInvRows);
  __Pyx_XDECREF(__pyx_v_mu);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":666
 * 
 * 
 * 	def homomorphic_images(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an unlabelled flag G of order at least 1, returns a list of flags of smaller
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_37homomorphic_images(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_36homomorphic_images[] = "\n\t\tFor an unlabelled flag G of order at least 1, returns a list of flags of smaller\n\t\t(non-zero) order that are homomorphic images of G.\n\t\t\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_37homomorphic_images(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homomorphic_images (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_36homomorphic_images(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_36homomorphic_images(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_v_mg = NULL;
  PyObject *__pyx_v_graph_hashes = NULL;
  PyObject *__pyx_v_graphs = NULL;
  PyObject *__pyx_v_bad_pairs = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_ig = NULL;
  Py_hash_t __pyx_v_ghash;
  PyObject *__pyx_v_s_graphs = NULL;
  PyObject *__pyx_v_sg = NULL;
  Py_hash_t __pyx_v_sghash;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  Py_hash_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  __Pyx_RefNannySetupContext("homomorphic_images", 0);

  /* "flagmatic/hypergraph_flag.pyx":673
 * 		"""
 * 
 * 		if self.t != 0 or self.n == 0:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":674
 * 
 * 		if self.t != 0 or self.n == 0:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		mg = self.__copy__()
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 674, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":673
 * 		"""
 * 
 * 		if self.t != 0 or self.n == 0:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":676
 * 			raise ValueError
 * 
 * 		mg = self.__copy__()             # <<<<<<<<<<<<<<
 * 		if mg.n == 1:
 * 			return []
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_mg = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":677
 * 
 * 		mg = self.__copy__()
 * 		if mg.n == 1:             # <<<<<<<<<<<<<<
 * 			return []
 * 		mg.make_minimal_isomorph()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":678
 * 		mg = self.__copy__()
 * 		if mg.n == 1:
 * 			return []             # <<<<<<<<<<<<<<
 * 		mg.make_minimal_isomorph()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":677
 * 
 * 		mg = self.__copy__()
 * 		if mg.n == 1:             # <<<<<<<<<<<<<<
 * 			return []
 * 		mg.make_minimal_isomorph()
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":679
 * 		if mg.n == 1:
 * 			return []
 * 		mg.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 		graph_hashes = set()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":681
 * 		mg.make_minimal_isomorph()
 * 
 * 		graph_hashes = set()             # <<<<<<<<<<<<<<
 * 		graphs = []
 * 
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_graph_hashes = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":682
 * 
 * 		graph_hashes = set()
 * 		graphs = []             # <<<<<<<<<<<<<<
 * 
 * 		bad_pairs = set()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_graphs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":684
 * 		graphs = []
 * 
 * 		bad_pairs = set()             # <<<<<<<<<<<<<<
 * 
 * 		for e in mg.edges:
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_bad_pairs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":686
 * 		bad_pairs = set()
 * 
 * 		for e in mg.edges:             # <<<<<<<<<<<<<<
 * 			bad_pairs.add((e[0], e[1]))
 * 			bad_pairs.add((e[0], e[2]))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 686, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":687
 * 
 * 		for e in mg.edges:
 * 			bad_pairs.add((e[0], e[1]))             # <<<<<<<<<<<<<<
 * 			bad_pairs.add((e[0], e[2]))
 * 			bad_pairs.add((e[1], e[2]))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_9 = PySet_Add(__pyx_v_bad_pairs, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "flagmatic/hypergraph_flag.pyx":688
 * 		for e in mg.edges:
 * 			bad_pairs.add((e[0], e[1]))
 * 			bad_pairs.add((e[0], e[2]))             # <<<<<<<<<<<<<<
 * 			bad_pairs.add((e[1], e[2]))
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_e, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_5 = 0;
    __pyx_t_9 = PySet_Add(__pyx_v_bad_pairs, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":689
 * 			bad_pairs.add((e[0], e[1]))
 * 			bad_pairs.add((e[0], e[2]))
 * 			bad_pairs.add((e[1], e[2]))             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(1, mg.n + 1):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_e, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_9 = PySet_Add(__pyx_v_bad_pairs, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "flagmatic/hypergraph_flag.pyx":686
 * 		bad_pairs = set()
 * 
 * 		for e in mg.edges:             # <<<<<<<<<<<<<<
 * 			bad_pairs.add((e[0], e[1]))
 * 			bad_pairs.add((e[0], e[2]))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":691
 * 			bad_pairs.add((e[1], e[2]))
 * 
 * 		for i in range(1, mg.n + 1):             # <<<<<<<<<<<<<<
 * 			for j in range(i + 1, mg.n + 1):
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_2 = __pyx_t_8; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 691, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 691, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 691, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 691, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "flagmatic/hypergraph_flag.pyx":692
 * 
 * 		for i in range(1, mg.n + 1):
 * 			for j in range(i + 1, mg.n + 1):             # <<<<<<<<<<<<<<
 * 
 * 				if (i, j) in bad_pairs:
 */
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 692, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 692, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 692, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 692, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":694
 * 			for j in range(i + 1, mg.n + 1):
 * 
 * 				if (i, j) in bad_pairs:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_j);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_bad_pairs, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = (__pyx_t_1 != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":695
 * 
 * 				if (i, j) in bad_pairs:
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				ig = mg.__copy__()
 */
        goto __pyx_L11_continue;

        /* "flagmatic/hypergraph_flag.pyx":694
 * 			for j in range(i + 1, mg.n + 1):
 * 
 * 				if (i, j) in bad_pairs:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":697
 * 					continue
 * 
 * 				ig = mg.__copy__()             # <<<<<<<<<<<<<<
 * 				ig.identify_vertices(i, j)
 * 				ig.make_minimal_isomorph()
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_copy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_12 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_12) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ig, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":698
 * 
 * 				ig = mg.__copy__()
 * 				ig.identify_vertices(i, j)             # <<<<<<<<<<<<<<
 * 				ig.make_minimal_isomorph()
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_identify_vertices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_13 = 1;
        }
      }
      __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_v_j);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":699
 * 				ig = mg.__copy__()
 * 				ig.identify_vertices(i, j)
 * 				ig.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 				ghash = hash(ig)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_14) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":701
 * 				ig.make_minimal_isomorph()
 * 
 * 				ghash = hash(ig)             # <<<<<<<<<<<<<<
 * 				if not ghash in graph_hashes:
 * 					graph_hashes.add(ghash)
 */
      __pyx_t_15 = PyObject_Hash(__pyx_v_ig); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 701, __pyx_L1_error)
      __pyx_v_ghash = __pyx_t_15;

      /* "flagmatic/hypergraph_flag.pyx":702
 * 
 * 				ghash = hash(ig)
 * 				if not ghash in graph_hashes:             # <<<<<<<<<<<<<<
 * 					graph_hashes.add(ghash)
 * 					graphs.append(ig)
 */
      __pyx_t_3 = __Pyx_PyInt_FromHash_t(__pyx_v_ghash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_graph_hashes, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = (__pyx_t_4 != 0);
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":703
 * 				ghash = hash(ig)
 * 				if not ghash in graph_hashes:
 * 					graph_hashes.add(ghash)             # <<<<<<<<<<<<<<
 * 					graphs.append(ig)
 * 					s_graphs = ig.homomorphic_images()
 */
        __pyx_t_3 = __Pyx_PyInt_FromHash_t(__pyx_v_ghash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PySet_Add(__pyx_v_graph_hashes, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 703, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":704
 * 				if not ghash in graph_hashes:
 * 					graph_hashes.add(ghash)
 * 					graphs.append(ig)             # <<<<<<<<<<<<<<
 * 					s_graphs = ig.homomorphic_images()
 * 					for sg in s_graphs:
 */
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_graphs, __pyx_v_ig); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 704, __pyx_L1_error)

        /* "flagmatic/hypergraph_flag.pyx":705
 * 					graph_hashes.add(ghash)
 * 					graphs.append(ig)
 * 					s_graphs = ig.homomorphic_images()             # <<<<<<<<<<<<<<
 * 					for sg in s_graphs:
 * 						sghash = hash(sg)
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_homomorphic_images); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 705, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_14) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_s_graphs, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":706
 * 					graphs.append(ig)
 * 					s_graphs = ig.homomorphic_images()
 * 					for sg in s_graphs:             # <<<<<<<<<<<<<<
 * 						sghash = hash(sg)
 * 						if not sghash in graph_hashes:
 */
        if (likely(PyList_CheckExact(__pyx_v_s_graphs)) || PyTuple_CheckExact(__pyx_v_s_graphs)) {
          __pyx_t_3 = __pyx_v_s_graphs; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_s_graphs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 706, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 706, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 706, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 706, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 706, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_16(__pyx_t_3);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 706, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF_SET(__pyx_v_sg, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "flagmatic/hypergraph_flag.pyx":707
 * 					s_graphs = ig.homomorphic_images()
 * 					for sg in s_graphs:
 * 						sghash = hash(sg)             # <<<<<<<<<<<<<<
 * 						if not sghash in graph_hashes:
 * 							graph_hashes.add(sghash)
 */
          __pyx_t_15 = PyObject_Hash(__pyx_v_sg); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
          __pyx_v_sghash = __pyx_t_15;

          /* "flagmatic/hypergraph_flag.pyx":708
 * 					for sg in s_graphs:
 * 						sghash = hash(sg)
 * 						if not sghash in graph_hashes:             # <<<<<<<<<<<<<<
 * 							graph_hashes.add(sghash)
 * 							graphs.append(sg)
 */
          __pyx_t_8 = __Pyx_PyInt_FromHash_t(__pyx_v_sghash); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_8, __pyx_v_graph_hashes, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_4 = (__pyx_t_1 != 0);
          if (__pyx_t_4) {

            /* "flagmatic/hypergraph_flag.pyx":709
 * 						sghash = hash(sg)
 * 						if not sghash in graph_hashes:
 * 							graph_hashes.add(sghash)             # <<<<<<<<<<<<<<
 * 							graphs.append(sg)
 * 
 */
            __pyx_t_8 = __Pyx_PyInt_FromHash_t(__pyx_v_sghash); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 709, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_9 = PySet_Add(__pyx_v_graph_hashes, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 709, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "flagmatic/hypergraph_flag.pyx":710
 * 						if not sghash in graph_hashes:
 * 							graph_hashes.add(sghash)
 * 							graphs.append(sg)             # <<<<<<<<<<<<<<
 * 
 * 		return graphs
 */
            __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_graphs, __pyx_v_sg); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 710, __pyx_L1_error)

            /* "flagmatic/hypergraph_flag.pyx":708
 * 					for sg in s_graphs:
 * 						sghash = hash(sg)
 * 						if not sghash in graph_hashes:             # <<<<<<<<<<<<<<
 * 							graph_hashes.add(sghash)
 * 							graphs.append(sg)
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":706
 * 					graphs.append(ig)
 * 					s_graphs = ig.homomorphic_images()
 * 					for sg in s_graphs:             # <<<<<<<<<<<<<<
 * 						sghash = hash(sg)
 * 						if not sghash in graph_hashes:
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":702
 * 
 * 				ghash = hash(ig)
 * 				if not ghash in graph_hashes:             # <<<<<<<<<<<<<<
 * 					graph_hashes.add(ghash)
 * 					graphs.append(ig)
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":692
 * 
 * 		for i in range(1, mg.n + 1):
 * 			for j in range(i + 1, mg.n + 1):             # <<<<<<<<<<<<<<
 * 
 * 				if (i, j) in bad_pairs:
 */
      __pyx_L11_continue:;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":691
 * 			bad_pairs.add((e[1], e[2]))
 * 
 * 		for i in range(1, mg.n + 1):             # <<<<<<<<<<<<<<
 * 			for j in range(i + 1, mg.n + 1):
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":712
 * 							graphs.append(sg)
 * 
 * 		return graphs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_graphs);
  __pyx_r = __pyx_v_graphs;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":666
 * 
 * 
 * 	def homomorphic_images(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an unlabelled flag G of order at least 1, returns a list of flags of smaller
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.homomorphic_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mg);
  __Pyx_XDECREF(__pyx_v_graph_hashes);
  __Pyx_XDECREF(__pyx_v_graphs);
  __Pyx_XDECREF(__pyx_v_bad_pairs);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_ig);
  __Pyx_XDECREF(__pyx_v_s_graphs);
  __Pyx_XDECREF(__pyx_v_sg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":716
 * 
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):             # <<<<<<<<<<<<<<
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_39minimal_by_inclusion(PyObject *__pyx_v_cls, PyObject *__pyx_v_graphs); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_39minimal_by_inclusion(PyObject *__pyx_v_cls, PyObject *__pyx_v_graphs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimal_by_inclusion (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_38minimal_by_inclusion(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_graphs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":717
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))             # <<<<<<<<<<<<<<
 * 		i = 0
 * 		while i < len(L) - 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_20minimal_by_inclusion_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_g); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_14HypergraphFlag_20minimal_by_inclusion_lambda2 = {"lambda2", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_20minimal_by_inclusion_lambda2, METH_O, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_20minimal_by_inclusion_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_g) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_g));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_g) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_g, __pyx_n_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_g, __pyx_n_s_ne); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.minimal_by_inclusion.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":716
 * 
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):             # <<<<<<<<<<<<<<
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0
 */

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_38minimal_by_inclusion(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_graphs) {
  PyObject *__pyx_v_L = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("minimal_by_inclusion", 0);

  /* "flagmatic/hypergraph_flag.pyx":717
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))             # <<<<<<<<<<<<<<
 * 		i = 0
 * 		while i < len(L) - 1:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_graphs);
  __Pyx_GIVEREF(__pyx_v_graphs);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_graphs);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_14HypergraphFlag_20minimal_by_inclusion_lambda2, 0, __pyx_n_s_minimal_by_inclusion_locals_lamb, NULL, __pyx_n_s_flagmatic_hypergraph_flag, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_L = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":718
 * 	def minimal_by_inclusion(cls, graphs):
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0             # <<<<<<<<<<<<<<
 * 		while i < len(L) - 1:
 * 			j = i + 1
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_i = __pyx_int_0;

  /* "flagmatic/hypergraph_flag.pyx":719
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0
 * 		while i < len(L) - 1:             # <<<<<<<<<<<<<<
 * 			j = i + 1
 * 			while j < len(L):
 */
  while (1) {
    __pyx_t_4 = PyObject_Length(__pyx_v_L); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 719, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_4 - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_i, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_5) break;

    /* "flagmatic/hypergraph_flag.pyx":720
 * 		i = 0
 * 		while i < len(L) - 1:
 * 			j = i + 1             # <<<<<<<<<<<<<<
 * 			while j < len(L):
 * 				if L[j].has_forbidden_graphs([L[i]]):
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":721
 * 		while i < len(L) - 1:
 * 			j = i + 1
 * 			while j < len(L):             # <<<<<<<<<<<<<<
 * 				if L[j].has_forbidden_graphs([L[i]]):
 * 					L.pop(j)
 */
    while (1) {
      __pyx_t_4 = PyObject_Length(__pyx_v_L); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 721, __pyx_L1_error)
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_j, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 721, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_5) break;

      /* "flagmatic/hypergraph_flag.pyx":722
 * 			j = i + 1
 * 			while j < len(L):
 * 				if L[j].has_forbidden_graphs([L[i]]):             # <<<<<<<<<<<<<<
 * 					L.pop(j)
 * 				else:
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_L, __pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_has_forbidden_graphs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_GetItem(__pyx_v_L, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "flagmatic/hypergraph_flag.pyx":723
 * 			while j < len(L):
 * 				if L[j].has_forbidden_graphs([L[i]]):
 * 					L.pop(j)             # <<<<<<<<<<<<<<
 * 				else:
 * 					j += 1
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_L, __pyx_n_s_pop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (!__pyx_t_7) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_j);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":722
 * 			j = i + 1
 * 			while j < len(L):
 * 				if L[j].has_forbidden_graphs([L[i]]):             # <<<<<<<<<<<<<<
 * 					L.pop(j)
 * 				else:
 */
        goto __pyx_L7;
      }

      /* "flagmatic/hypergraph_flag.pyx":725
 * 					L.pop(j)
 * 				else:
 * 					j += 1             # <<<<<<<<<<<<<<
 * 			i += 1
 * 		return L
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_3);
        __pyx_t_3 = 0;
      }
      __pyx_L7:;
    }

    /* "flagmatic/hypergraph_flag.pyx":726
 * 				else:
 * 					j += 1
 * 			i += 1             # <<<<<<<<<<<<<<
 * 		return L
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":727
 * 					j += 1
 * 			i += 1
 * 		return L             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_L);
  __pyx_r = __pyx_v_L;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":716
 * 
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):             # <<<<<<<<<<<<<<
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.minimal_by_inclusion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_L);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":732
 * 	# TODO: possibly something different with degenerate graphs?
 * 
 * 	def degrees(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list of vertex degrees. Orientation not taken into account.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_41degrees(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_40degrees[] = "\n\t\tReturns a list of vertex degrees. Orientation not taken into account.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_41degrees(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degrees (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_40degrees(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_40degrees(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_v_deg_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("degrees", 0);

  /* "flagmatic/hypergraph_flag.pyx":737
 * 		"""
 * 		cdef int i
 * 		deg_list = [0 for i in range(self._n)]             # <<<<<<<<<<<<<<
 * 		for i in range(self._r * self.ne):
 * 			deg_list[self._edges[i] - 1] += 1
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->_n;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_int_0))) __PYX_ERR(0, 737, __pyx_L1_error)
  }
  __pyx_v_deg_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":738
 * 		cdef int i
 * 		deg_list = [0 for i in range(self._n)]
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			deg_list[self._edges[i] - 1] += 1
 * 		return tuple(deg_list)
 */
  __pyx_t_2 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "flagmatic/hypergraph_flag.pyx":739
 * 		deg_list = [0 for i in range(self._n)]
 * 		for i in range(self._r * self.ne):
 * 			deg_list[self._edges[i] - 1] += 1             # <<<<<<<<<<<<<<
 * 		return tuple(deg_list)
 * 
 */
    __pyx_t_4 = ((__pyx_v_self->_edges[__pyx_v_i]) - 1);
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_deg_list, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_deg_list, __pyx_t_4, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":740
 * 		for i in range(self._r * self.ne):
 * 			deg_list[self._edges[i] - 1] += 1
 * 		return tuple(deg_list)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyList_AsTuple(__pyx_v_deg_list); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":732
 * 	# TODO: possibly something different with degenerate graphs?
 * 
 * 	def degrees(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list of vertex degrees. Orientation not taken into account.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degrees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_deg_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":745
 * 	# TODO: possibly something different with degenerate graphs?
 * 
 * 	def edge_density(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the edge density, i.e. the number of edges divided by binomial(n, r),
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_43edge_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_42edge_density[] = "\n\t\tReturns the edge density, i.e. the number of edges divided by binomial(n, r),\n\t\twhere n is the number of vertices.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_43edge_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("edge_density (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_42edge_density(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_42edge_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("edge_density", 0);

  /* "flagmatic/hypergraph_flag.pyx":750
 * 		where n is the number of vertices.
 * 		"""
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":751
 * 		"""
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		return self.ne / binomial(self.n, self.r)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 751, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":750
 * 		where n is the number of vertices.
 * 		"""
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":753
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		return self.ne / binomial(self.n, self.r)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ne); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_r); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_7) {
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":745
 * 	# TODO: possibly something different with degenerate graphs?
 * 
 * 	def edge_density(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the edge density, i.e. the number of edges divided by binomial(n, r),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.edge_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":756
 * 
 * 
 * 	def subgraph_density(self, h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the H-density. That is, the number of k-sets of vertices that induce
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_45subgraph_density(PyObject *__pyx_v_self, PyObject *__pyx_v_h); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_44subgraph_density[] = "\n\t\tReturns the H-density. That is, the number of k-sets of vertices that induce\n\t\tgraphs isomorphic to H, divided by binomial(n, k). Ignores vertex labels.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_45subgraph_density(PyObject *__pyx_v_self, PyObject *__pyx_v_h) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subgraph_density (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_44subgraph_density(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_h));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_44subgraph_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_h) {
  PyObject *__pyx_v_found = NULL;
  PyObject *__pyx_v_total = NULL;
  PyObject *__pyx_v_minh = NULL;
  PyObject *__pyx_v_hv = NULL;
  PyObject *__pyx_v_ig = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __Pyx_RefNannySetupContext("subgraph_density", 0);

  /* "flagmatic/hypergraph_flag.pyx":762
 * 		"""
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":763
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		# Short-cut if we are dealing with edge/non-edge density
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 763, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":762
 * 		"""
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":766
 * 
 * 		# Short-cut if we are dealing with edge/non-edge density
 * 		if h.n == self.r:             # <<<<<<<<<<<<<<
 * 			if h.ne == 1:
 * 				return self.edge_density()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_r); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":767
 * 		# Short-cut if we are dealing with edge/non-edge density
 * 		if h.n == self.r:
 * 			if h.ne == 1:             # <<<<<<<<<<<<<<
 * 				return self.edge_density()
 * 			else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_ne); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":768
 * 		if h.n == self.r:
 * 			if h.ne == 1:
 * 				return self.edge_density()             # <<<<<<<<<<<<<<
 * 			else:
 * 				return 1 - self.edge_density()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edge_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":767
 * 		# Short-cut if we are dealing with edge/non-edge density
 * 		if h.n == self.r:
 * 			if h.ne == 1:             # <<<<<<<<<<<<<<
 * 				return self.edge_density()
 * 			else:
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":770
 * 				return self.edge_density()
 * 			else:
 * 				return 1 - self.edge_density()             # <<<<<<<<<<<<<<
 * 
 * 		found, total = 0, 0
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edge_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }

    /* "flagmatic/hypergraph_flag.pyx":766
 * 
 * 		# Short-cut if we are dealing with edge/non-edge density
 * 		if h.n == self.r:             # <<<<<<<<<<<<<<
 * 			if h.ne == 1:
 * 				return self.edge_density()
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":772
 * 				return 1 - self.edge_density()
 * 
 * 		found, total = 0, 0             # <<<<<<<<<<<<<<
 * 		minh = h.__copy__()
 * 		minh.t = 0
 */
  __pyx_t_4 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_found = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_total = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":773
 * 
 * 		found, total = 0, 0
 * 		minh = h.__copy__()             # <<<<<<<<<<<<<<
 * 		minh.t = 0
 * 		minh.make_minimal_isomorph()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_minh = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":774
 * 		found, total = 0, 0
 * 		minh = h.__copy__()
 * 		minh.t = 0             # <<<<<<<<<<<<<<
 * 		minh.make_minimal_isomorph()
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_minh, __pyx_n_s_t, __pyx_int_0) < 0) __PYX_ERR(0, 774, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":775
 * 		minh = h.__copy__()
 * 		minh.t = 0
 * 		minh.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 		for hv in Combinations(range(1, self.n + 1), h.n):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_minh, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":777
 * 		minh.make_minimal_isomorph()
 * 
 * 		for hv in Combinations(range(1, self.n + 1), h.n):             # <<<<<<<<<<<<<<
 * 			ig = self.induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_6) {
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 777, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 777, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 777, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 777, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_hv, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":778
 * 
 * 		for hv in Combinations(range(1, self.n + 1), h.n):
 * 			ig = self.induced_subgraph(hv)             # <<<<<<<<<<<<<<
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_induced_subgraph); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_hv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_hv);
      __Pyx_GIVEREF(__pyx_v_hv);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_hv);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ig, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":779
 * 		for hv in Combinations(range(1, self.n + 1), h.n):
 * 			ig = self.induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":780
 * 			ig = self.induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):             # <<<<<<<<<<<<<<
 * 				found += 1
 * 			total += 1
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_minh, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_ig); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_ig);
      __Pyx_GIVEREF(__pyx_v_ig);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_ig);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":781
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1             # <<<<<<<<<<<<<<
 * 			total += 1
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_found, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_found, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":780
 * 			ig = self.induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):             # <<<<<<<<<<<<<<
 * 				found += 1
 * 			total += 1
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":782
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1
 * 			total += 1             # <<<<<<<<<<<<<<
 * 
 * 		return Integer(found) / total
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_total, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_total, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":777
 * 		minh.make_minimal_isomorph()
 * 
 * 		for hv in Combinations(range(1, self.n + 1), h.n):             # <<<<<<<<<<<<<<
 * 			ig = self.induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":784
 * 			total += 1
 * 
 * 		return Integer(found) / total             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8); __pyx_t_8 = NULL;
    __Pyx_INCREF(__pyx_v_found);
    __Pyx_GIVEREF(__pyx_v_found);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_found);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_total); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":756
 * 
 * 
 * 	def subgraph_density(self, h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the H-density. That is, the number of k-sets of vertices that induce
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.subgraph_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_found);
  __Pyx_XDECREF(__pyx_v_total);
  __Pyx_XDECREF(__pyx_v_minh);
  __Pyx_XDECREF(__pyx_v_hv);
  __Pyx_XDECREF(__pyx_v_ig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":787
 * 
 * 
 * 	def complement(self, minimal=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the complement of the graph. Not implemented for oriented graphs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_47complement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_46complement[] = "\n\t\tReturns the complement of the graph. Not implemented for oriented graphs.\n\t\tIf minimal=True, the minimal representative from the isomorphism class is\n\t\treturned.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_47complement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_minimal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("complement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_minimal,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minimal);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "complement") < 0)) __PYX_ERR(0, 787, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_minimal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("complement", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 787, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.complement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_46complement(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_minimal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_46complement(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_minimal) {
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_edges = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_tg = NULL;
  PyObject *__pyx_v_mintgs = NULL;
  PyObject *__pyx_v_minh = NULL;
  PyObject *__pyx_v_perm = NULL;
  PyObject *__pyx_v_ntg = NULL;
  PyObject *__pyx_v_ntgs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("complement", 0);

  /* "flagmatic/hypergraph_flag.pyx":794
 * 		"""
 * 
 * 		if self.oriented:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_oriented); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":795
 * 
 * 		if self.oriented:
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if self.multiplicity != 1:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 795, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":794
 * 		"""
 * 
 * 		if self.oriented:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":797
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_multiplicity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":798
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if self.is_degenerate:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 798, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":797
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":800
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_2) {

    /* "flagmatic/hypergraph_flag.pyx":801
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		h = type(self)()
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 801, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":800
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":803
 * 			raise NotImplementedError
 * 
 * 		h = type(self)()             # <<<<<<<<<<<<<<
 * 		h.n = self.n
 * 		h.t = self.t
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_t_1 = ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))); __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_h = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":804
 * 
 * 		h = type(self)()
 * 		h.n = self.n             # <<<<<<<<<<<<<<
 * 		h.t = self.t
 * 		edges = [tuple(sorted(e)) for e in self]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_h, __pyx_n_s_n, __pyx_t_3) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":805
 * 		h = type(self)()
 * 		h.n = self.n
 * 		h.t = self.t             # <<<<<<<<<<<<<<
 * 		edges = [tuple(sorted(e)) for e in self]
 * 		for e in Subsets(range(1, self.n + 1), self.r):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_h, __pyx_n_s_t, __pyx_t_3) < 0) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":806
 * 		h.n = self.n
 * 		h.t = self.t
 * 		edges = [tuple(sorted(e)) for e in self]             # <<<<<<<<<<<<<<
 * 		for e in Subsets(range(1, self.n + 1), self.r):
 * 			if not tuple(sorted(e)) in edges:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 806, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_7 = PySequence_List(__pyx_v_e); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 806, __pyx_L1_error)
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 806, __pyx_L1_error)
    }
    __pyx_t_7 = PyList_AsTuple(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_edges = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":807
 * 		h.t = self.t
 * 		edges = [tuple(sorted(e)) for e in self]
 * 		for e in Subsets(range(1, self.n + 1), self.r):             # <<<<<<<<<<<<<<
 * 			if not tuple(sorted(e)) in edges:
 * 				h.add_edge(e)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Subsets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_9) {
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_t_7);
  __pyx_t_4 = 0;
  __pyx_t_7 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 807, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 807, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":808
 * 		edges = [tuple(sorted(e)) for e in self]
 * 		for e in Subsets(range(1, self.n + 1), self.r):
 * 			if not tuple(sorted(e)) in edges:             # <<<<<<<<<<<<<<
 * 				h.add_edge(e)
 * 
 */
    __pyx_t_10 = PySequence_List(__pyx_v_e); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_8 = PyList_Sort(__pyx_t_3); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 808, __pyx_L1_error)
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 808, __pyx_L1_error)
    }
    __pyx_t_10 = PyList_AsTuple(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_10, __pyx_v_edges, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = (__pyx_t_2 != 0);
    if (__pyx_t_11) {

      /* "flagmatic/hypergraph_flag.pyx":809
 * 		for e in Subsets(range(1, self.n + 1), self.r):
 * 			if not tuple(sorted(e)) in edges:
 * 				h.add_edge(e)             # <<<<<<<<<<<<<<
 * 
 * 		if minimal:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_e); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_e);
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "flagmatic/hypergraph_flag.pyx":808
 * 		edges = [tuple(sorted(e)) for e in self]
 * 		for e in Subsets(range(1, self.n + 1), self.r):
 * 			if not tuple(sorted(e)) in edges:             # <<<<<<<<<<<<<<
 * 				h.add_edge(e)
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":807
 * 		h.t = self.t
 * 		edges = [tuple(sorted(e)) for e in self]
 * 		for e in Subsets(range(1, self.n + 1), self.r):             # <<<<<<<<<<<<<<
 * 			if not tuple(sorted(e)) in edges:
 * 				h.add_edge(e)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":811
 * 				h.add_edge(e)
 * 
 * 		if minimal:             # <<<<<<<<<<<<<<
 * 			if h.t > 0:
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 */
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_minimal); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 811, __pyx_L1_error)
  if (__pyx_t_11) {

    /* "flagmatic/hypergraph_flag.pyx":812
 * 
 * 		if minimal:
 * 			if h.t > 0:             # <<<<<<<<<<<<<<
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 * 				mintgs = str(tg)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_11) {

      /* "flagmatic/hypergraph_flag.pyx":813
 * 		if minimal:
 * 			if h.t > 0:
 * 				tg = h.induced_subgraph(range(1, h.t + 1))             # <<<<<<<<<<<<<<
 * 				mintgs = str(tg)
 * 				minh = h
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_induced_subgraph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 813, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 813, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 813, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_tg = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "flagmatic/hypergraph_flag.pyx":814
 * 			if h.t > 0:
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 * 				mintgs = str(tg)             # <<<<<<<<<<<<<<
 * 				minh = h
 * 				for perm in Permutations(range(1, h.t + 1)):
 */
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_tg);
      __Pyx_GIVEREF(__pyx_v_tg);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_tg);
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_mintgs = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "flagmatic/hypergraph_flag.pyx":815
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 * 				mintgs = str(tg)
 * 				minh = h             # <<<<<<<<<<<<<<
 * 				for perm in Permutations(range(1, h.t + 1)):
 * 					ntg = tg.__copy__()
 */
      __Pyx_INCREF(__pyx_v_h);
      __pyx_v_minh = __pyx_v_h;

      /* "flagmatic/hypergraph_flag.pyx":816
 * 				mintgs = str(tg)
 * 				minh = h
 * 				for perm in Permutations(range(1, h.t + 1)):             # <<<<<<<<<<<<<<
 * 					ntg = tg.__copy__()
 * 					ntg.relabel(perm)
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_Permutations); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_t); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 816, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 816, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 816, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_6(__pyx_t_10);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 816, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_perm, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "flagmatic/hypergraph_flag.pyx":817
 * 				minh = h
 * 				for perm in Permutations(range(1, h.t + 1)):
 * 					ntg = tg.__copy__()             # <<<<<<<<<<<<<<
 * 					ntg.relabel(perm)
 * 					ntgs = str(ntg)
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (__pyx_t_4) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ntg, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "flagmatic/hypergraph_flag.pyx":818
 * 				for perm in Permutations(range(1, h.t + 1)):
 * 					ntg = tg.__copy__()
 * 					ntg.relabel(perm)             # <<<<<<<<<<<<<<
 * 					ntgs = str(ntg)
 * 					if ntgs < mintgs:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ntg, __pyx_n_s_relabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_perm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 818, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_perm);
          __Pyx_GIVEREF(__pyx_v_perm);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_perm);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "flagmatic/hypergraph_flag.pyx":819
 * 					ntg = tg.__copy__()
 * 					ntg.relabel(perm)
 * 					ntgs = str(ntg)             # <<<<<<<<<<<<<<
 * 					if ntgs < mintgs:
 * 						mintgs = ntgs
 */
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_ntg);
        __Pyx_GIVEREF(__pyx_v_ntg);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ntg);
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 819, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ntgs, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":820
 * 					ntg.relabel(perm)
 * 					ntgs = str(ntg)
 * 					if ntgs < mintgs:             # <<<<<<<<<<<<<<
 * 						mintgs = ntgs
 * 						minh = h.__copy__()
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_ntgs, __pyx_v_mintgs, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 820, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 820, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_11) {

          /* "flagmatic/hypergraph_flag.pyx":821
 * 					ntgs = str(ntg)
 * 					if ntgs < mintgs:
 * 						mintgs = ntgs             # <<<<<<<<<<<<<<
 * 						minh = h.__copy__()
 * 						minh.relabel(perm + range(h.t + 1, h.n + 1))
 */
          __Pyx_INCREF(__pyx_v_ntgs);
          __Pyx_DECREF_SET(__pyx_v_mintgs, __pyx_v_ntgs);

          /* "flagmatic/hypergraph_flag.pyx":822
 * 					if ntgs < mintgs:
 * 						mintgs = ntgs
 * 						minh = h.__copy__()             # <<<<<<<<<<<<<<
 * 						minh.relabel(perm + range(h.t + 1, h.n + 1))
 * 				h = minh
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          if (__pyx_t_7) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF_SET(__pyx_v_minh, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":823
 * 						mintgs = ntgs
 * 						minh = h.__copy__()
 * 						minh.relabel(perm + range(h.t + 1, h.n + 1))             # <<<<<<<<<<<<<<
 * 				h = minh
 * 			h.make_minimal_isomorph()
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_minh, __pyx_n_s_relabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_t); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
          __pyx_t_4 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_v_perm, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          if (!__pyx_t_9) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 823, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_7);
            __pyx_t_7 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":820
 * 					ntg.relabel(perm)
 * 					ntgs = str(ntg)
 * 					if ntgs < mintgs:             # <<<<<<<<<<<<<<
 * 						mintgs = ntgs
 * 						minh = h.__copy__()
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":816
 * 				mintgs = str(tg)
 * 				minh = h
 * 				for perm in Permutations(range(1, h.t + 1)):             # <<<<<<<<<<<<<<
 * 					ntg = tg.__copy__()
 * 					ntg.relabel(perm)
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "flagmatic/hypergraph_flag.pyx":824
 * 						minh = h.__copy__()
 * 						minh.relabel(perm + range(h.t + 1, h.n + 1))
 * 				h = minh             # <<<<<<<<<<<<<<
 * 			h.make_minimal_isomorph()
 * 
 */
      __Pyx_INCREF(__pyx_v_minh);
      __Pyx_DECREF_SET(__pyx_v_h, __pyx_v_minh);

      /* "flagmatic/hypergraph_flag.pyx":812
 * 
 * 		if minimal:
 * 			if h.t > 0:             # <<<<<<<<<<<<<<
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 * 				mintgs = str(tg)
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":825
 * 						minh.relabel(perm + range(h.t + 1, h.n + 1))
 * 				h = minh
 * 			h.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 		return h
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 825, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "flagmatic/hypergraph_flag.pyx":811
 * 				h.add_edge(e)
 * 
 * 		if minimal:             # <<<<<<<<<<<<<<
 * 			if h.t > 0:
 * 				tg = h.induced_subgraph(range(1, h.t + 1))
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":827
 * 			h.make_minimal_isomorph()
 * 
 * 		return h             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_h);
  __pyx_r = __pyx_v_h;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":787
 * 
 * 
 * 	def complement(self, minimal=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the complement of the graph. Not implemented for oriented graphs.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.complement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_edges);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_tg);
  __Pyx_XDECREF(__pyx_v_mintgs);
  __Pyx_XDECREF(__pyx_v_minh);
  __Pyx_XDECREF(__pyx_v_perm);
  __Pyx_XDECREF(__pyx_v_ntg);
  __Pyx_XDECREF(__pyx_v_ntgs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":832
 * 	# TODO: mark graph as degenerate if labels are repeated and we get a degenerate edge
 * 
 * 	def relabel(self, verts):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_49relabel(PyObject *__pyx_v_self, PyObject *__pyx_v_verts); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_49relabel(PyObject *__pyx_v_self, PyObject *__pyx_v_verts) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relabel (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_48relabel(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_verts));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_48relabel(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("relabel", 0);

  /* "flagmatic/hypergraph_flag.pyx":836
 * 		cdef int i
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 		self._certified_minimal_isomorph = False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":837
 * 
 * 		self._require_mutable()
 * 		self._certified_minimal_isomorph = False             # <<<<<<<<<<<<<<
 * 
 * 		if len(verts) != self._n:
 */
  __pyx_v_self->_certified_minimal_isomorph = 0;

  /* "flagmatic/hypergraph_flag.pyx":839
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if len(verts) != self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_verts); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 != __pyx_v_self->_n) != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":840
 * 
 * 		if len(verts) != self._n:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(verts)):
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 840, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":839
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if len(verts) != self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":842
 * 			raise ValueError
 * 
 * 		for i in range(len(verts)):             # <<<<<<<<<<<<<<
 * 			if verts[i] < 1 or verts[i] > self._n:
 * 				raise ValueError
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_verts); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 842, __pyx_L1_error)
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":843
 * 
 * 		for i in range(len(verts)):
 * 			if verts[i] < 1 or verts[i] > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_verts, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_verts, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_5) {

      /* "flagmatic/hypergraph_flag.pyx":844
 * 		for i in range(len(verts)):
 * 			if verts[i] < 1 or verts[i] > self._n:
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self._r * self.ne):
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 844, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":843
 * 
 * 		for i in range(len(verts)):
 * 			if verts[i] < 1 or verts[i] > self._n:             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 
 */
    }
  }

  /* "flagmatic/hypergraph_flag.pyx":846
 * 				raise ValueError
 * 
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			self._edges[i] = verts[self._edges[i] - 1]
 * 
 */
  __pyx_t_6 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":847
 * 
 * 		for i in range(self._r * self.ne):
 * 			self._edges[i] = verts[self._edges[i] - 1]             # <<<<<<<<<<<<<<
 * 
 * 		self.minimize_edges()
 */
    __pyx_t_9 = ((__pyx_v_self->_edges[__pyx_v_i]) - 1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_verts, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->_edges[__pyx_v_i]) = __pyx_t_10;
  }

  /* "flagmatic/hypergraph_flag.pyx":849
 * 			self._edges[i] = verts[self._edges[i] - 1]
 * 
 * 		self.minimize_edges()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_minimize_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":832
 * 	# TODO: mark graph as degenerate if labels are repeated and we get a degenerate edge
 * 
 * 	def relabel(self, verts):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.relabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":854
 * 	# TODO: handle multigraphs somehow
 * 
 * 	def identify_vertices(self, v1, v2, remove_duplicate_edges=True):             # <<<<<<<<<<<<<<
 * 
 * 		self._require_mutable()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_51identify_vertices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_51identify_vertices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_remove_duplicate_edges = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identify_vertices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_remove_duplicate_edges,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("identify_vertices", 0, 2, 3, 1); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_duplicate_edges);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "identify_vertices") < 0)) __PYX_ERR(0, 854, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_v1 = values[0];
    __pyx_v_v2 = values[1];
    __pyx_v_remove_duplicate_edges = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identify_vertices", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 854, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.identify_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_50identify_vertices(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_v1, __pyx_v_v2, __pyx_v_remove_duplicate_edges);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_50identify_vertices(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_remove_duplicate_edges) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_v;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_is_dup;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("identify_vertices", 0);

  /* "flagmatic/hypergraph_flag.pyx":856
 * 	def identify_vertices(self, v1, v2, remove_duplicate_edges=True):
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 		self._certified_minimal_isomorph = False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":857
 * 
 * 		self._require_mutable()
 * 		self._certified_minimal_isomorph = False             # <<<<<<<<<<<<<<
 * 
 * 		if self.multiplicity != 1:
 */
  __pyx_v_self->_certified_minimal_isomorph = 0;

  /* "flagmatic/hypergraph_flag.pyx":859
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot identify vertices of multigraphs.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_multiplicity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":860
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot identify vertices of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, j, k, v, x, y
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 860, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":859
 * 		self._certified_minimal_isomorph = False
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot identify vertices of multigraphs.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":864
 * 		cdef int i, j, k, v, x, y
 * 		cdef bint is_dup
 * 		x = <int ?> v1             # <<<<<<<<<<<<<<
 * 		y = <int ?> v2
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_v1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
  __pyx_v_x = ((int)__pyx_t_5);

  /* "flagmatic/hypergraph_flag.pyx":865
 * 		cdef bint is_dup
 * 		x = <int ?> v1
 * 		y = <int ?> v2             # <<<<<<<<<<<<<<
 * 
 * 		if x < 1 or x > self._n:
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_v2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_v_y = ((int)__pyx_t_5);

  /* "flagmatic/hypergraph_flag.pyx":867
 * 		y = <int ?> v2
 * 
 * 		if x < 1 or x > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 		if y < 1 or y > self._n:
 */
  __pyx_t_6 = ((__pyx_v_x < 1) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_x > __pyx_v_self->_n) != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":868
 * 
 * 		if x < 1 or x > self._n:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 		if y < 1 or y > self._n:
 * 			raise ValueError
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 868, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":867
 * 		y = <int ?> v2
 * 
 * 		if x < 1 or x > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 		if y < 1 or y > self._n:
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":869
 * 		if x < 1 or x > self._n:
 * 			raise ValueError
 * 		if y < 1 or y > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 		if x == y:
 */
  __pyx_t_6 = ((__pyx_v_y < 1) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_y > __pyx_v_self->_n) != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":870
 * 			raise ValueError
 * 		if y < 1 or y > self._n:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 		if x == y:
 * 			return ValueError		# TODO: should this be a no-op?
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 870, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":869
 * 		if x < 1 or x > self._n:
 * 			raise ValueError
 * 		if y < 1 or y > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 		if x == y:
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":871
 * 		if y < 1 or y > self._n:
 * 			raise ValueError
 * 		if x == y:             # <<<<<<<<<<<<<<
 * 			return ValueError		# TODO: should this be a no-op?
 * 
 */
  __pyx_t_4 = ((__pyx_v_x == __pyx_v_y) != 0);
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":872
 * 			raise ValueError
 * 		if x == y:
 * 			return ValueError		# TODO: should this be a no-op?             # <<<<<<<<<<<<<<
 * 
 * 		if x > y:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_r = __pyx_builtin_ValueError;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":871
 * 		if y < 1 or y > self._n:
 * 			raise ValueError
 * 		if x == y:             # <<<<<<<<<<<<<<
 * 			return ValueError		# TODO: should this be a no-op?
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":874
 * 			return ValueError		# TODO: should this be a no-op?
 * 
 * 		if x > y:             # <<<<<<<<<<<<<<
 * 			y, x = x, y
 * 
 */
  __pyx_t_4 = ((__pyx_v_x > __pyx_v_y) != 0);
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":875
 * 
 * 		if x > y:
 * 			y, x = x, y             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self._r * self.ne):
 */
    __pyx_t_5 = __pyx_v_x;
    __pyx_t_7 = __pyx_v_y;
    __pyx_v_y = __pyx_t_5;
    __pyx_v_x = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":874
 * 			return ValueError		# TODO: should this be a no-op?
 * 
 * 		if x > y:             # <<<<<<<<<<<<<<
 * 			y, x = x, y
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":877
 * 			y, x = x, y
 * 
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			v = self._edges[i]
 * 			if v == y:
 */
  __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "flagmatic/hypergraph_flag.pyx":878
 * 
 * 		for i in range(self._r * self.ne):
 * 			v = self._edges[i]             # <<<<<<<<<<<<<<
 * 			if v == y:
 * 				self._edges[i] = x
 */
    __pyx_v_v = (__pyx_v_self->_edges[__pyx_v_i]);

    /* "flagmatic/hypergraph_flag.pyx":879
 * 		for i in range(self._r * self.ne):
 * 			v = self._edges[i]
 * 			if v == y:             # <<<<<<<<<<<<<<
 * 				self._edges[i] = x
 * 			elif v > y:
 */
    __pyx_t_4 = ((__pyx_v_v == __pyx_v_y) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":880
 * 			v = self._edges[i]
 * 			if v == y:
 * 				self._edges[i] = x             # <<<<<<<<<<<<<<
 * 			elif v > y:
 * 				self._edges[i] = v - 1
 */
      (__pyx_v_self->_edges[__pyx_v_i]) = __pyx_v_x;

      /* "flagmatic/hypergraph_flag.pyx":879
 * 		for i in range(self._r * self.ne):
 * 			v = self._edges[i]
 * 			if v == y:             # <<<<<<<<<<<<<<
 * 				self._edges[i] = x
 * 			elif v > y:
 */
      goto __pyx_L14;
    }

    /* "flagmatic/hypergraph_flag.pyx":881
 * 			if v == y:
 * 				self._edges[i] = x
 * 			elif v > y:             # <<<<<<<<<<<<<<
 * 				self._edges[i] = v - 1
 * 			else:
 */
    __pyx_t_4 = ((__pyx_v_v > __pyx_v_y) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":882
 * 				self._edges[i] = x
 * 			elif v > y:
 * 				self._edges[i] = v - 1             # <<<<<<<<<<<<<<
 * 			else:
 * 				self._edges[i] = v
 */
      (__pyx_v_self->_edges[__pyx_v_i]) = (__pyx_v_v - 1);

      /* "flagmatic/hypergraph_flag.pyx":881
 * 			if v == y:
 * 				self._edges[i] = x
 * 			elif v > y:             # <<<<<<<<<<<<<<
 * 				self._edges[i] = v - 1
 * 			else:
 */
      goto __pyx_L14;
    }

    /* "flagmatic/hypergraph_flag.pyx":884
 * 				self._edges[i] = v - 1
 * 			else:
 * 				self._edges[i] = v             # <<<<<<<<<<<<<<
 * 
 * 		self._n -= 1
 */
    /*else*/ {
      (__pyx_v_self->_edges[__pyx_v_i]) = __pyx_v_v;
    }
    __pyx_L14:;
  }

  /* "flagmatic/hypergraph_flag.pyx":886
 * 				self._edges[i] = v
 * 
 * 		self._n -= 1             # <<<<<<<<<<<<<<
 * 		self.minimize_edges()
 * 
 */
  __pyx_v_self->_n = (__pyx_v_self->_n - 1);

  /* "flagmatic/hypergraph_flag.pyx":887
 * 
 * 		self._n -= 1
 * 		self.minimize_edges()             # <<<<<<<<<<<<<<
 * 
 * 		if remove_duplicate_edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_minimize_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":889
 * 		self.minimize_edges()
 * 
 * 		if remove_duplicate_edges:             # <<<<<<<<<<<<<<
 * 
 * 			i = 0
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_remove_duplicate_edges); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 889, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":891
 * 		if remove_duplicate_edges:
 * 
 * 			i = 0             # <<<<<<<<<<<<<<
 * 			while i < self.ne - 1:
 * 
 */
    __pyx_v_i = 0;

    /* "flagmatic/hypergraph_flag.pyx":892
 * 
 * 			i = 0
 * 			while i < self.ne - 1:             # <<<<<<<<<<<<<<
 * 
 * 				# The following shorter code produces a SIGSEGV
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_i < (__pyx_v_self->ne - 1)) != 0);
      if (!__pyx_t_4) break;

      /* "flagmatic/hypergraph_flag.pyx":897
 * 				# if all(self._edges[self._r * i + j] == self._edges[self._r * (i + 1) + j] for j in range(self._r)):
 * 
 * 				is_dup = True             # <<<<<<<<<<<<<<
 * 				for j in range(self._r):
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:
 */
      __pyx_v_is_dup = 1;

      /* "flagmatic/hypergraph_flag.pyx":898
 * 
 * 				is_dup = True
 * 				for j in range(self._r):             # <<<<<<<<<<<<<<
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:
 * 						is_dup = False
 */
      __pyx_t_7 = __pyx_v_self->_r;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":899
 * 				is_dup = True
 * 				for j in range(self._r):
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:             # <<<<<<<<<<<<<<
 * 						is_dup = False
 * 						break
 */
        __pyx_t_4 = (((__pyx_v_self->_edges[((__pyx_v_self->_r * __pyx_v_i) + __pyx_v_j)]) != (__pyx_v_self->_edges[((__pyx_v_self->_r * (__pyx_v_i + 1)) + __pyx_v_j)])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":900
 * 				for j in range(self._r):
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:
 * 						is_dup = False             # <<<<<<<<<<<<<<
 * 						break
 * 
 */
          __pyx_v_is_dup = 0;

          /* "flagmatic/hypergraph_flag.pyx":901
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:
 * 						is_dup = False
 * 						break             # <<<<<<<<<<<<<<
 * 
 * 				if not is_dup:
 */
          goto __pyx_L19_break;

          /* "flagmatic/hypergraph_flag.pyx":899
 * 				is_dup = True
 * 				for j in range(self._r):
 * 					if self._edges[self._r * i + j] != self._edges[self._r * (i + 1) + j]:             # <<<<<<<<<<<<<<
 * 						is_dup = False
 * 						break
 */
        }
      }
      __pyx_L19_break:;

      /* "flagmatic/hypergraph_flag.pyx":903
 * 						break
 * 
 * 				if not is_dup:             # <<<<<<<<<<<<<<
 * 					i += 1
 * 					continue
 */
      __pyx_t_4 = ((!(__pyx_v_is_dup != 0)) != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":904
 * 
 * 				if not is_dup:
 * 					i += 1             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "flagmatic/hypergraph_flag.pyx":905
 * 				if not is_dup:
 * 					i += 1
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				self.ne -= 1
 */
        goto __pyx_L16_continue;

        /* "flagmatic/hypergraph_flag.pyx":903
 * 						break
 * 
 * 				if not is_dup:             # <<<<<<<<<<<<<<
 * 					i += 1
 * 					continue
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":907
 * 					continue
 * 
 * 				self.ne -= 1             # <<<<<<<<<<<<<<
 * 				for k in range(self._r * i, self._r * self.ne):
 * 					self._edges[k] = self._edges[k + self._r]
 */
      __pyx_v_self->ne = (__pyx_v_self->ne - 1);

      /* "flagmatic/hypergraph_flag.pyx":908
 * 
 * 				self.ne -= 1
 * 				for k in range(self._r * i, self._r * self.ne):             # <<<<<<<<<<<<<<
 * 					self._edges[k] = self._edges[k + self._r]
 * 
 */
      __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
      for (__pyx_t_5 = (__pyx_v_self->_r * __pyx_v_i); __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
        __pyx_v_k = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":909
 * 				self.ne -= 1
 * 				for k in range(self._r * i, self._r * self.ne):
 * 					self._edges[k] = self._edges[k + self._r]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_self->_edges[__pyx_v_k]) = (__pyx_v_self->_edges[(__pyx_v_k + __pyx_v_self->_r)]);
      }
      __pyx_L16_continue:;
    }

    /* "flagmatic/hypergraph_flag.pyx":889
 * 		self.minimize_edges()
 * 
 * 		if remove_duplicate_edges:             # <<<<<<<<<<<<<<
 * 
 * 			i = 0
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":854
 * 	# TODO: handle multigraphs somehow
 * 
 * 	def identify_vertices(self, v1, v2, remove_duplicate_edges=True):             # <<<<<<<<<<<<<<
 * 
 * 		self._require_mutable()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.identify_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":913
 * 
 * 
 * 	def minimize_edges(self):             # <<<<<<<<<<<<<<
 * 
 * 		self._require_mutable()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_53minimize_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_53minimize_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize_edges (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_52minimize_edges(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_52minimize_edges(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("minimize_edges", 0);

  /* "flagmatic/hypergraph_flag.pyx":915
 * 	def minimize_edges(self):
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 		raw_minimize_edges(self._edges, self.ne, self._r, self._oriented)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":917
 * 		self._require_mutable()
 * 
 * 		raw_minimize_edges(self._edges, self.ne, self._r, self._oriented)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_9flagmatic_15hypergraph_flag_raw_minimize_edges(__pyx_v_self->_edges, __pyx_v_self->ne, __pyx_v_self->_r, __pyx_v_self->_oriented);

  /* "flagmatic/hypergraph_flag.pyx":913
 * 
 * 
 * 	def minimize_edges(self):             # <<<<<<<<<<<<<<
 * 
 * 		self._require_mutable()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.minimize_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":920
 * 
 * 
 * 	def make_minimal_isomorph(self):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, *new_edges, *winning_edges, *e
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_55make_minimal_isomorph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_55make_minimal_isomorph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_minimal_isomorph (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_54make_minimal_isomorph(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_54make_minimal_isomorph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  int __pyx_v_i;
  int *__pyx_v_new_edges;
  int *__pyx_v_winning_edges;
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_is_lower;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("make_minimal_isomorph", 0);

  /* "flagmatic/hypergraph_flag.pyx":925
 * 		cdef int *p, np, is_lower
 * 
 * 		self._require_mutable()             # <<<<<<<<<<<<<<
 * 
 * 		if self._certified_minimal_isomorph:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_mutable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":927
 * 		self._require_mutable()
 * 
 * 		if self._certified_minimal_isomorph:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  __pyx_t_4 = (__pyx_v_self->_certified_minimal_isomorph != 0);
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":928
 * 
 * 		if self._certified_minimal_isomorph:
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":927
 * 		self._require_mutable()
 * 
 * 		if self._certified_minimal_isomorph:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":930
 * 			return
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)             # <<<<<<<<<<<<<<
 * 		winning_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 * 
 */
  __pyx_v_new_edges = ((int *)malloc((((sizeof(int)) * __pyx_v_self->_r) * __pyx_v_self->ne)));

  /* "flagmatic/hypergraph_flag.pyx":931
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 * 		winning_edges = <int *> malloc (sizeof(int) * self._r * self.ne)             # <<<<<<<<<<<<<<
 * 
 * 		p = generate_permutations_fixing(self._n, self._t, &np)
 */
  __pyx_v_winning_edges = ((int *)malloc((((sizeof(int)) * __pyx_v_self->_r) * __pyx_v_self->ne)));

  /* "flagmatic/hypergraph_flag.pyx":933
 * 		winning_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 * 
 * 		p = generate_permutations_fixing(self._n, self._t, &np)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(np):
 */
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_permutations_fixing(__pyx_v_self->_n, __pyx_v_self->_t, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":935
 * 		p = generate_permutations_fixing(self._n, self._t, &np)
 * 
 * 		for i in range(np):             # <<<<<<<<<<<<<<
 * 
 * 			for j in range(self._r * self.ne):
 */
  __pyx_t_5 = __pyx_v_np;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":937
 * 		for i in range(np):
 * 
 * 			for j in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]
 * 
 */
    __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "flagmatic/hypergraph_flag.pyx":938
 * 
 * 			for j in range(self._r * self.ne):
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]             # <<<<<<<<<<<<<<
 * 
 * 			raw_minimize_edges(new_edges, self.ne, self._r, self._oriented)
 */
      (__pyx_v_new_edges[__pyx_v_j]) = (__pyx_v_p[(((__pyx_v_self->_n * __pyx_v_i) + (__pyx_v_self->_edges[__pyx_v_j])) - 1)]);
    }

    /* "flagmatic/hypergraph_flag.pyx":940
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]
 * 
 * 			raw_minimize_edges(new_edges, self.ne, self._r, self._oriented)             # <<<<<<<<<<<<<<
 * 
 * 			if i == 0:
 */
    __pyx_f_9flagmatic_15hypergraph_flag_raw_minimize_edges(__pyx_v_new_edges, __pyx_v_self->ne, __pyx_v_self->_r, __pyx_v_self->_oriented);

    /* "flagmatic/hypergraph_flag.pyx":942
 * 			raw_minimize_edges(new_edges, self.ne, self._r, self._oriented)
 * 
 * 			if i == 0:             # <<<<<<<<<<<<<<
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]
 */
    __pyx_t_4 = ((__pyx_v_i == 0) != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":943
 * 
 * 			if i == 0:
 * 				for j in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 					winning_edges[j] = new_edges[j]
 * 				continue
 */
      __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "flagmatic/hypergraph_flag.pyx":944
 * 			if i == 0:
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]             # <<<<<<<<<<<<<<
 * 				continue
 * 
 */
        (__pyx_v_winning_edges[__pyx_v_j]) = (__pyx_v_new_edges[__pyx_v_j]);
      }

      /* "flagmatic/hypergraph_flag.pyx":945
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]
 * 				continue             # <<<<<<<<<<<<<<
 * 
 * 			is_lower = 1
 */
      goto __pyx_L4_continue;

      /* "flagmatic/hypergraph_flag.pyx":942
 * 			raw_minimize_edges(new_edges, self.ne, self._r, self._oriented)
 * 
 * 			if i == 0:             # <<<<<<<<<<<<<<
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":947
 * 				continue
 * 
 * 			is_lower = 1             # <<<<<<<<<<<<<<
 * 
 * 			for j in range(self._r * self.ne):
 */
    __pyx_v_is_lower = 1;

    /* "flagmatic/hypergraph_flag.pyx":949
 * 			is_lower = 1
 * 
 * 			for j in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 				if new_edges[j] > winning_edges[j]:
 * 					is_lower = 0
 */
    __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "flagmatic/hypergraph_flag.pyx":950
 * 
 * 			for j in range(self._r * self.ne):
 * 				if new_edges[j] > winning_edges[j]:             # <<<<<<<<<<<<<<
 * 					is_lower = 0
 * 					break
 */
      __pyx_t_4 = (((__pyx_v_new_edges[__pyx_v_j]) > (__pyx_v_winning_edges[__pyx_v_j])) != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":951
 * 			for j in range(self._r * self.ne):
 * 				if new_edges[j] > winning_edges[j]:
 * 					is_lower = 0             # <<<<<<<<<<<<<<
 * 					break
 * 				elif new_edges[j] < winning_edges[j]:
 */
        __pyx_v_is_lower = 0;

        /* "flagmatic/hypergraph_flag.pyx":952
 * 				if new_edges[j] > winning_edges[j]:
 * 					is_lower = 0
 * 					break             # <<<<<<<<<<<<<<
 * 				elif new_edges[j] < winning_edges[j]:
 * 					break
 */
        goto __pyx_L12_break;

        /* "flagmatic/hypergraph_flag.pyx":950
 * 
 * 			for j in range(self._r * self.ne):
 * 				if new_edges[j] > winning_edges[j]:             # <<<<<<<<<<<<<<
 * 					is_lower = 0
 * 					break
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":953
 * 					is_lower = 0
 * 					break
 * 				elif new_edges[j] < winning_edges[j]:             # <<<<<<<<<<<<<<
 * 					break
 * 
 */
      __pyx_t_4 = (((__pyx_v_new_edges[__pyx_v_j]) < (__pyx_v_winning_edges[__pyx_v_j])) != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":954
 * 					break
 * 				elif new_edges[j] < winning_edges[j]:
 * 					break             # <<<<<<<<<<<<<<
 * 
 * 			if is_lower: # We have a new winner
 */
        goto __pyx_L12_break;

        /* "flagmatic/hypergraph_flag.pyx":953
 * 					is_lower = 0
 * 					break
 * 				elif new_edges[j] < winning_edges[j]:             # <<<<<<<<<<<<<<
 * 					break
 * 
 */
      }
    }
    __pyx_L12_break:;

    /* "flagmatic/hypergraph_flag.pyx":956
 * 					break
 * 
 * 			if is_lower: # We have a new winner             # <<<<<<<<<<<<<<
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]
 */
    __pyx_t_4 = (__pyx_v_is_lower != 0);
    if (__pyx_t_4) {

      /* "flagmatic/hypergraph_flag.pyx":957
 * 
 * 			if is_lower: # We have a new winner
 * 				for j in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 					winning_edges[j] = new_edges[j]
 * 
 */
      __pyx_t_7 = (__pyx_v_self->_r * __pyx_v_self->ne);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "flagmatic/hypergraph_flag.pyx":958
 * 			if is_lower: # We have a new winner
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self._r * self.ne):
 */
        (__pyx_v_winning_edges[__pyx_v_j]) = (__pyx_v_new_edges[__pyx_v_j]);
      }

      /* "flagmatic/hypergraph_flag.pyx":956
 * 					break
 * 
 * 			if is_lower: # We have a new winner             # <<<<<<<<<<<<<<
 * 				for j in range(self._r * self.ne):
 * 					winning_edges[j] = new_edges[j]
 */
    }
    __pyx_L4_continue:;
  }

  /* "flagmatic/hypergraph_flag.pyx":960
 * 					winning_edges[j] = new_edges[j]
 * 
 * 		for i in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 			self._edges[i] = winning_edges[i]
 * 
 */
  __pyx_t_5 = (__pyx_v_self->_r * __pyx_v_self->ne);
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":961
 * 
 * 		for i in range(self._r * self.ne):
 * 			self._edges[i] = winning_edges[i]             # <<<<<<<<<<<<<<
 * 
 * 		self._certified_minimal_isomorph = True
 */
    (__pyx_v_self->_edges[__pyx_v_i]) = (__pyx_v_winning_edges[__pyx_v_i]);
  }

  /* "flagmatic/hypergraph_flag.pyx":963
 * 			self._edges[i] = winning_edges[i]
 * 
 * 		self._certified_minimal_isomorph = True             # <<<<<<<<<<<<<<
 * 
 * 		free(new_edges)
 */
  __pyx_v_self->_certified_minimal_isomorph = 1;

  /* "flagmatic/hypergraph_flag.pyx":965
 * 		self._certified_minimal_isomorph = True
 * 
 * 		free(new_edges)             # <<<<<<<<<<<<<<
 * 		free(winning_edges)
 * 
 */
  free(__pyx_v_new_edges);

  /* "flagmatic/hypergraph_flag.pyx":966
 * 
 * 		free(new_edges)
 * 		free(winning_edges)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  free(__pyx_v_winning_edges);

  /* "flagmatic/hypergraph_flag.pyx":920
 * 
 * 
 * 	def make_minimal_isomorph(self):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, *new_edges, *winning_edges, *e
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.make_minimal_isomorph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":971
 * 	# TODO: error if bad (or repeated) things in verts
 * 
 * 	def induced_subgraph(self, verts):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns subgraphs induced by verts. Returned flag is always unlabelled.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_57induced_subgraph(PyObject *__pyx_v_self, PyObject *__pyx_v_verts); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_56induced_subgraph[] = "\n\t\tReturns subgraphs induced by verts. Returned flag is always unlabelled.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_57induced_subgraph(PyObject *__pyx_v_self, PyObject *__pyx_v_verts) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("induced_subgraph (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_56induced_subgraph(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_verts));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_56induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts) {
  int __pyx_v_i;
  int *__pyx_v_c_verts;
  int __pyx_v_num_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("induced_subgraph", 0);

  /* "flagmatic/hypergraph_flag.pyx":976
 * 		"""
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":977
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, *c_verts, num_verts
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 977, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":976
 * 		"""
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":981
 * 		cdef int i, *c_verts, num_verts
 * 
 * 		num_verts = len(verts)             # <<<<<<<<<<<<<<
 * 		c_verts = <int *> malloc(num_verts * sizeof(int))
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_verts); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __pyx_v_num_verts = __pyx_t_3;

  /* "flagmatic/hypergraph_flag.pyx":982
 * 
 * 		num_verts = len(verts)
 * 		c_verts = <int *> malloc(num_verts * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(num_verts):
 */
  __pyx_v_c_verts = ((int *)malloc((__pyx_v_num_verts * (sizeof(int)))));

  /* "flagmatic/hypergraph_flag.pyx":984
 * 		c_verts = <int *> malloc(num_verts * sizeof(int))
 * 
 * 		for i in range(num_verts):             # <<<<<<<<<<<<<<
 * 			c_verts[i] = <int ?> verts[i]
 * 
 */
  __pyx_t_4 = __pyx_v_num_verts;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "flagmatic/hypergraph_flag.pyx":985
 * 
 * 		for i in range(num_verts):
 * 			c_verts[i] = <int ?> verts[i]             # <<<<<<<<<<<<<<
 * 
 * 		return self.c_induced_subgraph(c_verts, num_verts)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_verts, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_c_verts[__pyx_v_i]) = ((int)__pyx_t_6);
  }

  /* "flagmatic/hypergraph_flag.pyx":987
 * 			c_verts[i] = <int ?> verts[i]
 * 
 * 		return self.c_induced_subgraph(c_verts, num_verts)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self->__pyx_vtab)->c_induced_subgraph(__pyx_v_self, __pyx_v_c_verts, __pyx_v_num_verts)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":971
 * 	# TODO: error if bad (or repeated) things in verts
 * 
 * 	def induced_subgraph(self, verts):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns subgraphs induced by verts. Returned flag is always unlabelled.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.induced_subgraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":990
 * 
 * 
 * 	cdef HypergraphFlag c_induced_subgraph(self, int *verts, int num_verts):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int nm = 0, i, j, *e, got, te[3]
 */

static struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, int *__pyx_v_verts, int __pyx_v_num_verts) {
  int __pyx_v_nm;
  int __pyx_v_i;
  int __pyx_v_j;
  int *__pyx_v_e;
  int __pyx_v_got;
  int __pyx_v_te[3];
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_ig = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("c_induced_subgraph", 0);

  /* "flagmatic/hypergraph_flag.pyx":992
 * 	cdef HypergraphFlag c_induced_subgraph(self, int *verts, int num_verts):
 * 
 * 		cdef int nm = 0, i, j, *e, got, te[3]             # <<<<<<<<<<<<<<
 * 		cdef HypergraphFlag ig = type(self)()
 * 
 */
  __pyx_v_nm = 0;

  /* "flagmatic/hypergraph_flag.pyx":993
 * 
 * 		cdef int nm = 0, i, j, *e, got, te[3]
 * 		cdef HypergraphFlag ig = type(self)()             # <<<<<<<<<<<<<<
 * 
 * 		if self.is_degenerate:
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_t_2 = ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))); __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag))))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_v_ig = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":995
 * 		cdef HypergraphFlag ig = type(self)()
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_4 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_4) {

    /* "flagmatic/hypergraph_flag.pyx":996
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		ig.n = num_verts
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 996, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":995
 * 		cdef HypergraphFlag ig = type(self)()
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":998
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		ig.n = num_verts             # <<<<<<<<<<<<<<
 * 		ig.r = self._r
 * 		ig.oriented = self._oriented
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_num_verts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_n, __pyx_t_1) < 0) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":999
 * 
 * 		ig.n = num_verts
 * 		ig.r = self._r             # <<<<<<<<<<<<<<
 * 		ig.oriented = self._oriented
 * 		ig.multiplicity = self._multiplicity
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_r, __pyx_t_1) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1000
 * 		ig.n = num_verts
 * 		ig.r = self._r
 * 		ig.oriented = self._oriented             # <<<<<<<<<<<<<<
 * 		ig.multiplicity = self._multiplicity
 * 		ig.t = 0
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_oriented); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_oriented, __pyx_t_1) < 0) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1001
 * 		ig.r = self._r
 * 		ig.oriented = self._oriented
 * 		ig.multiplicity = self._multiplicity             # <<<<<<<<<<<<<<
 * 		ig.t = 0
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_multiplicity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_multiplicity, __pyx_t_1) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1002
 * 		ig.oriented = self._oriented
 * 		ig.multiplicity = self._multiplicity
 * 		ig.t = 0             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_t, __pyx_int_0) < 0) __PYX_ERR(0, 1002, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1004
 * 		ig.t = 0
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(self.ne):
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":1006
 * 		if self._r == 3:
 * 
 * 			for i in range(self.ne):             # <<<<<<<<<<<<<<
 * 				e = &self._edges[3 * i]
 * 				got = 0
 */
    __pyx_t_5 = __pyx_v_self->ne;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "flagmatic/hypergraph_flag.pyx":1007
 * 
 * 			for i in range(self.ne):
 * 				e = &self._edges[3 * i]             # <<<<<<<<<<<<<<
 * 				got = 0
 * 				for j in range(num_verts):
 */
      __pyx_v_e = (&(__pyx_v_self->_edges[(3 * __pyx_v_i)]));

      /* "flagmatic/hypergraph_flag.pyx":1008
 * 			for i in range(self.ne):
 * 				e = &self._edges[3 * i]
 * 				got = 0             # <<<<<<<<<<<<<<
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:
 */
      __pyx_v_got = 0;

      /* "flagmatic/hypergraph_flag.pyx":1009
 * 				e = &self._edges[3 * i]
 * 				got = 0
 * 				for j in range(num_verts):             # <<<<<<<<<<<<<<
 * 					if e[0] == verts[j]:
 * 						got += 1
 */
      __pyx_t_7 = __pyx_v_num_verts;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "flagmatic/hypergraph_flag.pyx":1010
 * 				got = 0
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[0] = j + 1
 */
        __pyx_t_4 = (((__pyx_v_e[0]) == (__pyx_v_verts[__pyx_v_j])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":1011
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:
 * 						got += 1             # <<<<<<<<<<<<<<
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:
 */
          __pyx_v_got = (__pyx_v_got + 1);

          /* "flagmatic/hypergraph_flag.pyx":1012
 * 					if e[0] == verts[j]:
 * 						got += 1
 * 						te[0] = j + 1             # <<<<<<<<<<<<<<
 * 					elif e[1] == verts[j]:
 * 						got += 1
 */
          (__pyx_v_te[0]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1010
 * 				got = 0
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[0] = j + 1
 */
          goto __pyx_L8;
        }

        /* "flagmatic/hypergraph_flag.pyx":1013
 * 						got += 1
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[1] = j + 1
 */
        __pyx_t_4 = (((__pyx_v_e[1]) == (__pyx_v_verts[__pyx_v_j])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":1014
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:
 * 						got += 1             # <<<<<<<<<<<<<<
 * 						te[1] = j + 1
 * 					elif e[2] == verts[j]:
 */
          __pyx_v_got = (__pyx_v_got + 1);

          /* "flagmatic/hypergraph_flag.pyx":1015
 * 					elif e[1] == verts[j]:
 * 						got += 1
 * 						te[1] = j + 1             # <<<<<<<<<<<<<<
 * 					elif e[2] == verts[j]:
 * 						got += 1
 */
          (__pyx_v_te[1]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1013
 * 						got += 1
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[1] = j + 1
 */
          goto __pyx_L8;
        }

        /* "flagmatic/hypergraph_flag.pyx":1016
 * 						got += 1
 * 						te[1] = j + 1
 * 					elif e[2] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[2] = j + 1
 */
        __pyx_t_4 = (((__pyx_v_e[2]) == (__pyx_v_verts[__pyx_v_j])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":1017
 * 						te[1] = j + 1
 * 					elif e[2] == verts[j]:
 * 						got += 1             # <<<<<<<<<<<<<<
 * 						te[2] = j + 1
 * 				if got == 3:
 */
          __pyx_v_got = (__pyx_v_got + 1);

          /* "flagmatic/hypergraph_flag.pyx":1018
 * 					elif e[2] == verts[j]:
 * 						got += 1
 * 						te[2] = j + 1             # <<<<<<<<<<<<<<
 * 				if got == 3:
 * 					e = &ig._edges[3 * nm]
 */
          (__pyx_v_te[2]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1016
 * 						got += 1
 * 						te[1] = j + 1
 * 					elif e[2] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[2] = j + 1
 */
        }
        __pyx_L8:;
      }

      /* "flagmatic/hypergraph_flag.pyx":1019
 * 						got += 1
 * 						te[2] = j + 1
 * 				if got == 3:             # <<<<<<<<<<<<<<
 * 					e = &ig._edges[3 * nm]
 * 					e[0] = te[0]
 */
      __pyx_t_4 = ((__pyx_v_got == 3) != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":1020
 * 						te[2] = j + 1
 * 				if got == 3:
 * 					e = &ig._edges[3 * nm]             # <<<<<<<<<<<<<<
 * 					e[0] = te[0]
 * 					e[1] = te[1]
 */
        __pyx_v_e = (&(__pyx_v_ig->_edges[(3 * __pyx_v_nm)]));

        /* "flagmatic/hypergraph_flag.pyx":1021
 * 				if got == 3:
 * 					e = &ig._edges[3 * nm]
 * 					e[0] = te[0]             # <<<<<<<<<<<<<<
 * 					e[1] = te[1]
 * 					e[2] = te[2]
 */
        (__pyx_v_e[0]) = (__pyx_v_te[0]);

        /* "flagmatic/hypergraph_flag.pyx":1022
 * 					e = &ig._edges[3 * nm]
 * 					e[0] = te[0]
 * 					e[1] = te[1]             # <<<<<<<<<<<<<<
 * 					e[2] = te[2]
 * 					nm += 1
 */
        (__pyx_v_e[1]) = (__pyx_v_te[1]);

        /* "flagmatic/hypergraph_flag.pyx":1023
 * 					e[0] = te[0]
 * 					e[1] = te[1]
 * 					e[2] = te[2]             # <<<<<<<<<<<<<<
 * 					nm += 1
 * 
 */
        (__pyx_v_e[2]) = (__pyx_v_te[2]);

        /* "flagmatic/hypergraph_flag.pyx":1024
 * 					e[1] = te[1]
 * 					e[2] = te[2]
 * 					nm += 1             # <<<<<<<<<<<<<<
 * 
 * 		elif self._r == 2:
 */
        __pyx_v_nm = (__pyx_v_nm + 1);

        /* "flagmatic/hypergraph_flag.pyx":1019
 * 						got += 1
 * 						te[2] = j + 1
 * 				if got == 3:             # <<<<<<<<<<<<<<
 * 					e = &ig._edges[3 * nm]
 * 					e[0] = te[0]
 */
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1004
 * 		ig.t = 0
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(self.ne):
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":1026
 * 					nm += 1
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(self.ne):
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":1028
 * 		elif self._r == 2:
 * 
 * 			for i in range(self.ne):             # <<<<<<<<<<<<<<
 * 				e = &self._edges[2 * i]
 * 				got = 0
 */
    __pyx_t_5 = __pyx_v_self->ne;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "flagmatic/hypergraph_flag.pyx":1029
 * 
 * 			for i in range(self.ne):
 * 				e = &self._edges[2 * i]             # <<<<<<<<<<<<<<
 * 				got = 0
 * 				for j in range(num_verts):
 */
      __pyx_v_e = (&(__pyx_v_self->_edges[(2 * __pyx_v_i)]));

      /* "flagmatic/hypergraph_flag.pyx":1030
 * 			for i in range(self.ne):
 * 				e = &self._edges[2 * i]
 * 				got = 0             # <<<<<<<<<<<<<<
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:
 */
      __pyx_v_got = 0;

      /* "flagmatic/hypergraph_flag.pyx":1031
 * 				e = &self._edges[2 * i]
 * 				got = 0
 * 				for j in range(num_verts):             # <<<<<<<<<<<<<<
 * 					if e[0] == verts[j]:
 * 						got += 1
 */
      __pyx_t_7 = __pyx_v_num_verts;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "flagmatic/hypergraph_flag.pyx":1032
 * 				got = 0
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[0] = j + 1
 */
        __pyx_t_4 = (((__pyx_v_e[0]) == (__pyx_v_verts[__pyx_v_j])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":1033
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:
 * 						got += 1             # <<<<<<<<<<<<<<
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:
 */
          __pyx_v_got = (__pyx_v_got + 1);

          /* "flagmatic/hypergraph_flag.pyx":1034
 * 					if e[0] == verts[j]:
 * 						got += 1
 * 						te[0] = j + 1             # <<<<<<<<<<<<<<
 * 					elif e[1] == verts[j]:
 * 						got += 1
 */
          (__pyx_v_te[0]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1032
 * 				got = 0
 * 				for j in range(num_verts):
 * 					if e[0] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[0] = j + 1
 */
          goto __pyx_L14;
        }

        /* "flagmatic/hypergraph_flag.pyx":1035
 * 						got += 1
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[1] = j + 1
 */
        __pyx_t_4 = (((__pyx_v_e[1]) == (__pyx_v_verts[__pyx_v_j])) != 0);
        if (__pyx_t_4) {

          /* "flagmatic/hypergraph_flag.pyx":1036
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:
 * 						got += 1             # <<<<<<<<<<<<<<
 * 						te[1] = j + 1
 * 				if got == 2:
 */
          __pyx_v_got = (__pyx_v_got + 1);

          /* "flagmatic/hypergraph_flag.pyx":1037
 * 					elif e[1] == verts[j]:
 * 						got += 1
 * 						te[1] = j + 1             # <<<<<<<<<<<<<<
 * 				if got == 2:
 * 					e = &ig._edges[2 * nm]
 */
          (__pyx_v_te[1]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1035
 * 						got += 1
 * 						te[0] = j + 1
 * 					elif e[1] == verts[j]:             # <<<<<<<<<<<<<<
 * 						got += 1
 * 						te[1] = j + 1
 */
        }
        __pyx_L14:;
      }

      /* "flagmatic/hypergraph_flag.pyx":1038
 * 						got += 1
 * 						te[1] = j + 1
 * 				if got == 2:             # <<<<<<<<<<<<<<
 * 					e = &ig._edges[2 * nm]
 * 					e[0] = te[0]
 */
      __pyx_t_4 = ((__pyx_v_got == 2) != 0);
      if (__pyx_t_4) {

        /* "flagmatic/hypergraph_flag.pyx":1039
 * 						te[1] = j + 1
 * 				if got == 2:
 * 					e = &ig._edges[2 * nm]             # <<<<<<<<<<<<<<
 * 					e[0] = te[0]
 * 					e[1] = te[1]
 */
        __pyx_v_e = (&(__pyx_v_ig->_edges[(2 * __pyx_v_nm)]));

        /* "flagmatic/hypergraph_flag.pyx":1040
 * 				if got == 2:
 * 					e = &ig._edges[2 * nm]
 * 					e[0] = te[0]             # <<<<<<<<<<<<<<
 * 					e[1] = te[1]
 * 					nm += 1
 */
        (__pyx_v_e[0]) = (__pyx_v_te[0]);

        /* "flagmatic/hypergraph_flag.pyx":1041
 * 					e = &ig._edges[2 * nm]
 * 					e[0] = te[0]
 * 					e[1] = te[1]             # <<<<<<<<<<<<<<
 * 					nm += 1
 * 
 */
        (__pyx_v_e[1]) = (__pyx_v_te[1]);

        /* "flagmatic/hypergraph_flag.pyx":1042
 * 					e[0] = te[0]
 * 					e[1] = te[1]
 * 					nm += 1             # <<<<<<<<<<<<<<
 * 
 * 		ig.ne = nm
 */
        __pyx_v_nm = (__pyx_v_nm + 1);

        /* "flagmatic/hypergraph_flag.pyx":1038
 * 						got += 1
 * 						te[1] = j + 1
 * 				if got == 2:             # <<<<<<<<<<<<<<
 * 					e = &ig._edges[2 * nm]
 * 					e[0] = te[0]
 */
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1026
 * 					nm += 1
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(self.ne):
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":1044
 * 					nm += 1
 * 
 * 		ig.ne = nm             # <<<<<<<<<<<<<<
 * 		ig.minimize_edges()
 * 		return ig
 */
  __pyx_v_ig->ne = __pyx_v_nm;

  /* "flagmatic/hypergraph_flag.pyx":1045
 * 
 * 		ig.ne = nm
 * 		ig.minimize_edges()             # <<<<<<<<<<<<<<
 * 		return ig
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ig), __pyx_n_s_minimize_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1046
 * 		ig.ne = nm
 * 		ig.minimize_edges()
 * 		return ig             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ig));
  __pyx_r = __pyx_v_ig;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":990
 * 
 * 
 * 	cdef HypergraphFlag c_induced_subgraph(self, int *verts, int num_verts):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int nm = 0, i, j, *e, got, te[3]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.c_induced_subgraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ig);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1049
 * 
 * 
 * 	cdef int c_has_subgraph (self, HypergraphFlag h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Determines if it contains h as a subgraph. Labels are ignored.
 */

static int __pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_has_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_h) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_l;
  int *__pyx_v_p;
  int __pyx_v_np;
  int *__pyx_v_new_edges;
  int *__pyx_v_can_use;
  int __pyx_v_got_all;
  int __pyx_v_got_edge;
  int __pyx_v_got;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("c_has_subgraph", 0);

  /* "flagmatic/hypergraph_flag.pyx":1056
 * 		cdef int i, j, k, l, *p, np, *new_edges, *can_use, got_all, got_edge, got
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1057
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		if self._r != h._r or self._oriented != h._oriented:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1057, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1056
 * 		cdef int i, j, k, l, *p, np, *new_edges, *can_use, got_all, got_edge, got
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1059
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		if self._r != h._r or self._oriented != h._oriented:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_3 = ((__pyx_v_self->_r != __pyx_v_h->_r) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->_oriented != __pyx_v_h->_oriented) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1060
 * 
 * 		if self._r != h._r or self._oriented != h._oriented:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 1060, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1059
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		if self._r != h._r or self._oriented != h._oriented:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1062
 * 			raise ValueError
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)             # <<<<<<<<<<<<<<
 * 		can_use = <int *> malloc (sizeof(int) * self.ne)
 * 
 */
  __pyx_v_new_edges = ((int *)malloc((((sizeof(int)) * __pyx_v_self->_r) * __pyx_v_self->ne)));

  /* "flagmatic/hypergraph_flag.pyx":1063
 * 
 * 		new_edges = <int *> malloc (sizeof(int) * self._r * self.ne)
 * 		can_use = <int *> malloc (sizeof(int) * self.ne)             # <<<<<<<<<<<<<<
 * 
 * 		p = generate_permutations(self._n, &np)
 */
  __pyx_v_can_use = ((int *)malloc(((sizeof(int)) * __pyx_v_self->ne)));

  /* "flagmatic/hypergraph_flag.pyx":1065
 * 		can_use = <int *> malloc (sizeof(int) * self.ne)
 * 
 * 		p = generate_permutations(self._n, &np)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(np):
 */
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_permutations(__pyx_v_self->_n, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1067
 * 		p = generate_permutations(self._n, &np)
 * 
 * 		for i in range(np):             # <<<<<<<<<<<<<<
 * 
 * 			for j in range(self._r * self.ne):
 */
  __pyx_t_4 = __pyx_v_np;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "flagmatic/hypergraph_flag.pyx":1069
 * 		for i in range(np):
 * 
 * 			for j in range(self._r * self.ne):             # <<<<<<<<<<<<<<
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]
 * 
 */
    __pyx_t_6 = (__pyx_v_self->_r * __pyx_v_self->ne);
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "flagmatic/hypergraph_flag.pyx":1070
 * 
 * 			for j in range(self._r * self.ne):
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]             # <<<<<<<<<<<<<<
 * 
 * 			for j in range(self.ne):
 */
      (__pyx_v_new_edges[__pyx_v_j]) = (__pyx_v_p[(((__pyx_v_self->_n * __pyx_v_i) + (__pyx_v_self->_edges[__pyx_v_j])) - 1)]);
    }

    /* "flagmatic/hypergraph_flag.pyx":1072
 * 				new_edges[j] = p[self._n * i + self._edges[j] - 1]
 * 
 * 			for j in range(self.ne):             # <<<<<<<<<<<<<<
 * 				can_use[j] = 1
 * 
 */
    __pyx_t_6 = __pyx_v_self->ne;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "flagmatic/hypergraph_flag.pyx":1073
 * 
 * 			for j in range(self.ne):
 * 				can_use[j] = 1             # <<<<<<<<<<<<<<
 * 
 * 			got_all = 1
 */
      (__pyx_v_can_use[__pyx_v_j]) = 1;
    }

    /* "flagmatic/hypergraph_flag.pyx":1075
 * 				can_use[j] = 1
 * 
 * 			got_all = 1             # <<<<<<<<<<<<<<
 * 			for j in range(h.ne):
 * 				got_edge = 0
 */
    __pyx_v_got_all = 1;

    /* "flagmatic/hypergraph_flag.pyx":1076
 * 
 * 			got_all = 1
 * 			for j in range(h.ne):             # <<<<<<<<<<<<<<
 * 				got_edge = 0
 * 
 */
    __pyx_t_6 = __pyx_v_h->ne;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "flagmatic/hypergraph_flag.pyx":1077
 * 			got_all = 1
 * 			for j in range(h.ne):
 * 				got_edge = 0             # <<<<<<<<<<<<<<
 * 
 * 				if self._r == 3:
 */
      __pyx_v_got_edge = 0;

      /* "flagmatic/hypergraph_flag.pyx":1079
 * 				got_edge = 0
 * 
 * 				if self._r == 3:             # <<<<<<<<<<<<<<
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 */
      switch (__pyx_v_self->_r) {
        case 3:

        /* "flagmatic/hypergraph_flag.pyx":1080
 * 
 * 				if self._r == 3:
 * 					for k in range(self.ne):             # <<<<<<<<<<<<<<
 * 						if can_use[k] == 0:
 * 							continue
 */
        __pyx_t_8 = __pyx_v_self->ne;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_k = __pyx_t_9;

          /* "flagmatic/hypergraph_flag.pyx":1081
 * 				if self._r == 3:
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:             # <<<<<<<<<<<<<<
 * 							continue
 * 						got = 0
 */
          __pyx_t_1 = (((__pyx_v_can_use[__pyx_v_k]) == 0) != 0);
          if (__pyx_t_1) {

            /* "flagmatic/hypergraph_flag.pyx":1082
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 * 							continue             # <<<<<<<<<<<<<<
 * 						got = 0
 * 						for l in range(3):
 */
            goto __pyx_L15_continue;

            /* "flagmatic/hypergraph_flag.pyx":1081
 * 				if self._r == 3:
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:             # <<<<<<<<<<<<<<
 * 							continue
 * 						got = 0
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1083
 * 						if can_use[k] == 0:
 * 							continue
 * 						got = 0             # <<<<<<<<<<<<<<
 * 						for l in range(3):
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or
 */
          __pyx_v_got = 0;

          /* "flagmatic/hypergraph_flag.pyx":1084
 * 							continue
 * 						got = 0
 * 						for l in range(3):             # <<<<<<<<<<<<<<
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 */
          for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
            __pyx_v_l = __pyx_t_10;

            /* "flagmatic/hypergraph_flag.pyx":1085
 * 						got = 0
 * 						for l in range(3):
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or             # <<<<<<<<<<<<<<
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 */
            __pyx_t_3 = (((__pyx_v_h->_edges[(3 * __pyx_v_j)]) == (__pyx_v_new_edges[((3 * __pyx_v_k) + __pyx_v_l)])) != 0);
            if (!__pyx_t_3) {
            } else {
              __pyx_t_1 = __pyx_t_3;
              goto __pyx_L21_bool_binop_done;
            }

            /* "flagmatic/hypergraph_flag.pyx":1086
 * 						for l in range(3):
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or             # <<<<<<<<<<<<<<
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 * 								got += 1
 */
            __pyx_t_3 = (((__pyx_v_h->_edges[((3 * __pyx_v_j) + 1)]) == (__pyx_v_new_edges[((3 * __pyx_v_k) + __pyx_v_l)])) != 0);
            if (!__pyx_t_3) {
            } else {
              __pyx_t_1 = __pyx_t_3;
              goto __pyx_L21_bool_binop_done;
            }

            /* "flagmatic/hypergraph_flag.pyx":1087
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):             # <<<<<<<<<<<<<<
 * 								got += 1
 * 						if got == 3:
 */
            __pyx_t_3 = (((__pyx_v_h->_edges[((3 * __pyx_v_j) + 2)]) == (__pyx_v_new_edges[((3 * __pyx_v_k) + __pyx_v_l)])) != 0);
            __pyx_t_1 = __pyx_t_3;
            __pyx_L21_bool_binop_done:;

            /* "flagmatic/hypergraph_flag.pyx":1085
 * 						got = 0
 * 						for l in range(3):
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or             # <<<<<<<<<<<<<<
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 */
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1088
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 * 								got += 1             # <<<<<<<<<<<<<<
 * 						if got == 3:
 * 							got_edge = 1
 */
              __pyx_v_got = (__pyx_v_got + 1);

              /* "flagmatic/hypergraph_flag.pyx":1085
 * 						got = 0
 * 						for l in range(3):
 * 							if (h._edges[3 * j] == new_edges[(3 * k) + l] or             # <<<<<<<<<<<<<<
 * 								h._edges[(3 * j) + 1] == new_edges[(3 * k) + l] or
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 */
            }
          }

          /* "flagmatic/hypergraph_flag.pyx":1089
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 * 								got += 1
 * 						if got == 3:             # <<<<<<<<<<<<<<
 * 							got_edge = 1
 * 							can_use[k] = 0
 */
          __pyx_t_1 = ((__pyx_v_got == 3) != 0);
          if (__pyx_t_1) {

            /* "flagmatic/hypergraph_flag.pyx":1090
 * 								got += 1
 * 						if got == 3:
 * 							got_edge = 1             # <<<<<<<<<<<<<<
 * 							can_use[k] = 0
 * 							break
 */
            __pyx_v_got_edge = 1;

            /* "flagmatic/hypergraph_flag.pyx":1091
 * 						if got == 3:
 * 							got_edge = 1
 * 							can_use[k] = 0             # <<<<<<<<<<<<<<
 * 							break
 * 					if got_edge == 0:
 */
            (__pyx_v_can_use[__pyx_v_k]) = 0;

            /* "flagmatic/hypergraph_flag.pyx":1092
 * 							got_edge = 1
 * 							can_use[k] = 0
 * 							break             # <<<<<<<<<<<<<<
 * 					if got_edge == 0:
 * 						got_all = 0
 */
            goto __pyx_L16_break;

            /* "flagmatic/hypergraph_flag.pyx":1089
 * 								h._edges[(3 * j) + 2] == new_edges[(3 * k) + l]):
 * 								got += 1
 * 						if got == 3:             # <<<<<<<<<<<<<<
 * 							got_edge = 1
 * 							can_use[k] = 0
 */
          }
          __pyx_L15_continue:;
        }
        __pyx_L16_break:;

        /* "flagmatic/hypergraph_flag.pyx":1093
 * 							can_use[k] = 0
 * 							break
 * 					if got_edge == 0:             # <<<<<<<<<<<<<<
 * 						got_all = 0
 * 						break
 */
        __pyx_t_1 = ((__pyx_v_got_edge == 0) != 0);
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1094
 * 							break
 * 					if got_edge == 0:
 * 						got_all = 0             # <<<<<<<<<<<<<<
 * 						break
 * 
 */
          __pyx_v_got_all = 0;

          /* "flagmatic/hypergraph_flag.pyx":1095
 * 					if got_edge == 0:
 * 						got_all = 0
 * 						break             # <<<<<<<<<<<<<<
 * 
 * 				elif self._r == 2:
 */
          goto __pyx_L14_break;

          /* "flagmatic/hypergraph_flag.pyx":1093
 * 							can_use[k] = 0
 * 							break
 * 					if got_edge == 0:             # <<<<<<<<<<<<<<
 * 						got_all = 0
 * 						break
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1079
 * 				got_edge = 0
 * 
 * 				if self._r == 3:             # <<<<<<<<<<<<<<
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 */
        break;

        /* "flagmatic/hypergraph_flag.pyx":1097
 * 						break
 * 
 * 				elif self._r == 2:             # <<<<<<<<<<<<<<
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 */
        case 2:

        /* "flagmatic/hypergraph_flag.pyx":1098
 * 
 * 				elif self._r == 2:
 * 					for k in range(self.ne):             # <<<<<<<<<<<<<<
 * 						if can_use[k] == 0:
 * 							continue
 */
        __pyx_t_8 = __pyx_v_self->ne;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_k = __pyx_t_9;

          /* "flagmatic/hypergraph_flag.pyx":1099
 * 				elif self._r == 2:
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:             # <<<<<<<<<<<<<<
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]
 */
          __pyx_t_1 = (((__pyx_v_can_use[__pyx_v_k]) == 0) != 0);
          if (__pyx_t_1) {

            /* "flagmatic/hypergraph_flag.pyx":1100
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 * 							continue             # <<<<<<<<<<<<<<
 * 						if (h._edges[2 * j] == new_edges[2 * k]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 */
            goto __pyx_L26_continue;

            /* "flagmatic/hypergraph_flag.pyx":1099
 * 				elif self._r == 2:
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:             # <<<<<<<<<<<<<<
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1101
 * 						if can_use[k] == 0:
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]             # <<<<<<<<<<<<<<
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 */
          __pyx_t_3 = (((__pyx_v_h->_edges[(2 * __pyx_v_j)]) == (__pyx_v_new_edges[(2 * __pyx_v_k)])) != 0);
          if (!__pyx_t_3) {
            goto __pyx_L31_next_or;
          } else {
          }

          /* "flagmatic/hypergraph_flag.pyx":1102
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (             # <<<<<<<<<<<<<<
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k])):
 */
          __pyx_t_3 = (((__pyx_v_h->_edges[((2 * __pyx_v_j) + 1)]) == (__pyx_v_new_edges[((2 * __pyx_v_k) + 1)])) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L30_bool_binop_done;
          }
          __pyx_L31_next_or:;

          /* "flagmatic/hypergraph_flag.pyx":1103
 * 						if (h._edges[2 * j] == new_edges[2 * k]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]             # <<<<<<<<<<<<<<
 * 							and h._edges[2 * j + 1] == new_edges[2 * k])):
 * 							got_edge = 1
 */
          __pyx_t_3 = ((!(__pyx_v_self->_oriented != 0)) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L30_bool_binop_done;
          }

          /* "flagmatic/hypergraph_flag.pyx":1104
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k])):             # <<<<<<<<<<<<<<
 * 							got_edge = 1
 * 							can_use[k] = 0
 */
          __pyx_t_3 = (((__pyx_v_h->_edges[(2 * __pyx_v_j)]) == (__pyx_v_new_edges[((2 * __pyx_v_k) + 1)])) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L30_bool_binop_done;
          }
          __pyx_t_3 = (((__pyx_v_h->_edges[((2 * __pyx_v_j) + 1)]) == (__pyx_v_new_edges[(2 * __pyx_v_k)])) != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L30_bool_binop_done:;

          /* "flagmatic/hypergraph_flag.pyx":1101
 * 						if can_use[k] == 0:
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]             # <<<<<<<<<<<<<<
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 */
          if (__pyx_t_1) {

            /* "flagmatic/hypergraph_flag.pyx":1105
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 * 							and h._edges[2 * j + 1] == new_edges[2 * k])):
 * 							got_edge = 1             # <<<<<<<<<<<<<<
 * 							can_use[k] = 0
 * 							break
 */
            __pyx_v_got_edge = 1;

            /* "flagmatic/hypergraph_flag.pyx":1106
 * 							and h._edges[2 * j + 1] == new_edges[2 * k])):
 * 							got_edge = 1
 * 							can_use[k] = 0             # <<<<<<<<<<<<<<
 * 							break
 * 					if got_edge == 0:
 */
            (__pyx_v_can_use[__pyx_v_k]) = 0;

            /* "flagmatic/hypergraph_flag.pyx":1107
 * 							got_edge = 1
 * 							can_use[k] = 0
 * 							break             # <<<<<<<<<<<<<<
 * 					if got_edge == 0:
 * 						got_all = 0
 */
            goto __pyx_L27_break;

            /* "flagmatic/hypergraph_flag.pyx":1101
 * 						if can_use[k] == 0:
 * 							continue
 * 						if (h._edges[2 * j] == new_edges[2 * k]             # <<<<<<<<<<<<<<
 * 							and h._edges[2 * j + 1] == new_edges[2 * k + 1]) or (
 * 							not self._oriented and (h._edges[2 * j] == new_edges[2 * k + 1]
 */
          }
          __pyx_L26_continue:;
        }
        __pyx_L27_break:;

        /* "flagmatic/hypergraph_flag.pyx":1108
 * 							can_use[k] = 0
 * 							break
 * 					if got_edge == 0:             # <<<<<<<<<<<<<<
 * 						got_all = 0
 * 						break
 */
        __pyx_t_1 = ((__pyx_v_got_edge == 0) != 0);
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1109
 * 							break
 * 					if got_edge == 0:
 * 						got_all = 0             # <<<<<<<<<<<<<<
 * 						break
 * 
 */
          __pyx_v_got_all = 0;

          /* "flagmatic/hypergraph_flag.pyx":1110
 * 					if got_edge == 0:
 * 						got_all = 0
 * 						break             # <<<<<<<<<<<<<<
 * 
 * 			if got_all:
 */
          goto __pyx_L14_break;

          /* "flagmatic/hypergraph_flag.pyx":1108
 * 							can_use[k] = 0
 * 							break
 * 					if got_edge == 0:             # <<<<<<<<<<<<<<
 * 						got_all = 0
 * 						break
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1097
 * 						break
 * 
 * 				elif self._r == 2:             # <<<<<<<<<<<<<<
 * 					for k in range(self.ne):
 * 						if can_use[k] == 0:
 */
        break;
        default: break;
      }
    }
    __pyx_L14_break:;

    /* "flagmatic/hypergraph_flag.pyx":1112
 * 						break
 * 
 * 			if got_all:             # <<<<<<<<<<<<<<
 * 				free(new_edges)
 * 				return 1
 */
    __pyx_t_1 = (__pyx_v_got_all != 0);
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":1113
 * 
 * 			if got_all:
 * 				free(new_edges)             # <<<<<<<<<<<<<<
 * 				return 1
 * 
 */
      free(__pyx_v_new_edges);

      /* "flagmatic/hypergraph_flag.pyx":1114
 * 			if got_all:
 * 				free(new_edges)
 * 				return 1             # <<<<<<<<<<<<<<
 * 
 * 		free(new_edges)
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "flagmatic/hypergraph_flag.pyx":1112
 * 						break
 * 
 * 			if got_all:             # <<<<<<<<<<<<<<
 * 				free(new_edges)
 * 				return 1
 */
    }
  }

  /* "flagmatic/hypergraph_flag.pyx":1116
 * 				return 1
 * 
 * 		free(new_edges)             # <<<<<<<<<<<<<<
 * 		return 0
 * 
 */
  free(__pyx_v_new_edges);

  /* "flagmatic/hypergraph_flag.pyx":1117
 * 
 * 		free(new_edges)
 * 		return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1049
 * 
 * 
 * 	cdef int c_has_subgraph (self, HypergraphFlag h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Determines if it contains h as a subgraph. Labels are ignored.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.HypergraphFlag.c_has_subgraph", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1122
 * 	# TODO: ValueError on invalid forbidden_edge_numbers (currently they are ignored)
 * 
 * 	def has_forbidden_edge_numbers(self, forbidden_edge_numbers, must_have_highest=False):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *c, nc, i, j, k, l, fe, *edges, *e, got, *comb, num_e, max_e, ceiling
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_59has_forbidden_edge_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_59has_forbidden_edge_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_forbidden_edge_numbers = 0;
  PyObject *__pyx_v_must_have_highest = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_forbidden_edge_numbers (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forbidden_edge_numbers,&__pyx_n_s_must_have_highest,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forbidden_edge_numbers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_must_have_highest);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_forbidden_edge_numbers") < 0)) __PYX_ERR(0, 1122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_forbidden_edge_numbers = values[0];
    __pyx_v_must_have_highest = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_forbidden_edge_numbers", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.has_forbidden_edge_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_58has_forbidden_edge_numbers(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_forbidden_edge_numbers, __pyx_v_must_have_highest);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_58has_forbidden_edge_numbers(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_forbidden_edge_numbers, PyObject *__pyx_v_must_have_highest) {
  int *__pyx_v_c;
  int __pyx_v_nc;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_l;
  int *__pyx_v_e;
  int __pyx_v_got;
  int *__pyx_v_comb;
  int __pyx_v_num_e;
  int __pyx_v_max_e;
  int __pyx_v_ceiling;
  PyObject *__pyx_v_forb_k = NULL;
  int *__pyx_v_forbidden_edge_nums;
  PyObject *__pyx_v_pair = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("has_forbidden_edge_numbers", 0);

  /* "flagmatic/hypergraph_flag.pyx":1126
 * 		cdef int *c, nc, i, j, k, l, fe, *edges, *e, got, *comb, num_e, max_e, ceiling
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1127
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		forb_k = [pair[0] for pair in forbidden_edge_numbers]
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1127, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1126
 * 		cdef int *c, nc, i, j, k, l, fe, *edges, *e, got, *comb, num_e, max_e, ceiling
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1129
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		forb_k = [pair[0] for pair in forbidden_edge_numbers]             # <<<<<<<<<<<<<<
 * 
 * 		for k in range(self._r, self._n + 1): # only conditions in this range make sense
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_v_forbidden_edge_numbers)) || PyTuple_CheckExact(__pyx_v_forbidden_edge_numbers)) {
    __pyx_t_3 = __pyx_v_forbidden_edge_numbers; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_forbidden_edge_numbers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1129, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1129, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1129, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1129, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_pair, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_forb_k = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1131
 * 		forb_k = [pair[0] for pair in forbidden_edge_numbers]
 * 
 * 		for k in range(self._r, self._n + 1): # only conditions in this range make sense             # <<<<<<<<<<<<<<
 * 
 * 			if not k in forb_k:
 */
  __pyx_t_7 = (__pyx_v_self->_n + 1);
  for (__pyx_t_8 = __pyx_v_self->_r; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":1133
 * 		for k in range(self._r, self._n + 1): # only conditions in this range make sense
 * 
 * 			if not k in forb_k:             # <<<<<<<<<<<<<<
 * 				continue
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_forb_k, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = (__pyx_t_1 != 0);
    if (__pyx_t_9) {

      /* "flagmatic/hypergraph_flag.pyx":1134
 * 
 * 			if not k in forb_k:
 * 				continue             # <<<<<<<<<<<<<<
 * 
 * 			if self._r == 3:
 */
      goto __pyx_L6_continue;

      /* "flagmatic/hypergraph_flag.pyx":1133
 * 		for k in range(self._r, self._n + 1): # only conditions in this range make sense
 * 
 * 			if not k in forb_k:             # <<<<<<<<<<<<<<
 * 				continue
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":1136
 * 				continue
 * 
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				max_e = k * (k - 1) * (k - 2) / 6
 * 			else:
 */
    __pyx_t_9 = ((__pyx_v_self->_r == 3) != 0);
    if (__pyx_t_9) {

      /* "flagmatic/hypergraph_flag.pyx":1137
 * 
 * 			if self._r == 3:
 * 				max_e = k * (k - 1) * (k - 2) / 6             # <<<<<<<<<<<<<<
 * 			else:
 * 				max_e = k * (k - 1) / 2
 */
      __pyx_v_max_e = __Pyx_div_long(((__pyx_v_k * (__pyx_v_k - 1)) * (__pyx_v_k - 2)), 6);

      /* "flagmatic/hypergraph_flag.pyx":1136
 * 				continue
 * 
 * 			if self._r == 3:             # <<<<<<<<<<<<<<
 * 				max_e = k * (k - 1) * (k - 2) / 6
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "flagmatic/hypergraph_flag.pyx":1139
 * 				max_e = k * (k - 1) * (k - 2) / 6
 * 			else:
 * 				max_e = k * (k - 1) / 2             # <<<<<<<<<<<<<<
 * 
 * 			forbidden_edge_nums = <int *> calloc(max_e + 1, sizeof(int))
 */
    /*else*/ {
      __pyx_v_max_e = __Pyx_div_long((__pyx_v_k * (__pyx_v_k - 1)), 2);
    }
    __pyx_L9:;

    /* "flagmatic/hypergraph_flag.pyx":1141
 * 				max_e = k * (k - 1) / 2
 * 
 * 			forbidden_edge_nums = <int *> calloc(max_e + 1, sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(max_e + 1):
 */
    __pyx_v_forbidden_edge_nums = ((int *)calloc((__pyx_v_max_e + 1), (sizeof(int))));

    /* "flagmatic/hypergraph_flag.pyx":1143
 * 			forbidden_edge_nums = <int *> calloc(max_e + 1, sizeof(int))
 * 
 * 			for i in range(max_e + 1):             # <<<<<<<<<<<<<<
 * 				if (k, i) in forbidden_edge_numbers:
 * 					forbidden_edge_nums[i] = 1
 */
    __pyx_t_10 = (__pyx_v_max_e + 1);
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "flagmatic/hypergraph_flag.pyx":1144
 * 
 * 			for i in range(max_e + 1):
 * 				if (k, i) in forbidden_edge_numbers:             # <<<<<<<<<<<<<<
 * 					forbidden_edge_nums[i] = 1
 * 
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_t_6, __pyx_v_forbidden_edge_numbers, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = (__pyx_t_9 != 0);
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1145
 * 			for i in range(max_e + 1):
 * 				if (k, i) in forbidden_edge_numbers:
 * 					forbidden_edge_nums[i] = 1             # <<<<<<<<<<<<<<
 * 
 * 			ceiling = max_e + 1
 */
        (__pyx_v_forbidden_edge_nums[__pyx_v_i]) = 1;

        /* "flagmatic/hypergraph_flag.pyx":1144
 * 
 * 			for i in range(max_e + 1):
 * 				if (k, i) in forbidden_edge_numbers:             # <<<<<<<<<<<<<<
 * 					forbidden_edge_nums[i] = 1
 * 
 */
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1147
 * 					forbidden_edge_nums[i] = 1
 * 
 * 			ceiling = max_e + 1             # <<<<<<<<<<<<<<
 * 			for i in range(max_e, -1, -1):
 * 				if forbidden_edge_nums[i] == 1:
 */
    __pyx_v_ceiling = (__pyx_v_max_e + 1);

    /* "flagmatic/hypergraph_flag.pyx":1148
 * 
 * 			ceiling = max_e + 1
 * 			for i in range(max_e, -1, -1):             # <<<<<<<<<<<<<<
 * 				if forbidden_edge_nums[i] == 1:
 * 					ceiling = i
 */
    for (__pyx_t_11 = __pyx_v_max_e; __pyx_t_11 > -1L; __pyx_t_11-=1) {
      __pyx_v_i = __pyx_t_11;

      /* "flagmatic/hypergraph_flag.pyx":1149
 * 			ceiling = max_e + 1
 * 			for i in range(max_e, -1, -1):
 * 				if forbidden_edge_nums[i] == 1:             # <<<<<<<<<<<<<<
 * 					ceiling = i
 * 				else:
 */
      __pyx_t_1 = (((__pyx_v_forbidden_edge_nums[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1150
 * 			for i in range(max_e, -1, -1):
 * 				if forbidden_edge_nums[i] == 1:
 * 					ceiling = i             # <<<<<<<<<<<<<<
 * 				else:
 * 					break
 */
        __pyx_v_ceiling = __pyx_v_i;

        /* "flagmatic/hypergraph_flag.pyx":1149
 * 			ceiling = max_e + 1
 * 			for i in range(max_e, -1, -1):
 * 				if forbidden_edge_nums[i] == 1:             # <<<<<<<<<<<<<<
 * 					ceiling = i
 * 				else:
 */
        goto __pyx_L15;
      }

      /* "flagmatic/hypergraph_flag.pyx":1152
 * 					ceiling = i
 * 				else:
 * 					break             # <<<<<<<<<<<<<<
 * 
 * 			if must_have_highest:
 */
      /*else*/ {
        goto __pyx_L14_break;
      }
      __pyx_L15:;
    }
    __pyx_L14_break:;

    /* "flagmatic/hypergraph_flag.pyx":1154
 * 					break
 * 
 * 			if must_have_highest:             # <<<<<<<<<<<<<<
 * 
 * 				c = generate_combinations(self._n - 1, k - 1, &nc)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_must_have_highest); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1154, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":1156
 * 			if must_have_highest:
 * 
 * 				c = generate_combinations(self._n - 1, k - 1, &nc)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(nc):
 */
      __pyx_v_c = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations((__pyx_v_self->_n - 1), (__pyx_v_k - 1), (&__pyx_v_nc));

      /* "flagmatic/hypergraph_flag.pyx":1158
 * 				c = generate_combinations(self._n - 1, k - 1, &nc)
 * 
 * 				for i in range(nc):             # <<<<<<<<<<<<<<
 * 					comb = &c[(k - 1) * i]
 * 					num_e = 0
 */
      __pyx_t_11 = __pyx_v_nc;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1159
 * 
 * 				for i in range(nc):
 * 					comb = &c[(k - 1) * i]             # <<<<<<<<<<<<<<
 * 					num_e = 0
 * 					for j in range(self.ne):
 */
        __pyx_v_comb = (&(__pyx_v_c[((__pyx_v_k - 1) * __pyx_v_i)]));

        /* "flagmatic/hypergraph_flag.pyx":1160
 * 				for i in range(nc):
 * 					comb = &c[(k - 1) * i]
 * 					num_e = 0             # <<<<<<<<<<<<<<
 * 					for j in range(self.ne):
 * 						got = 0
 */
        __pyx_v_num_e = 0;

        /* "flagmatic/hypergraph_flag.pyx":1161
 * 					comb = &c[(k - 1) * i]
 * 					num_e = 0
 * 					for j in range(self.ne):             # <<<<<<<<<<<<<<
 * 						got = 0
 * 						if self._r == 3:
 */
        __pyx_t_13 = __pyx_v_self->ne;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1162
 * 					num_e = 0
 * 					for j in range(self.ne):
 * 						got = 0             # <<<<<<<<<<<<<<
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]
 */
          __pyx_v_got = 0;

          /* "flagmatic/hypergraph_flag.pyx":1163
 * 					for j in range(self.ne):
 * 						got = 0
 * 						if self._r == 3:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[3 * j]
 * 							for l in range(k - 1):
 */
          switch (__pyx_v_self->_r) {
            case 3:

            /* "flagmatic/hypergraph_flag.pyx":1164
 * 						got = 0
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]             # <<<<<<<<<<<<<<
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 */
            __pyx_v_e = (&(__pyx_v_self->_edges[(3 * __pyx_v_j)]));

            /* "flagmatic/hypergraph_flag.pyx":1165
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]
 * 							for l in range(k - 1):             # <<<<<<<<<<<<<<
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 */
            __pyx_t_10 = (__pyx_v_k - 1);
            for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_10; __pyx_t_15+=1) {
              __pyx_v_l = __pyx_t_15;

              /* "flagmatic/hypergraph_flag.pyx":1166
 * 							e = &self._edges[3 * j]
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 */
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[0])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L24_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[1])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L24_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[2])) != 0);
              __pyx_t_1 = __pyx_t_9;
              __pyx_L24_bool_binop_done:;
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1167
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 * 									got += 1
 */
                __pyx_v_got = (__pyx_v_got + 1);

                /* "flagmatic/hypergraph_flag.pyx":1166
 * 							e = &self._edges[3 * j]
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 */
              }
            }

            /* "flagmatic/hypergraph_flag.pyx":1168
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 3:
 */
            __pyx_t_9 = ((__pyx_v_self->_n == (__pyx_v_e[0])) != 0);
            if (!__pyx_t_9) {
            } else {
              __pyx_t_1 = __pyx_t_9;
              goto __pyx_L28_bool_binop_done;
            }
            __pyx_t_9 = ((__pyx_v_self->_n == (__pyx_v_e[1])) != 0);
            if (!__pyx_t_9) {
            } else {
              __pyx_t_1 = __pyx_t_9;
              goto __pyx_L28_bool_binop_done;
            }
            __pyx_t_9 = ((__pyx_v_self->_n == (__pyx_v_e[2])) != 0);
            __pyx_t_1 = __pyx_t_9;
            __pyx_L28_bool_binop_done:;
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1169
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if got == 3:
 * 								num_e += 1
 */
              __pyx_v_got = (__pyx_v_got + 1);

              /* "flagmatic/hypergraph_flag.pyx":1168
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 3:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1170
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 * 									got += 1
 * 							if got == 3:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            __pyx_t_1 = ((__pyx_v_got == 3) != 0);
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1171
 * 									got += 1
 * 							if got == 3:
 * 								num_e += 1             # <<<<<<<<<<<<<<
 * 								if num_e == ceiling:
 * 									return True
 */
              __pyx_v_num_e = (__pyx_v_num_e + 1);

              /* "flagmatic/hypergraph_flag.pyx":1172
 * 							if got == 3:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 						elif self._r == 2:
 */
              __pyx_t_1 = ((__pyx_v_num_e == __pyx_v_ceiling) != 0);
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1173
 * 								num_e += 1
 * 								if num_e == ceiling:
 * 									return True             # <<<<<<<<<<<<<<
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(Py_True);
                __pyx_r = Py_True;
                goto __pyx_L0;

                /* "flagmatic/hypergraph_flag.pyx":1172
 * 							if got == 3:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 						elif self._r == 2:
 */
              }

              /* "flagmatic/hypergraph_flag.pyx":1170
 * 							if self._n == e[0] or self._n == e[1] or self._n == e[2]:
 * 									got += 1
 * 							if got == 3:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1163
 * 					for j in range(self.ne):
 * 						got = 0
 * 						if self._r == 3:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[3 * j]
 * 							for l in range(k - 1):
 */
            break;

            /* "flagmatic/hypergraph_flag.pyx":1174
 * 								if num_e == ceiling:
 * 									return True
 * 						elif self._r == 2:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[2 * j]
 * 							for l in range(k - 1):
 */
            case 2:

            /* "flagmatic/hypergraph_flag.pyx":1175
 * 									return True
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]             # <<<<<<<<<<<<<<
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 */
            __pyx_v_e = (&(__pyx_v_self->_edges[(2 * __pyx_v_j)]));

            /* "flagmatic/hypergraph_flag.pyx":1176
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]
 * 							for l in range(k - 1):             # <<<<<<<<<<<<<<
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 */
            __pyx_t_10 = (__pyx_v_k - 1);
            for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_10; __pyx_t_15+=1) {
              __pyx_v_l = __pyx_t_15;

              /* "flagmatic/hypergraph_flag.pyx":1177
 * 							e = &self._edges[2 * j]
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1]:
 */
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[0])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L36_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[1])) != 0);
              __pyx_t_1 = __pyx_t_9;
              __pyx_L36_bool_binop_done:;
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1178
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if self._n == e[0] or self._n == e[1]:
 * 									got += 1
 */
                __pyx_v_got = (__pyx_v_got + 1);

                /* "flagmatic/hypergraph_flag.pyx":1177
 * 							e = &self._edges[2 * j]
 * 							for l in range(k - 1):
 * 								if comb[l] == e[0] or comb[l] == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1]:
 */
              }
            }

            /* "flagmatic/hypergraph_flag.pyx":1179
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 2:
 */
            __pyx_t_9 = ((__pyx_v_self->_n == (__pyx_v_e[0])) != 0);
            if (!__pyx_t_9) {
            } else {
              __pyx_t_1 = __pyx_t_9;
              goto __pyx_L39_bool_binop_done;
            }
            __pyx_t_9 = ((__pyx_v_self->_n == (__pyx_v_e[1])) != 0);
            __pyx_t_1 = __pyx_t_9;
            __pyx_L39_bool_binop_done:;
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1180
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if got == 2:
 * 								num_e += 1
 */
              __pyx_v_got = (__pyx_v_got + 1);

              /* "flagmatic/hypergraph_flag.pyx":1179
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 * 							if self._n == e[0] or self._n == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 2:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1181
 * 							if self._n == e[0] or self._n == e[1]:
 * 									got += 1
 * 							if got == 2:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            __pyx_t_1 = ((__pyx_v_got == 2) != 0);
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1182
 * 									got += 1
 * 							if got == 2:
 * 								num_e += 1             # <<<<<<<<<<<<<<
 * 								if num_e == ceiling:
 * 									return True
 */
              __pyx_v_num_e = (__pyx_v_num_e + 1);

              /* "flagmatic/hypergraph_flag.pyx":1183
 * 							if got == 2:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 */
              __pyx_t_1 = ((__pyx_v_num_e == __pyx_v_ceiling) != 0);
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1184
 * 								num_e += 1
 * 								if num_e == ceiling:
 * 									return True             # <<<<<<<<<<<<<<
 * 					if forbidden_edge_nums[num_e] == 1:
 * 						return True
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(Py_True);
                __pyx_r = Py_True;
                goto __pyx_L0;

                /* "flagmatic/hypergraph_flag.pyx":1183
 * 							if got == 2:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 */
              }

              /* "flagmatic/hypergraph_flag.pyx":1181
 * 							if self._n == e[0] or self._n == e[1]:
 * 									got += 1
 * 							if got == 2:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1174
 * 								if num_e == ceiling:
 * 									return True
 * 						elif self._r == 2:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[2 * j]
 * 							for l in range(k - 1):
 */
            break;
            default: break;
          }
        }

        /* "flagmatic/hypergraph_flag.pyx":1185
 * 								if num_e == ceiling:
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:             # <<<<<<<<<<<<<<
 * 						return True
 * 
 */
        __pyx_t_1 = (((__pyx_v_forbidden_edge_nums[__pyx_v_num_e]) == 1) != 0);
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1186
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 * 						return True             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_True);
          __pyx_r = Py_True;
          goto __pyx_L0;

          /* "flagmatic/hypergraph_flag.pyx":1185
 * 								if num_e == ceiling:
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:             # <<<<<<<<<<<<<<
 * 						return True
 * 
 */
        }
      }

      /* "flagmatic/hypergraph_flag.pyx":1154
 * 					break
 * 
 * 			if must_have_highest:             # <<<<<<<<<<<<<<
 * 
 * 				c = generate_combinations(self._n - 1, k - 1, &nc)
 */
      goto __pyx_L16;
    }

    /* "flagmatic/hypergraph_flag.pyx":1190
 * 			else:
 * 
 * 				c = generate_combinations(self._n, k, &nc)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(nc):
 */
    /*else*/ {
      __pyx_v_c = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations(__pyx_v_self->_n, __pyx_v_k, (&__pyx_v_nc));

      /* "flagmatic/hypergraph_flag.pyx":1192
 * 				c = generate_combinations(self._n, k, &nc)
 * 
 * 				for i in range(nc):             # <<<<<<<<<<<<<<
 * 					comb = &c[k * i]
 * 					num_e = 0
 */
      __pyx_t_11 = __pyx_v_nc;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1193
 * 
 * 				for i in range(nc):
 * 					comb = &c[k * i]             # <<<<<<<<<<<<<<
 * 					num_e = 0
 * 					for j in range(self.ne):
 */
        __pyx_v_comb = (&(__pyx_v_c[(__pyx_v_k * __pyx_v_i)]));

        /* "flagmatic/hypergraph_flag.pyx":1194
 * 				for i in range(nc):
 * 					comb = &c[k * i]
 * 					num_e = 0             # <<<<<<<<<<<<<<
 * 					for j in range(self.ne):
 * 						got = 0
 */
        __pyx_v_num_e = 0;

        /* "flagmatic/hypergraph_flag.pyx":1195
 * 					comb = &c[k * i]
 * 					num_e = 0
 * 					for j in range(self.ne):             # <<<<<<<<<<<<<<
 * 						got = 0
 * 						if self._r == 3:
 */
        __pyx_t_13 = __pyx_v_self->ne;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1196
 * 					num_e = 0
 * 					for j in range(self.ne):
 * 						got = 0             # <<<<<<<<<<<<<<
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]
 */
          __pyx_v_got = 0;

          /* "flagmatic/hypergraph_flag.pyx":1197
 * 					for j in range(self.ne):
 * 						got = 0
 * 						if self._r == 3:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[3 * j]
 * 							for l in range(k):
 */
          switch (__pyx_v_self->_r) {
            case 3:

            /* "flagmatic/hypergraph_flag.pyx":1198
 * 						got = 0
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]             # <<<<<<<<<<<<<<
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 */
            __pyx_v_e = (&(__pyx_v_self->_edges[(3 * __pyx_v_j)]));

            /* "flagmatic/hypergraph_flag.pyx":1199
 * 						if self._r == 3:
 * 							e = &self._edges[3 * j]
 * 							for l in range(k):             # <<<<<<<<<<<<<<
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 */
            __pyx_t_15 = __pyx_v_k;
            for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
              __pyx_v_l = __pyx_t_16;

              /* "flagmatic/hypergraph_flag.pyx":1200
 * 							e = &self._edges[3 * j]
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 3:
 */
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[0])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L51_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[1])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L51_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[2])) != 0);
              __pyx_t_1 = __pyx_t_9;
              __pyx_L51_bool_binop_done:;
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1201
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if got == 3:
 * 								num_e += 1
 */
                __pyx_v_got = (__pyx_v_got + 1);

                /* "flagmatic/hypergraph_flag.pyx":1200
 * 							e = &self._edges[3 * j]
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 3:
 */
              }
            }

            /* "flagmatic/hypergraph_flag.pyx":1202
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 * 							if got == 3:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            __pyx_t_1 = ((__pyx_v_got == 3) != 0);
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1203
 * 									got += 1
 * 							if got == 3:
 * 								num_e += 1             # <<<<<<<<<<<<<<
 * 								if num_e == ceiling:
 * 									return True
 */
              __pyx_v_num_e = (__pyx_v_num_e + 1);

              /* "flagmatic/hypergraph_flag.pyx":1204
 * 							if got == 3:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 						elif self._r == 2:
 */
              __pyx_t_1 = ((__pyx_v_num_e == __pyx_v_ceiling) != 0);
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1205
 * 								num_e += 1
 * 								if num_e == ceiling:
 * 									return True             # <<<<<<<<<<<<<<
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(Py_True);
                __pyx_r = Py_True;
                goto __pyx_L0;

                /* "flagmatic/hypergraph_flag.pyx":1204
 * 							if got == 3:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 						elif self._r == 2:
 */
              }

              /* "flagmatic/hypergraph_flag.pyx":1202
 * 								if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
 * 									got += 1
 * 							if got == 3:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1197
 * 					for j in range(self.ne):
 * 						got = 0
 * 						if self._r == 3:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[3 * j]
 * 							for l in range(k):
 */
            break;

            /* "flagmatic/hypergraph_flag.pyx":1206
 * 								if num_e == ceiling:
 * 									return True
 * 						elif self._r == 2:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[2 * j]
 * 							for l in range(k):
 */
            case 2:

            /* "flagmatic/hypergraph_flag.pyx":1207
 * 									return True
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]             # <<<<<<<<<<<<<<
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 */
            __pyx_v_e = (&(__pyx_v_self->_edges[(2 * __pyx_v_j)]));

            /* "flagmatic/hypergraph_flag.pyx":1208
 * 						elif self._r == 2:
 * 							e = &self._edges[2 * j]
 * 							for l in range(k):             # <<<<<<<<<<<<<<
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 */
            __pyx_t_15 = __pyx_v_k;
            for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
              __pyx_v_l = __pyx_t_16;

              /* "flagmatic/hypergraph_flag.pyx":1209
 * 							e = &self._edges[2 * j]
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 2:
 */
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[0])) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_1 = __pyx_t_9;
                goto __pyx_L59_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_comb[__pyx_v_l]) == (__pyx_v_e[1])) != 0);
              __pyx_t_1 = __pyx_t_9;
              __pyx_L59_bool_binop_done:;
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1210
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1             # <<<<<<<<<<<<<<
 * 							if got == 2:
 * 								num_e += 1
 */
                __pyx_v_got = (__pyx_v_got + 1);

                /* "flagmatic/hypergraph_flag.pyx":1209
 * 							e = &self._edges[2 * j]
 * 							for l in range(k):
 * 								if comb[l] == e[0] or comb[l] == e[1]:             # <<<<<<<<<<<<<<
 * 									got += 1
 * 							if got == 2:
 */
              }
            }

            /* "flagmatic/hypergraph_flag.pyx":1211
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 * 							if got == 2:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            __pyx_t_1 = ((__pyx_v_got == 2) != 0);
            if (__pyx_t_1) {

              /* "flagmatic/hypergraph_flag.pyx":1212
 * 									got += 1
 * 							if got == 2:
 * 								num_e += 1             # <<<<<<<<<<<<<<
 * 								if num_e == ceiling:
 * 									return True
 */
              __pyx_v_num_e = (__pyx_v_num_e + 1);

              /* "flagmatic/hypergraph_flag.pyx":1213
 * 							if got == 2:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 */
              __pyx_t_1 = ((__pyx_v_num_e == __pyx_v_ceiling) != 0);
              if (__pyx_t_1) {

                /* "flagmatic/hypergraph_flag.pyx":1214
 * 								num_e += 1
 * 								if num_e == ceiling:
 * 									return True             # <<<<<<<<<<<<<<
 * 					if forbidden_edge_nums[num_e] == 1:
 * 						return True
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(Py_True);
                __pyx_r = Py_True;
                goto __pyx_L0;

                /* "flagmatic/hypergraph_flag.pyx":1213
 * 							if got == 2:
 * 								num_e += 1
 * 								if num_e == ceiling:             # <<<<<<<<<<<<<<
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 */
              }

              /* "flagmatic/hypergraph_flag.pyx":1211
 * 								if comb[l] == e[0] or comb[l] == e[1]:
 * 									got += 1
 * 							if got == 2:             # <<<<<<<<<<<<<<
 * 								num_e += 1
 * 								if num_e == ceiling:
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1206
 * 								if num_e == ceiling:
 * 									return True
 * 						elif self._r == 2:             # <<<<<<<<<<<<<<
 * 							e = &self._edges[2 * j]
 * 							for l in range(k):
 */
            break;
            default: break;
          }
        }

        /* "flagmatic/hypergraph_flag.pyx":1215
 * 								if num_e == ceiling:
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:             # <<<<<<<<<<<<<<
 * 						return True
 * 
 */
        __pyx_t_1 = (((__pyx_v_forbidden_edge_nums[__pyx_v_num_e]) == 1) != 0);
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1216
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:
 * 						return True             # <<<<<<<<<<<<<<
 * 
 * 		return False
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_True);
          __pyx_r = Py_True;
          goto __pyx_L0;

          /* "flagmatic/hypergraph_flag.pyx":1215
 * 								if num_e == ceiling:
 * 									return True
 * 					if forbidden_edge_nums[num_e] == 1:             # <<<<<<<<<<<<<<
 * 						return True
 * 
 */
        }
      }
    }
    __pyx_L16:;
    __pyx_L6_continue:;
  }

  /* "flagmatic/hypergraph_flag.pyx":1218
 * 						return True
 * 
 * 		return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1122
 * 	# TODO: ValueError on invalid forbidden_edge_numbers (currently they are ignored)
 * 
 * 	def has_forbidden_edge_numbers(self, forbidden_edge_numbers, must_have_highest=False):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *c, nc, i, j, k, l, fe, *edges, *e, got, *comb, num_e, max_e, ceiling
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.has_forbidden_edge_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_forb_k);
  __Pyx_XDECREF(__pyx_v_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1221
 * 
 * 
 * 	def has_forbidden_graphs(self, graphs, must_have_highest=False, induced=False):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *c, nc, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_61has_forbidden_graphs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_61has_forbidden_graphs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graphs = 0;
  PyObject *__pyx_v_must_have_highest = 0;
  PyObject *__pyx_v_induced = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_forbidden_graphs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graphs,&__pyx_n_s_must_have_highest,&__pyx_n_s_induced,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graphs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_must_have_highest);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_induced);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "has_forbidden_graphs") < 0)) __PYX_ERR(0, 1221, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graphs = values[0];
    __pyx_v_must_have_highest = values[1];
    __pyx_v_induced = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_forbidden_graphs", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1221, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.has_forbidden_graphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_60has_forbidden_graphs(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_graphs, __pyx_v_must_have_highest, __pyx_v_induced);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_60has_forbidden_graphs(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_graphs, PyObject *__pyx_v_must_have_highest, PyObject *__pyx_v_induced) {
  int *__pyx_v_c;
  int __pyx_v_nc;
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_h = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_ig = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("has_forbidden_graphs", 0);

  /* "flagmatic/hypergraph_flag.pyx":1226
 * 		cdef HypergraphFlag h, ig
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->is_degenerate != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1227
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(graphs)):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1227, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1226
 * 		cdef HypergraphFlag h, ig
 * 
 * 		if self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1229
 * 			raise NotImplementedError("degenerate graphs are not supported.")
 * 
 * 		for i in range(len(graphs)):             # <<<<<<<<<<<<<<
 * 
 * 			h = <HypergraphFlag ?> graphs[i]
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_graphs); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "flagmatic/hypergraph_flag.pyx":1231
 * 		for i in range(len(graphs)):
 * 
 * 			h = <HypergraphFlag ?> graphs[i]             # <<<<<<<<<<<<<<
 * 
 * 			if h._n > self._n:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_graphs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag)))) __PYX_ERR(0, 1231, __pyx_L1_error)
    __pyx_t_5 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1233
 * 			h = <HypergraphFlag ?> graphs[i]
 * 
 * 			if h._n > self._n:             # <<<<<<<<<<<<<<
 * 				continue # vacuous condition
 * 
 */
    __pyx_t_1 = ((__pyx_v_h->_n > __pyx_v_self->_n) != 0);
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":1234
 * 
 * 			if h._n > self._n:
 * 				continue # vacuous condition             # <<<<<<<<<<<<<<
 * 
 * 			if must_have_highest:
 */
      goto __pyx_L4_continue;

      /* "flagmatic/hypergraph_flag.pyx":1233
 * 			h = <HypergraphFlag ?> graphs[i]
 * 
 * 			if h._n > self._n:             # <<<<<<<<<<<<<<
 * 				continue # vacuous condition
 * 
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":1236
 * 				continue # vacuous condition
 * 
 * 			if must_have_highest:             # <<<<<<<<<<<<<<
 * 				c = generate_combinations_plus(self._n, h._n, &nc)
 * 			else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_must_have_highest); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1236, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":1237
 * 
 * 			if must_have_highest:
 * 				c = generate_combinations_plus(self._n, h._n, &nc)             # <<<<<<<<<<<<<<
 * 			else:
 * 				c = generate_combinations(self._n, h._n, &nc)
 */
      __pyx_v_c = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations_plus(__pyx_v_self->_n, __pyx_v_h->_n, (&__pyx_v_nc));

      /* "flagmatic/hypergraph_flag.pyx":1236
 * 				continue # vacuous condition
 * 
 * 			if must_have_highest:             # <<<<<<<<<<<<<<
 * 				c = generate_combinations_plus(self._n, h._n, &nc)
 * 			else:
 */
      goto __pyx_L7;
    }

    /* "flagmatic/hypergraph_flag.pyx":1239
 * 				c = generate_combinations_plus(self._n, h._n, &nc)
 * 			else:
 * 				c = generate_combinations(self._n, h._n, &nc)             # <<<<<<<<<<<<<<
 * 
 * 			for j in range(nc):
 */
    /*else*/ {
      __pyx_v_c = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations(__pyx_v_self->_n, __pyx_v_h->_n, (&__pyx_v_nc));
    }
    __pyx_L7:;

    /* "flagmatic/hypergraph_flag.pyx":1241
 * 				c = generate_combinations(self._n, h._n, &nc)
 * 
 * 			for j in range(nc):             # <<<<<<<<<<<<<<
 * 
 * 				ig = self.c_induced_subgraph(&c[j * h._n], h._n)
 */
    __pyx_t_6 = __pyx_v_nc;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "flagmatic/hypergraph_flag.pyx":1243
 * 			for j in range(nc):
 * 
 * 				ig = self.c_induced_subgraph(&c[j * h._n], h._n)             # <<<<<<<<<<<<<<
 * 
 * 				if ig.ne < h.ne:
 */
      __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self->__pyx_vtab)->c_induced_subgraph(__pyx_v_self, (&(__pyx_v_c[(__pyx_v_j * __pyx_v_h->_n)])), __pyx_v_h->_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_ig, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1245
 * 				ig = self.c_induced_subgraph(&c[j * h._n], h._n)
 * 
 * 				if ig.ne < h.ne:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      __pyx_t_1 = ((__pyx_v_ig->ne < __pyx_v_h->ne) != 0);
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1246
 * 
 * 				if ig.ne < h.ne:
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				if induced and ig.ne > h.ne:
 */
        goto __pyx_L8_continue;

        /* "flagmatic/hypergraph_flag.pyx":1245
 * 				ig = self.c_induced_subgraph(&c[j * h._n], h._n)
 * 
 * 				if ig.ne < h.ne:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1248
 * 					continue
 * 
 * 				if induced and ig.ne > h.ne:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_induced); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1248, __pyx_L1_error)
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_ig->ne > __pyx_v_h->ne) != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1249
 * 
 * 				if induced and ig.ne > h.ne:
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				if ig.c_has_subgraph(h):
 */
        goto __pyx_L8_continue;

        /* "flagmatic/hypergraph_flag.pyx":1248
 * 					continue
 * 
 * 				if induced and ig.ne > h.ne:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1251
 * 					continue
 * 
 * 				if ig.c_has_subgraph(h):             # <<<<<<<<<<<<<<
 * 					return True
 * 
 */
      __pyx_t_1 = (((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_ig->__pyx_vtab)->c_has_subgraph(__pyx_v_ig, __pyx_v_h) != 0);
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1252
 * 
 * 				if ig.c_has_subgraph(h):
 * 					return True             # <<<<<<<<<<<<<<
 * 
 * 		return False
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "flagmatic/hypergraph_flag.pyx":1251
 * 					continue
 * 
 * 				if ig.c_has_subgraph(h):             # <<<<<<<<<<<<<<
 * 					return True
 * 
 */
      }
      __pyx_L8_continue:;
    }
    __pyx_L4_continue:;
  }

  /* "flagmatic/hypergraph_flag.pyx":1254
 * 					return True
 * 
 * 		return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1221
 * 
 * 
 * 	def has_forbidden_graphs(self, graphs, must_have_highest=False, induced=False):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *c, nc, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.has_forbidden_graphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF((PyObject *)__pyx_v_ig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1257
 * 
 * 
 * 	def split_vertex (self, x):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the graph obtained by cloning vertex x. Especially useful for
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_63split_vertex(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_62split_vertex[] = "\n\t\tReturns the graph obtained by cloning vertex x. Especially useful for\n\t\tdegenerate graphs. \n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_63split_vertex(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split_vertex (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_62split_vertex(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_62split_vertex(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_v_ng = NULL;
  long __pyx_v_nv;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_le = NULL;
  PyObject *__pyx_v_nle = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("split_vertex", 0);

  /* "flagmatic/hypergraph_flag.pyx":1263
 * 		"""
 * 
 * 		if self._oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = (__pyx_v_self->_oriented != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->is_degenerate != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1264
 * 
 * 		if self._oriented and self.is_degenerate:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if self.multiplicity != 1:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1264, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1263
 * 		"""
 * 
 * 		if self._oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1266
 * 			raise NotImplementedError
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_multiplicity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1267
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if x < 1 or x > self._n:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1267, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1266
 * 			raise NotImplementedError
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1269
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")
 * 
 * 		if x < 1 or x > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_x, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_x, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1270
 * 
 * 		if x < 1 or x > self._n:
 * 			raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		ng = self.__copy__()
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 1270, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1269
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")
 * 
 * 		if x < 1 or x > self._n:             # <<<<<<<<<<<<<<
 * 			raise ValueError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1272
 * 			raise ValueError
 * 
 * 		ng = self.__copy__()             # <<<<<<<<<<<<<<
 * 		ng.n += 1
 * 		nv = self._n + 1
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_ng = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1273
 * 
 * 		ng = self.__copy__()
 * 		ng.n += 1             # <<<<<<<<<<<<<<
 * 		nv = self._n + 1
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_n, __pyx_t_4) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1274
 * 		ng = self.__copy__()
 * 		ng.n += 1
 * 		nv = self._n + 1             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
  __pyx_v_nv = (__pyx_v_self->_n + 1);

  /* "flagmatic/hypergraph_flag.pyx":1276
 * 		nv = self._n + 1
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			for e in self.edges:
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":1278
 * 		if self._r == 3:
 * 
 * 			for e in self.edges:             # <<<<<<<<<<<<<<
 * 
 * 				le = list(e)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1278, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1278, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1278, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1278, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1280
 * 			for e in self.edges:
 * 
 * 				le = list(e)             # <<<<<<<<<<<<<<
 * 				if le.count(x) == 1:
 * 					nle = [y for y in le if y != x]
 */
      __pyx_t_4 = PySequence_List(__pyx_v_e); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_le, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1281
 * 
 * 				le = list(e)
 * 				if le.count(x) == 1:             # <<<<<<<<<<<<<<
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [nv])
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_le, __pyx_n_s_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_x);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1282
 * 				le = list(e)
 * 				if le.count(x) == 1:
 * 					nle = [y for y in le if y != x]             # <<<<<<<<<<<<<<
 * 					ng.add_edge(nle + [nv])
 * 				elif le.count(x) == 2:
 */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_v_le; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
        for (;;) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1282, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1282, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_9 = PyObject_RichCompare(__pyx_v_y, __pyx_v_x, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1282, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1282, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_v_y))) __PYX_ERR(0, 1282, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nle, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1283
 * 				if le.count(x) == 1:
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [nv])             # <<<<<<<<<<<<<<
 * 				elif le.count(x) == 2:
 * 					nle = [y for y in le if y != x]
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Add(__pyx_v_nle, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1283, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1281
 * 
 * 				le = list(e)
 * 				if le.count(x) == 1:             # <<<<<<<<<<<<<<
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [nv])
 */
        goto __pyx_L12;
      }

      /* "flagmatic/hypergraph_flag.pyx":1284
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [nv])
 * 				elif le.count(x) == 2:             # <<<<<<<<<<<<<<
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [x, nv])
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_le, __pyx_n_s_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_x);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1285
 * 					ng.add_edge(nle + [nv])
 * 				elif le.count(x) == 2:
 * 					nle = [y for y in le if y != x]             # <<<<<<<<<<<<<<
 * 					ng.add_edge(nle + [x, nv])
 * 					ng.add_edge(nle + [nv, nv])
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_v_le; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
        for (;;) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1285, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1285, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_9 = PyObject_RichCompare(__pyx_v_y, __pyx_v_x, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1285, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1285, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_y))) __PYX_ERR(0, 1285, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nle, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1286
 * 				elif le.count(x) == 2:
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [x, nv])             # <<<<<<<<<<<<<<
 * 					ng.add_edge(nle + [nv, nv])
 * 				elif le.count(x) == 3:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyList_SET_ITEM(__pyx_t_11, 0, __pyx_v_x);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Add(__pyx_v_nle, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1286, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1287
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [x, nv])
 * 					ng.add_edge(nle + [nv, nv])             # <<<<<<<<<<<<<<
 * 				elif le.count(x) == 3:
 * 					ng.add_edge((x, x, nv))
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Add(__pyx_v_nle, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1287, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1287, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1287, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1284
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [nv])
 * 				elif le.count(x) == 2:             # <<<<<<<<<<<<<<
 * 					nle = [y for y in le if y != x]
 * 					ng.add_edge(nle + [x, nv])
 */
        goto __pyx_L12;
      }

      /* "flagmatic/hypergraph_flag.pyx":1288
 * 					ng.add_edge(nle + [x, nv])
 * 					ng.add_edge(nle + [nv, nv])
 * 				elif le.count(x) == 3:             # <<<<<<<<<<<<<<
 * 					ng.add_edge((x, x, nv))
 * 					ng.add_edge((x, nv, nv))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_le, __pyx_n_s_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_x);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1288, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1289
 * 					ng.add_edge(nle + [nv, nv])
 * 				elif le.count(x) == 3:
 * 					ng.add_edge((x, x, nv))             # <<<<<<<<<<<<<<
 * 					ng.add_edge((x, nv, nv))
 * 					ng.add_edge((nv, nv, nv))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_x);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_9) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1289, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1290
 * 				elif le.count(x) == 3:
 * 					ng.add_edge((x, x, nv))
 * 					ng.add_edge((x, nv, nv))             # <<<<<<<<<<<<<<
 * 					ng.add_edge((nv, nv, nv))
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_x);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
        __pyx_t_11 = 0;
        __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1290, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1290, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1290, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1291
 * 					ng.add_edge((x, x, nv))
 * 					ng.add_edge((x, nv, nv))
 * 					ng.add_edge((nv, nv, nv))             # <<<<<<<<<<<<<<
 * 
 * 		elif self._r == 2:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_8);
        __pyx_t_11 = 0;
        __pyx_t_9 = 0;
        __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1291, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1291, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1288
 * 					ng.add_edge(nle + [x, nv])
 * 					ng.add_edge(nle + [nv, nv])
 * 				elif le.count(x) == 3:             # <<<<<<<<<<<<<<
 * 					ng.add_edge((x, x, nv))
 * 					ng.add_edge((x, nv, nv))
 */
      }
      __pyx_L12:;

      /* "flagmatic/hypergraph_flag.pyx":1278
 * 		if self._r == 3:
 * 
 * 			for e in self.edges:             # <<<<<<<<<<<<<<
 * 
 * 				le = list(e)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1276
 * 		nv = self._n + 1
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 
 * 			for e in self.edges:
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":1293
 * 					ng.add_edge((nv, nv, nv))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			for e in self.edges:
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":1295
 * 		elif self._r == 2:
 * 
 * 			for e in self.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] == x:
 * 					if e[1] == x:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1295, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1296
 * 
 * 			for e in self.edges:
 * 				if e[0] == x:             # <<<<<<<<<<<<<<
 * 					if e[1] == x:
 * 						ng.add_edge((x, nv))
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1297
 * 			for e in self.edges:
 * 				if e[0] == x:
 * 					if e[1] == x:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, nv))
 * 						ng.add_edge((nv, nv))
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1298
 * 				if e[0] == x:
 * 					if e[1] == x:
 * 						ng.add_edge((x, nv))             # <<<<<<<<<<<<<<
 * 						ng.add_edge((nv, nv))
 * 					else:
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (!__pyx_t_9) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1298, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1299
 * 					if e[1] == x:
 * 						ng.add_edge((x, nv))
 * 						ng.add_edge((nv, nv))             # <<<<<<<<<<<<<<
 * 					else:
 * 						ng.add_edge((nv, e[1]))
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
          __pyx_t_8 = 0;
          __pyx_t_12 = 0;
          __pyx_t_12 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (!__pyx_t_12) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1299, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_12); __pyx_t_12 = NULL;
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1297
 * 			for e in self.edges:
 * 				if e[0] == x:
 * 					if e[1] == x:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, nv))
 * 						ng.add_edge((nv, nv))
 */
          goto __pyx_L22;
        }

        /* "flagmatic/hypergraph_flag.pyx":1301
 * 						ng.add_edge((nv, nv))
 * 					else:
 * 						ng.add_edge((nv, e[1]))             # <<<<<<<<<<<<<<
 * 				elif e[1] == x:
 * 					ng.add_edge((e[0], nv))
 */
        /*else*/ {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_9);
          __pyx_t_8 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (!__pyx_t_9) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1301, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_L22:;

        /* "flagmatic/hypergraph_flag.pyx":1296
 * 
 * 			for e in self.edges:
 * 				if e[0] == x:             # <<<<<<<<<<<<<<
 * 					if e[1] == x:
 * 						ng.add_edge((x, nv))
 */
        goto __pyx_L21;
      }

      /* "flagmatic/hypergraph_flag.pyx":1302
 * 					else:
 * 						ng.add_edge((nv, e[1]))
 * 				elif e[1] == x:             # <<<<<<<<<<<<<<
 * 					ng.add_edge((e[0], nv))
 * 
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_1) {

        /* "flagmatic/hypergraph_flag.pyx":1303
 * 						ng.add_edge((nv, e[1]))
 * 				elif e[1] == x:
 * 					ng.add_edge((e[0], nv))             # <<<<<<<<<<<<<<
 * 
 * 		return ng
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_v_nv); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
        __pyx_t_8 = 0;
        __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_12) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1302
 * 					else:
 * 						ng.add_edge((nv, e[1]))
 * 				elif e[1] == x:             # <<<<<<<<<<<<<<
 * 					ng.add_edge((e[0], nv))
 * 
 */
      }
      __pyx_L21:;

      /* "flagmatic/hypergraph_flag.pyx":1295
 * 		elif self._r == 2:
 * 
 * 			for e in self.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] == x:
 * 					if e[1] == x:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1293
 * 					ng.add_edge((nv, nv, nv))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 
 * 			for e in self.edges:
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":1305
 * 					ng.add_edge((e[0], nv))
 * 
 * 		return ng             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ng);
  __pyx_r = __pyx_v_ng;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1257
 * 
 * 
 * 	def split_vertex (self, x):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the graph obtained by cloning vertex x. Especially useful for
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.split_vertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ng);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_le);
  __Pyx_XDECREF(__pyx_v_nle);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1308
 * 
 * 
 * 	def degenerate_induced_subgraph(self, verts):             # <<<<<<<<<<<<<<
 * 
 * 		if self._oriented and self.is_degenerate:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_65degenerate_induced_subgraph(PyObject *__pyx_v_self, PyObject *__pyx_v_verts); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_65degenerate_induced_subgraph(PyObject *__pyx_v_self, PyObject *__pyx_v_verts) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degenerate_induced_subgraph (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_64degenerate_induced_subgraph(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_verts));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_64degenerate_induced_subgraph(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_verts) {
  PyObject *__pyx_v_cg = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_ng = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("degenerate_induced_subgraph", 0);

  /* "flagmatic/hypergraph_flag.pyx":1310
 * 	def degenerate_induced_subgraph(self, verts):
 * 
 * 		if self._oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = (__pyx_v_self->_oriented != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->is_degenerate != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1311
 * 
 * 		if self._oriented and self.is_degenerate:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if self.multiplicity != 1:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1311, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1310
 * 	def degenerate_induced_subgraph(self, verts):
 * 
 * 		if self._oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1313
 * 			raise NotImplementedError
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Multigraphs not supported.")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_multiplicity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1314
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Multigraphs not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		cg = self.__copy__()
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1314, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1313
 * 			raise NotImplementedError
 * 
 * 		if self.multiplicity != 1:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Multigraphs not supported.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1316
 * 			raise NotImplementedError("Multigraphs not supported.")
 * 
 * 		cg = self.__copy__()             # <<<<<<<<<<<<<<
 * 
 * 		# Remove all edges incident with vertices that are not used.
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1316, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cg = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1319
 * 
 * 		# Remove all edges incident with vertices that are not used.
 * 		for v in range(1, cg.n + 1):             # <<<<<<<<<<<<<<
 * 			if not v in verts:
 * 				for e in cg.edges:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1319, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1319, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1319, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1320
 * 		# Remove all edges incident with vertices that are not used.
 * 		for v in range(1, cg.n + 1):
 * 			if not v in verts:             # <<<<<<<<<<<<<<
 * 				for e in cg.edges:
 * 					if v in e:
 */
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_verts, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":1321
 * 		for v in range(1, cg.n + 1):
 * 			if not v in verts:
 * 				for e in cg.edges:             # <<<<<<<<<<<<<<
 * 					if v in e:
 * 						cg.delete_edge(e)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1321, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1321, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1321, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_9(__pyx_t_5);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1321, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1322
 * 			if not v in verts:
 * 				for e in cg.edges:
 * 					if v in e:             # <<<<<<<<<<<<<<
 * 						cg.delete_edge(e)
 * 
 */
        __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_e, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {

          /* "flagmatic/hypergraph_flag.pyx":1323
 * 				for e in cg.edges:
 * 					if v in e:
 * 						cg.delete_edge(e)             # <<<<<<<<<<<<<<
 * 
 * 		vertices = []
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_delete_edge); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1323, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          if (!__pyx_t_11) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_e); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1323, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
            __Pyx_INCREF(__pyx_v_e);
            __Pyx_GIVEREF(__pyx_v_e);
            PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_e);
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1322
 * 			if not v in verts:
 * 				for e in cg.edges:
 * 					if v in e:             # <<<<<<<<<<<<<<
 * 						cg.delete_edge(e)
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1321
 * 		for v in range(1, cg.n + 1):
 * 			if not v in verts:
 * 				for e in cg.edges:             # <<<<<<<<<<<<<<
 * 					if v in e:
 * 						cg.delete_edge(e)
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1320
 * 		# Remove all edges incident with vertices that are not used.
 * 		for v in range(1, cg.n + 1):
 * 			if not v in verts:             # <<<<<<<<<<<<<<
 * 				for e in cg.edges:
 * 					if v in e:
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":1319
 * 
 * 		# Remove all edges incident with vertices that are not used.
 * 		for v in range(1, cg.n + 1):             # <<<<<<<<<<<<<<
 * 			if not v in verts:
 * 				for e in cg.edges:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1325
 * 						cg.delete_edge(e)
 * 
 * 		vertices = []             # <<<<<<<<<<<<<<
 * 		for x in verts:
 * 			if not x in vertices:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_vertices = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1326
 * 
 * 		vertices = []
 * 		for x in verts:             # <<<<<<<<<<<<<<
 * 			if not x in vertices:
 * 				vertices.append(x)
 */
  if (likely(PyList_CheckExact(__pyx_v_verts)) || PyTuple_CheckExact(__pyx_v_verts)) {
    __pyx_t_4 = __pyx_v_verts; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_verts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1326, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1326, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1326, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1326, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1327
 * 		vertices = []
 * 		for x in verts:
 * 			if not x in vertices:             # <<<<<<<<<<<<<<
 * 				vertices.append(x)
 * 			else:
 */
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, __pyx_v_vertices, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "flagmatic/hypergraph_flag.pyx":1328
 * 		for x in verts:
 * 			if not x in vertices:
 * 				vertices.append(x)             # <<<<<<<<<<<<<<
 * 			else:
 * 				cg = cg.split_vertex(x)
 */
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_vertices, __pyx_v_x); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1328, __pyx_L1_error)

      /* "flagmatic/hypergraph_flag.pyx":1327
 * 		vertices = []
 * 		for x in verts:
 * 			if not x in vertices:             # <<<<<<<<<<<<<<
 * 				vertices.append(x)
 * 			else:
 */
      goto __pyx_L15;
    }

    /* "flagmatic/hypergraph_flag.pyx":1330
 * 				vertices.append(x)
 * 			else:
 * 				cg = cg.split_vertex(x)             # <<<<<<<<<<<<<<
 * 				vertices.append(cg.n)
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_split_vertex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_x);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_cg, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1331
 * 			else:
 * 				cg = cg.split_vertex(x)
 * 				vertices.append(cg.n)             # <<<<<<<<<<<<<<
 * 
 * 		ng = type(self)()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_vertices, __pyx_t_5); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_L15:;

    /* "flagmatic/hypergraph_flag.pyx":1326
 * 
 * 		vertices = []
 * 		for x in verts:             # <<<<<<<<<<<<<<
 * 			if not x in vertices:
 * 				vertices.append(x)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1333
 * 				vertices.append(cg.n)
 * 
 * 		ng = type(self)()             # <<<<<<<<<<<<<<
 * 		ng.n = len(vertices)
 * 		ng.r = self._r
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_t_5 = ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))); __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_ng = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1334
 * 
 * 		ng = type(self)()
 * 		ng.n = len(vertices)             # <<<<<<<<<<<<<<
 * 		ng.r = self._r
 * 		ng.oriented = self._oriented
 */
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_vertices); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_n, __pyx_t_4) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1335
 * 		ng = type(self)()
 * 		ng.n = len(vertices)
 * 		ng.r = self._r             # <<<<<<<<<<<<<<
 * 		ng.oriented = self._oriented
 * 		ng.t = 0
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_r, __pyx_t_4) < 0) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1336
 * 		ng.n = len(vertices)
 * 		ng.r = self._r
 * 		ng.oriented = self._oriented             # <<<<<<<<<<<<<<
 * 		ng.t = 0
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->_oriented); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_oriented, __pyx_t_4) < 0) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1337
 * 		ng.r = self._r
 * 		ng.oriented = self._oriented
 * 		ng.t = 0             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ng, __pyx_n_s_t, __pyx_int_0) < 0) __PYX_ERR(0, 1337, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1339
 * 		ng.t = 0
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":1340
 * 
 * 		if self._r == 3:
 * 			for e in cg.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 * 					x = vertices.index(e[0]) + 1
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_edges); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1340, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1340, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1340, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1340, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1341
 * 		if self._r == 3:
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:             # <<<<<<<<<<<<<<
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_vertices, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = (__pyx_t_1 != 0);
      if (__pyx_t_14) {
      } else {
        __pyx_t_2 = __pyx_t_14;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_vertices, Py_EQ)); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = (__pyx_t_14 != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_e, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_vertices, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = (__pyx_t_1 != 0);
      __pyx_t_2 = __pyx_t_14;
      __pyx_L19_bool_binop_done:;
      if (__pyx_t_2) {

        /* "flagmatic/hypergraph_flag.pyx":1342
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 * 					x = vertices.index(e[0]) + 1             # <<<<<<<<<<<<<<
 * 					y = vertices.index(e[1]) + 1
 * 					z = vertices.index(e[2]) + 1
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1343
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1             # <<<<<<<<<<<<<<
 * 					z = vertices.index(e[2]) + 1
 * 					if x != y and x != z and y != z:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1343, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_12) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1343, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1344
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 * 					z = vertices.index(e[2]) + 1             # <<<<<<<<<<<<<<
 * 					if x != y and x != z and y != z:
 * 						ng.add_edge((x, y, z))
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_e, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1345
 * 					y = vertices.index(e[1]) + 1
 * 					z = vertices.index(e[2]) + 1
 * 					if x != y and x != z and y != z:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, y, z))
 * 
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_x, __pyx_v_y, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_14) {
        } else {
          __pyx_t_2 = __pyx_t_14;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_x, __pyx_v_z, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_14) {
        } else {
          __pyx_t_2 = __pyx_t_14;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_y, __pyx_v_z, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_14;
        __pyx_L23_bool_binop_done:;
        if (__pyx_t_2) {

          /* "flagmatic/hypergraph_flag.pyx":1346
 * 					z = vertices.index(e[2]) + 1
 * 					if x != y and x != z and y != z:
 * 						ng.add_edge((x, y, z))             # <<<<<<<<<<<<<<
 * 
 * 		elif self._r == 2:
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_y);
          __Pyx_GIVEREF(__pyx_v_y);
          PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_y);
          __Pyx_INCREF(__pyx_v_z);
          __Pyx_GIVEREF(__pyx_v_z);
          PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_z);
          __pyx_t_10 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (!__pyx_t_10) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1345
 * 					y = vertices.index(e[1]) + 1
 * 					z = vertices.index(e[2]) + 1
 * 					if x != y and x != z and y != z:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, y, z))
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1341
 * 		if self._r == 3:
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:             # <<<<<<<<<<<<<<
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1340
 * 
 * 		if self._r == 3:
 * 			for e in cg.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 * 					x = vertices.index(e[0]) + 1
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1339
 * 		ng.t = 0
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices and e[2] in vertices:
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":1348
 * 						ng.add_edge((x, y, z))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices:
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":1349
 * 
 * 		elif self._r == 2:
 * 			for e in cg.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] in vertices and e[1] in vertices:
 * 					x = vertices.index(e[0]) + 1
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_edges); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1349, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1349, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1349, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1349, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1350
 * 		elif self._r == 2:
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices:             # <<<<<<<<<<<<<<
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_t_5, __pyx_v_vertices, Py_EQ)); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = (__pyx_t_14 != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L29_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_5, __pyx_v_vertices, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_14 = (__pyx_t_1 != 0);
      __pyx_t_2 = __pyx_t_14;
      __pyx_L29_bool_binop_done:;
      if (__pyx_t_2) {

        /* "flagmatic/hypergraph_flag.pyx":1351
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices:
 * 					x = vertices.index(e[0]) + 1             # <<<<<<<<<<<<<<
 * 					y = vertices.index(e[1]) + 1
 * 					if x != y:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_e, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_12) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1351, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1352
 * 				if e[0] in vertices and e[1] in vertices:
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1             # <<<<<<<<<<<<<<
 * 					if x != y:
 * 						ng.add_edge((x, y))
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_e, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1353
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 * 					if x != y:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, y))
 * 
 */
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_x, __pyx_v_y, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1353, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1353, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_2) {

          /* "flagmatic/hypergraph_flag.pyx":1354
 * 					y = vertices.index(e[1]) + 1
 * 					if x != y:
 * 						ng.add_edge((x, y))             # <<<<<<<<<<<<<<
 * 
 * 		ng.minimize_edges()
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1354, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1354, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_y);
          __Pyx_GIVEREF(__pyx_v_y);
          PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_y);
          __pyx_t_10 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (!__pyx_t_10) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1354, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1354, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1354, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1353
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 * 					if x != y:             # <<<<<<<<<<<<<<
 * 						ng.add_edge((x, y))
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1350
 * 		elif self._r == 2:
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices:             # <<<<<<<<<<<<<<
 * 					x = vertices.index(e[0]) + 1
 * 					y = vertices.index(e[1]) + 1
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1349
 * 
 * 		elif self._r == 2:
 * 			for e in cg.edges:             # <<<<<<<<<<<<<<
 * 				if e[0] in vertices and e[1] in vertices:
 * 					x = vertices.index(e[0]) + 1
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1348
 * 						ng.add_edge((x, y, z))
 * 
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 			for e in cg.edges:
 * 				if e[0] in vertices and e[1] in vertices:
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":1356
 * 						ng.add_edge((x, y))
 * 
 * 		ng.minimize_edges()             # <<<<<<<<<<<<<<
 * 		return ng
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ng, __pyx_n_s_minimize_edges); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1357
 * 
 * 		ng.minimize_edges()
 * 		return ng             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ng);
  __pyx_r = __pyx_v_ng;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1308
 * 
 * 
 * 	def degenerate_induced_subgraph(self, verts):             # <<<<<<<<<<<<<<
 * 
 * 		if self._oriented and self.is_degenerate:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degenerate_induced_subgraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_ng);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1360
 * 
 * 
 * 	def degenerate_edge_density(self):             # <<<<<<<<<<<<<<
 * 
 * 		if self._oriented:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_67degenerate_edge_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_67degenerate_edge_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degenerate_edge_density (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_66degenerate_edge_density(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_66degenerate_edge_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("degenerate_edge_density", 0);

  /* "flagmatic/hypergraph_flag.pyx":1362
 * 	def degenerate_edge_density(self):
 * 
 * 		if self._oriented:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_oriented != 0);
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1363
 * 
 * 		if self._oriented:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1363, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1362
 * 	def degenerate_edge_density(self):
 * 
 * 		if self._oriented:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1365
 * 			raise NotImplementedError
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:
 */
  switch (__pyx_v_self->_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":1366
 * 
 * 		if self._r == 3:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))             # <<<<<<<<<<<<<<
 * 		elif self._r == 2:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degenerate_subgraph_density); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":1365
 * 			raise NotImplementedError
 * 
 * 		if self._r == 3:             # <<<<<<<<<<<<<<
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":1367
 * 		if self._r == 3:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))
 * 
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":1368
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degenerate_subgraph_density); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":1367
 * 		if self._r == 3:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:             # <<<<<<<<<<<<<<
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))
 * 
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":1360
 * 
 * 
 * 	def degenerate_edge_density(self):             # <<<<<<<<<<<<<<
 * 
 * 		if self._oriented:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degenerate_edge_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1371
 * 
 * 
 * 	def degenerate_subgraph_density(self, h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the H-density. That is, the number of k-sets of vertices that induce
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_69degenerate_subgraph_density(PyObject *__pyx_v_self, PyObject *__pyx_v_h); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_68degenerate_subgraph_density[] = "\n\t\tReturns the H-density. That is, the number of k-sets of vertices that induce\n\t\tgraphs isomorphic to H, divided by binomial(n, k).\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_69degenerate_subgraph_density(PyObject *__pyx_v_self, PyObject *__pyx_v_h) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degenerate_subgraph_density (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_68degenerate_subgraph_density(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), ((PyObject *)__pyx_v_h));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_68degenerate_subgraph_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_h) {
  PyObject *__pyx_v_found = NULL;
  PyObject *__pyx_v_total = NULL;
  PyObject *__pyx_v_minh = NULL;
  PyObject *__pyx_v_hv = NULL;
  PyObject *__pyx_v_ig = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("degenerate_subgraph_density", 0);

  /* "flagmatic/hypergraph_flag.pyx":1377
 * 		"""
 * 
 * 		if self.oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_oriented); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->is_degenerate != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1378
 * 
 * 		if self.oriented and self.is_degenerate:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if h.is_degenerate:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1378, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1377
 * 		"""
 * 
 * 		if self.oriented and self.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1380
 * 			raise NotImplementedError
 * 
 * 		if h.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_is_degenerate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1381
 * 
 * 		if h.is_degenerate:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		if self.r != h.r:
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1381, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1380
 * 			raise NotImplementedError
 * 
 * 		if h.is_degenerate:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1383
 * 			raise NotImplementedError
 * 
 * 		if self.r != h.r:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "flagmatic/hypergraph_flag.pyx":1384
 * 
 * 		if self.r != h.r:
 * 			raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 		found, total = 0, 0
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 1384, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1383
 * 			raise NotImplementedError
 * 
 * 		if self.r != h.r:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1386
 * 			raise NotImplementedError
 * 
 * 		found, total = 0, 0             # <<<<<<<<<<<<<<
 * 		minh = h.__copy__()
 * 		minh.t = 0
 */
  __pyx_t_5 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_found = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_total = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1387
 * 
 * 		found, total = 0, 0
 * 		minh = h.__copy__()             # <<<<<<<<<<<<<<
 * 		minh.t = 0
 * 		minh.make_minimal_isomorph()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_minh = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1388
 * 		found, total = 0, 0
 * 		minh = h.__copy__()
 * 		minh.t = 0             # <<<<<<<<<<<<<<
 * 		minh.make_minimal_isomorph()
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_minh, __pyx_n_s_t, __pyx_int_0) < 0) __PYX_ERR(0, 1388, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1389
 * 		minh = h.__copy__()
 * 		minh.t = 0
 * 		minh.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 		for hv in Tuples(range(1, self.n + 1), h.n):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_minh, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1391
 * 		minh.make_minimal_isomorph()
 * 
 * 		for hv in Tuples(range(1, self.n + 1), h.n):             # <<<<<<<<<<<<<<
 * 			ig = self.degenerate_induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Tuples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_7) {
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_2);
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1391, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1391, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1391, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1391, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_hv, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1392
 * 
 * 		for hv in Tuples(range(1, self.n + 1), h.n):
 * 			ig = self.degenerate_induced_subgraph(hv)             # <<<<<<<<<<<<<<
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degenerate_induced_subgraph); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_hv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_hv);
      __Pyx_GIVEREF(__pyx_v_hv);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_hv);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ig, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1393
 * 		for hv in Tuples(range(1, self.n + 1), h.n):
 * 			ig = self.degenerate_induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1394
 * 			ig = self.degenerate_induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):             # <<<<<<<<<<<<<<
 * 				found += 1
 * 			total += 1
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_minh, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_ig); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_ig);
      __Pyx_GIVEREF(__pyx_v_ig);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_ig);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "flagmatic/hypergraph_flag.pyx":1395
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1             # <<<<<<<<<<<<<<
 * 			total += 1
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_found, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_found, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1394
 * 			ig = self.degenerate_induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 * 			if minh.is_labelled_isomorphic(ig):             # <<<<<<<<<<<<<<
 * 				found += 1
 * 			total += 1
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":1396
 * 			if minh.is_labelled_isomorphic(ig):
 * 				found += 1
 * 			total += 1             # <<<<<<<<<<<<<<
 * 
 * 		return Integer(found) / total
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_total, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_total, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1391
 * 		minh.make_minimal_isomorph()
 * 
 * 		for hv in Tuples(range(1, self.n + 1), h.n):             # <<<<<<<<<<<<<<
 * 			ig = self.degenerate_induced_subgraph(hv)
 * 			ig.make_minimal_isomorph()
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1398
 * 			total += 1
 * 
 * 		return Integer(found) / total             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Integer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_found); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
    __Pyx_INCREF(__pyx_v_found);
    __Pyx_GIVEREF(__pyx_v_found);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_found);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1371
 * 
 * 
 * 	def degenerate_subgraph_density(self, h):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the H-density. That is, the number of k-sets of vertices that induce
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degenerate_subgraph_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_found);
  __Pyx_XDECREF(__pyx_v_total);
  __Pyx_XDECREF(__pyx_v_minh);
  __Pyx_XDECREF(__pyx_v_hv);
  __Pyx_XDECREF(__pyx_v_ig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1401
 * 
 * 
 * 	def degenerate_flag_density(self, tg, flags, type_verts):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Note that flags must be minimal isomorphs. tg must not contain any labelled vertices.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_71degenerate_flag_density(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_70degenerate_flag_density[] = "\n\t\tNote that flags must be minimal isomorphs. tg must not contain any labelled vertices.\n\t\t";
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_71degenerate_flag_density(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tg = 0;
  PyObject *__pyx_v_flags = 0;
  PyObject *__pyx_v_type_verts = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degenerate_flag_density (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tg,&__pyx_n_s_flags,&__pyx_n_s_type_verts,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("degenerate_flag_density", 1, 3, 3, 1); __PYX_ERR(0, 1401, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("degenerate_flag_density", 1, 3, 3, 2); __PYX_ERR(0, 1401, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "degenerate_flag_density") < 0)) __PYX_ERR(0, 1401, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_tg = values[0];
    __pyx_v_flags = values[1];
    __pyx_v_type_verts = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("degenerate_flag_density", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1401, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degenerate_flag_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_70degenerate_flag_density(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self), __pyx_v_tg, __pyx_v_flags, __pyx_v_type_verts);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_70degenerate_flag_density(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self, PyObject *__pyx_v_tg, PyObject *__pyx_v_flags, PyObject *__pyx_v_type_verts) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_count = NULL;
  PyObject *__pyx_v_total = NULL;
  PyObject *__pyx_v_it = NULL;
  PyObject *__pyx_v_pf = NULL;
  PyObject *__pyx_v_factor = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_ig = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("degenerate_flag_density", 0);

  /* "flagmatic/hypergraph_flag.pyx":1405
 * 		Note that flags must be minimal isomorphs. tg must not contain any labelled vertices.
 * 		"""
 * 		if tg.t != 0:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("type should not contain labelled vertices.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "flagmatic/hypergraph_flag.pyx":1406
 * 		"""
 * 		if tg.t != 0:
 * 			raise NotImplementedError("type should not contain labelled vertices.")             # <<<<<<<<<<<<<<
 * 
 * 		s = tg.n
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1406, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1405
 * 		Note that flags must be minimal isomorphs. tg must not contain any labelled vertices.
 * 		"""
 * 		if tg.t != 0:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("type should not contain labelled vertices.")
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1408
 * 			raise NotImplementedError("type should not contain labelled vertices.")
 * 
 * 		s = tg.n             # <<<<<<<<<<<<<<
 * 		m = flags[0].n	 # TODO: Check all flags are the same size, and are minimal isomorphs
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1409
 * 
 * 		s = tg.n
 * 		m = flags[0].n	 # TODO: Check all flags are the same size, and are minimal isomorphs             # <<<<<<<<<<<<<<
 * 
 * 		count = [0 for i in range(len(flags))]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flags, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_m = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1411
 * 		m = flags[0].n	 # TODO: Check all flags are the same size, and are minimal isomorphs
 * 
 * 		count = [0 for i in range(len(flags))]             # <<<<<<<<<<<<<<
 * 		total = 0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 1411, __pyx_L1_error)
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_int_0))) __PYX_ERR(0, 1411, __pyx_L1_error)
  }
  __pyx_v_count = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1412
 * 
 * 		count = [0 for i in range(len(flags))]
 * 		total = 0             # <<<<<<<<<<<<<<
 * 
 * 		it = self.degenerate_induced_subgraph(type_verts)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_total = __pyx_int_0;

  /* "flagmatic/hypergraph_flag.pyx":1414
 * 		total = 0
 * 
 * 		it = self.degenerate_induced_subgraph(type_verts)             # <<<<<<<<<<<<<<
 * 		if not tg.is_labelled_isomorphic(it):
 * 			return count
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degenerate_induced_subgraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_type_verts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_v_type_verts);
    __Pyx_GIVEREF(__pyx_v_type_verts);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_type_verts);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_it = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1415
 * 
 * 		it = self.degenerate_induced_subgraph(type_verts)
 * 		if not tg.is_labelled_isomorphic(it):             # <<<<<<<<<<<<<<
 * 			return count
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tg, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_it);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "flagmatic/hypergraph_flag.pyx":1416
 * 		it = self.degenerate_induced_subgraph(type_verts)
 * 		if not tg.is_labelled_isomorphic(it):
 * 			return count             # <<<<<<<<<<<<<<
 * 
 * 		# TODO: Work out why UnorderedTuple is slower!
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_count);
    __pyx_r = __pyx_v_count;
    goto __pyx_L0;

    /* "flagmatic/hypergraph_flag.pyx":1415
 * 
 * 		it = self.degenerate_induced_subgraph(type_verts)
 * 		if not tg.is_labelled_isomorphic(it):             # <<<<<<<<<<<<<<
 * 			return count
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1426
 * #				factor /= factorial(pf.count(i))
 * 
 * 		for pf in Tuples(range(1, self.n + 1), m - s):             # <<<<<<<<<<<<<<
 * 			factor = 1
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Tuples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(__pyx_v_m, __pyx_v_s); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_9) {
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_t_6);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1426, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1426, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1426, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1426, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_pf, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1427
 * 
 * 		for pf in Tuples(range(1, self.n + 1), m - s):
 * 			factor = 1             # <<<<<<<<<<<<<<
 * 
 * 			p = list(type_verts) + pf
 */
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_XDECREF_SET(__pyx_v_factor, __pyx_int_1);

    /* "flagmatic/hypergraph_flag.pyx":1429
 * 			factor = 1
 * 
 * 			p = list(type_verts) + pf             # <<<<<<<<<<<<<<
 * 			ig = self.degenerate_induced_subgraph(p)
 * 			ig.t = s
 */
    __pyx_t_1 = PySequence_List(__pyx_v_type_verts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyNumber_Add(__pyx_t_1, __pyx_v_pf); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1430
 * 
 * 			p = list(type_verts) + pf
 * 			ig = self.degenerate_induced_subgraph(p)             # <<<<<<<<<<<<<<
 * 			ig.t = s
 * 			ig.make_minimal_isomorph()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degenerate_induced_subgraph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_p); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_GIVEREF(__pyx_v_p);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_p);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ig, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1431
 * 			p = list(type_verts) + pf
 * 			ig = self.degenerate_induced_subgraph(p)
 * 			ig.t = s             # <<<<<<<<<<<<<<
 * 			ig.make_minimal_isomorph()
 * 			for i in range(len(flags)):
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_ig, __pyx_n_s_t, __pyx_v_s) < 0) __PYX_ERR(0, 1431, __pyx_L1_error)

    /* "flagmatic/hypergraph_flag.pyx":1432
 * 			ig = self.degenerate_induced_subgraph(p)
 * 			ig.t = s
 * 			ig.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 			for i in range(len(flags)):
 * 				if ig.is_labelled_isomorphic(flags[i]):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1432, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1433
 * 			ig.t = s
 * 			ig.make_minimal_isomorph()
 * 			for i in range(len(flags)):             # <<<<<<<<<<<<<<
 * 				if ig.is_labelled_isomorphic(flags[i]):
 * 					count[i] += factor
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1433, __pyx_L1_error)
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_5; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "flagmatic/hypergraph_flag.pyx":1434
 * 			ig.make_minimal_isomorph()
 * 			for i in range(len(flags)):
 * 				if ig.is_labelled_isomorphic(flags[i]):             # <<<<<<<<<<<<<<
 * 					count[i] += factor
 * 					break
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ig, __pyx_n_s_is_labelled_isomorphic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flags, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1434, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_10);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1434, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1434, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_8) {

        /* "flagmatic/hypergraph_flag.pyx":1435
 * 			for i in range(len(flags)):
 * 				if ig.is_labelled_isomorphic(flags[i]):
 * 					count[i] += factor             # <<<<<<<<<<<<<<
 * 					break
 * 
 */
        __pyx_t_13 = __pyx_v_i;
        __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_count, __pyx_t_13, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_10, __pyx_v_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_v_count, __pyx_t_13, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 1435, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1436
 * 				if ig.is_labelled_isomorphic(flags[i]):
 * 					count[i] += factor
 * 					break             # <<<<<<<<<<<<<<
 * 
 * 			total += factor
 */
        goto __pyx_L10_break;

        /* "flagmatic/hypergraph_flag.pyx":1434
 * 			ig.make_minimal_isomorph()
 * 			for i in range(len(flags)):
 * 				if ig.is_labelled_isomorphic(flags[i]):             # <<<<<<<<<<<<<<
 * 					count[i] += factor
 * 					break
 */
      }
    }
    __pyx_L10_break:;

    /* "flagmatic/hypergraph_flag.pyx":1438
 * 					break
 * 
 * 			total += factor             # <<<<<<<<<<<<<<
 * 
 * 		return [Integer(count[i]) / total for i in range(len(flags))]
 */
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_total, __pyx_v_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_total, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1426
 * #				factor /= factorial(pf.count(i))
 * 
 * 		for pf in Tuples(range(1, self.n + 1), m - s):             # <<<<<<<<<<<<<<
 * 			factor = 1
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1440
 * 			total += factor
 * 
 * 		return [Integer(count[i]) / total for i in range(len(flags))]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Length(__pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 1440, __pyx_L1_error)
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_Integer); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_total); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1401
 * 
 * 
 * 	def degenerate_flag_density(self, tg, flags, type_verts):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Note that flags must be minimal isomorphs. tg must not contain any labelled vertices.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.degenerate_flag_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_count);
  __Pyx_XDECREF(__pyx_v_total);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_pf);
  __Pyx_XDECREF(__pyx_v_factor);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ig);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1448
 * 
 * 	@classmethod
 * 	def flag_products (cls, graph_block gb, HypergraphFlag tg, graph_block flags1, graph_block flags2):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *p, np, *pp, *pf1, *pf2, *edges, *cur_edges
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_73flag_products(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_73flag_products(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_tg = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags1 = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flag_products (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gb,&__pyx_n_s_tg,&__pyx_n_s_flags1,&__pyx_n_s_flags2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gb)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flag_products", 1, 4, 4, 1); __PYX_ERR(0, 1448, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flag_products", 1, 4, 4, 2); __PYX_ERR(0, 1448, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flag_products", 1, 4, 4, 3); __PYX_ERR(0, 1448, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flag_products") < 0)) __PYX_ERR(0, 1448, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_gb = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *)values[0]);
    __pyx_v_tg = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)values[1]);
    __pyx_v_flags1 = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *)values[2]);
    __pyx_v_flags2 = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flag_products", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1448, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_products", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gb), __pyx_ptype_9flagmatic_15hypergraph_flag_graph_block, 1, "gb", 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tg), __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, 1, "tg", 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flags1), __pyx_ptype_9flagmatic_15hypergraph_flag_graph_block, 1, "flags1", 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flags2), __pyx_ptype_9flagmatic_15hypergraph_flag_graph_block, 1, "flags2", 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_72flag_products(((PyTypeObject*)__pyx_v_cls), __pyx_v_gb, __pyx_v_tg, __pyx_v_flags1, __pyx_v_flags2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_72flag_products(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_tg, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags1, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_flags2) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int *__pyx_v_pp;
  int *__pyx_v_pf1;
  int *__pyx_v_pf2;
  CYTHON_UNUSED int *__pyx_v_edges;
  int *__pyx_v_cur_edges;
  int __pyx_v_n;
  int __pyx_v_s;
  int __pyx_v_m1;
  int __pyx_v_m2;
  CYTHON_UNUSED int __pyx_v_ne;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_gi;
  int __pyx_v_has_type;
  int __pyx_v_has_f1;
  int __pyx_v_f1index;
  int __pyx_v_f2index;
  int *__pyx_v_grb;
  int __pyx_v_equal_flags_mode;
  int __pyx_v_nzcount;
  int __pyx_v_row;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_g = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_t = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_f1 = 0;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_f2 = 0;
  PyObject *__pyx_v_rarray = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int *__pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("flag_products", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_flags2);

  /* "flagmatic/hypergraph_flag.pyx":1457
 * 		cdef HypergraphFlag g, t, f1, f2
 * 
 * 		rarray = numpy.zeros([0, 5], dtype=numpy.int)             # <<<<<<<<<<<<<<
 * 		row = 0
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rarray = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1458
 * 
 * 		rarray = numpy.zeros([0, 5], dtype=numpy.int)
 * 		row = 0             # <<<<<<<<<<<<<<
 * 
 * 		#sig_on()
 */
  __pyx_v_row = 0;

  /* "flagmatic/hypergraph_flag.pyx":1462
 * 		#sig_on()
 * 
 * 		n = gb.n             # <<<<<<<<<<<<<<
 * 		s = tg.n
 * 		m1 = flags1.n
 */
  __pyx_t_6 = __pyx_v_gb->n;
  __pyx_v_n = __pyx_t_6;

  /* "flagmatic/hypergraph_flag.pyx":1463
 * 
 * 		n = gb.n
 * 		s = tg.n             # <<<<<<<<<<<<<<
 * 		m1 = flags1.n
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tg), __pyx_n_s_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_s = __pyx_t_6;

  /* "flagmatic/hypergraph_flag.pyx":1464
 * 		n = gb.n
 * 		s = tg.n
 * 		m1 = flags1.n             # <<<<<<<<<<<<<<
 * 
 * 		if not flags2 is None:
 */
  __pyx_t_6 = __pyx_v_flags1->n;
  __pyx_v_m1 = __pyx_t_6;

  /* "flagmatic/hypergraph_flag.pyx":1466
 * 		m1 = flags1.n
 * 
 * 		if not flags2 is None:             # <<<<<<<<<<<<<<
 * 
 * 			equal_flags_mode = 0
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_flags2) != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "flagmatic/hypergraph_flag.pyx":1468
 * 		if not flags2 is None:
 * 
 * 			equal_flags_mode = 0             # <<<<<<<<<<<<<<
 * 			m2 = flags2.n
 * 			p = generate_pair_combinations(n, s, m1, m2, &np)
 */
    __pyx_v_equal_flags_mode = 0;

    /* "flagmatic/hypergraph_flag.pyx":1469
 * 
 * 			equal_flags_mode = 0
 * 			m2 = flags2.n             # <<<<<<<<<<<<<<
 * 			p = generate_pair_combinations(n, s, m1, m2, &np)
 * 
 */
    __pyx_t_6 = __pyx_v_flags2->n;
    __pyx_v_m2 = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":1470
 * 			equal_flags_mode = 0
 * 			m2 = flags2.n
 * 			p = generate_pair_combinations(n, s, m1, m2, &np)             # <<<<<<<<<<<<<<
 * 
 * 		else:
 */
    __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_pair_combinations(__pyx_v_n, __pyx_v_s, __pyx_v_m1, __pyx_v_m2, (&__pyx_v_np));

    /* "flagmatic/hypergraph_flag.pyx":1466
 * 		m1 = flags1.n
 * 
 * 		if not flags2 is None:             # <<<<<<<<<<<<<<
 * 
 * 			equal_flags_mode = 0
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1474
 * 		else:
 * 
 * 			equal_flags_mode = 1             # <<<<<<<<<<<<<<
 * 			m2 = flags1.n
 * 			flags2 = flags1
 */
  /*else*/ {
    __pyx_v_equal_flags_mode = 1;

    /* "flagmatic/hypergraph_flag.pyx":1475
 * 
 * 			equal_flags_mode = 1
 * 			m2 = flags1.n             # <<<<<<<<<<<<<<
 * 			flags2 = flags1
 * 			p = generate_equal_pair_combinations(n, s, m1, &np)
 */
    __pyx_t_6 = __pyx_v_flags1->n;
    __pyx_v_m2 = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":1476
 * 			equal_flags_mode = 1
 * 			m2 = flags1.n
 * 			flags2 = flags1             # <<<<<<<<<<<<<<
 * 			p = generate_equal_pair_combinations(n, s, m1, &np)
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_flags1));
    __Pyx_DECREF_SET(__pyx_v_flags2, __pyx_v_flags1);

    /* "flagmatic/hypergraph_flag.pyx":1477
 * 			m2 = flags1.n
 * 			flags2 = flags1
 * 			p = generate_equal_pair_combinations(n, s, m1, &np)             # <<<<<<<<<<<<<<
 * 
 * 		cur_edges = <int *> malloc (sizeof(int) * MAX_NUMBER_OF_EDGE_INTS)
 */
    __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_equal_pair_combinations(__pyx_v_n, __pyx_v_s, __pyx_v_m1, (&__pyx_v_np));
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1479
 * 			p = generate_equal_pair_combinations(n, s, m1, &np)
 * 
 * 		cur_edges = <int *> malloc (sizeof(int) * MAX_NUMBER_OF_EDGE_INTS)             # <<<<<<<<<<<<<<
 * 		pf1 = <int *> malloc (sizeof(int) * m1)
 * 		pf2 = <int *> malloc (sizeof(int) * m2)
 */
  __pyx_v_cur_edges = ((int *)malloc(((sizeof(int)) * 0x100)));

  /* "flagmatic/hypergraph_flag.pyx":1480
 * 
 * 		cur_edges = <int *> malloc (sizeof(int) * MAX_NUMBER_OF_EDGE_INTS)
 * 		pf1 = <int *> malloc (sizeof(int) * m1)             # <<<<<<<<<<<<<<
 * 		pf2 = <int *> malloc (sizeof(int) * m2)
 * 		grb = <int *> malloc (flags1.len * flags2.len * sizeof(int))
 */
  __pyx_v_pf1 = ((int *)malloc(((sizeof(int)) * __pyx_v_m1)));

  /* "flagmatic/hypergraph_flag.pyx":1481
 * 		cur_edges = <int *> malloc (sizeof(int) * MAX_NUMBER_OF_EDGE_INTS)
 * 		pf1 = <int *> malloc (sizeof(int) * m1)
 * 		pf2 = <int *> malloc (sizeof(int) * m2)             # <<<<<<<<<<<<<<
 * 		grb = <int *> malloc (flags1.len * flags2.len * sizeof(int))
 * 
 */
  __pyx_v_pf2 = ((int *)malloc(((sizeof(int)) * __pyx_v_m2)));

  /* "flagmatic/hypergraph_flag.pyx":1482
 * 		pf1 = <int *> malloc (sizeof(int) * m1)
 * 		pf2 = <int *> malloc (sizeof(int) * m2)
 * 		grb = <int *> malloc (flags1.len * flags2.len * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 		for gi in range(gb.len):
 */
  __pyx_v_grb = ((int *)malloc(((__pyx_v_flags1->len * __pyx_v_flags2->len) * (sizeof(int)))));

  /* "flagmatic/hypergraph_flag.pyx":1484
 * 		grb = <int *> malloc (flags1.len * flags2.len * sizeof(int))
 * 
 * 		for gi in range(gb.len):             # <<<<<<<<<<<<<<
 * 
 * 			#sig_on()
 */
  __pyx_t_6 = __pyx_v_gb->len;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_6; __pyx_t_9+=1) {
    __pyx_v_gi = __pyx_t_9;

    /* "flagmatic/hypergraph_flag.pyx":1488
 * 			#sig_on()
 * 
 * 			g = <HypergraphFlag> gb.graphs[gi]             # <<<<<<<<<<<<<<
 * 
 * 			memset(grb, 0, flags1.len * flags2.len * sizeof(int))
 */
    __pyx_t_5 = ((PyObject *)(__pyx_v_gb->graphs[__pyx_v_gi]));
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_g, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1490
 * 			g = <HypergraphFlag> gb.graphs[gi]
 * 
 * 			memset(grb, 0, flags1.len * flags2.len * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 			ne = g.ne
 */
    memset(__pyx_v_grb, 0, ((__pyx_v_flags1->len * __pyx_v_flags2->len) * (sizeof(int))));

    /* "flagmatic/hypergraph_flag.pyx":1492
 * 			memset(grb, 0, flags1.len * flags2.len * sizeof(int))
 * 
 * 			ne = g.ne             # <<<<<<<<<<<<<<
 * 			edges = g._edges
 * 
 */
    __pyx_t_10 = __pyx_v_g->ne;
    __pyx_v_ne = __pyx_t_10;

    /* "flagmatic/hypergraph_flag.pyx":1493
 * 
 * 			ne = g.ne
 * 			edges = g._edges             # <<<<<<<<<<<<<<
 * 
 * 			has_type = 0
 */
    __pyx_t_11 = __pyx_v_g->_edges;
    __pyx_v_edges = __pyx_t_11;

    /* "flagmatic/hypergraph_flag.pyx":1495
 * 			edges = g._edges
 * 
 * 			has_type = 0             # <<<<<<<<<<<<<<
 * 			has_f1 = 0
 * 
 */
    __pyx_v_has_type = 0;

    /* "flagmatic/hypergraph_flag.pyx":1496
 * 
 * 			has_type = 0
 * 			has_f1 = 0             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(np):
 */
    __pyx_v_has_f1 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1498
 * 			has_f1 = 0
 * 
 * 			for i in range(np):             # <<<<<<<<<<<<<<
 * 
 * 				pp = &p[(i * n)]
 */
    __pyx_t_10 = __pyx_v_np;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "flagmatic/hypergraph_flag.pyx":1500
 * 			for i in range(np):
 * 
 * 				pp = &p[(i * n)]             # <<<<<<<<<<<<<<
 * 
 * 				if pp[0] != 0:
 */
      __pyx_v_pp = (&(__pyx_v_p[(__pyx_v_i * __pyx_v_n)]));

      /* "flagmatic/hypergraph_flag.pyx":1502
 * 				pp = &p[(i * n)]
 * 
 * 				if pp[0] != 0:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(s):
 */
      __pyx_t_8 = (((__pyx_v_pp[0]) != 0) != 0);
      if (__pyx_t_8) {

        /* "flagmatic/hypergraph_flag.pyx":1504
 * 				if pp[0] != 0:
 * 
 * 					for j in range(s):             # <<<<<<<<<<<<<<
 * 						pf1[j] = pp[j]
 * 						pf2[j] = pp[j]
 */
        __pyx_t_13 = __pyx_v_s;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1505
 * 
 * 					for j in range(s):
 * 						pf1[j] = pp[j]             # <<<<<<<<<<<<<<
 * 						pf2[j] = pp[j]
 * 
 */
          (__pyx_v_pf1[__pyx_v_j]) = (__pyx_v_pp[__pyx_v_j]);

          /* "flagmatic/hypergraph_flag.pyx":1506
 * 					for j in range(s):
 * 						pf1[j] = pp[j]
 * 						pf2[j] = pp[j]             # <<<<<<<<<<<<<<
 * 
 * 					has_type = 0
 */
          (__pyx_v_pf2[__pyx_v_j]) = (__pyx_v_pp[__pyx_v_j]);
        }

        /* "flagmatic/hypergraph_flag.pyx":1508
 * 						pf2[j] = pp[j]
 * 
 * 					has_type = 0             # <<<<<<<<<<<<<<
 * 					t = g.c_induced_subgraph(pf1, s)
 * 					if tg.is_labelled_isomorphic(t):
 */
        __pyx_v_has_type = 0;

        /* "flagmatic/hypergraph_flag.pyx":1509
 * 
 * 					has_type = 0
 * 					t = g.c_induced_subgraph(pf1, s)             # <<<<<<<<<<<<<<
 * 					if tg.is_labelled_isomorphic(t):
 * 						has_type = 1
 */
        __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_g->__pyx_vtab)->c_induced_subgraph(__pyx_v_g, __pyx_v_pf1, __pyx_v_s)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_t, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1510
 * 					has_type = 0
 * 					t = g.c_induced_subgraph(pf1, s)
 * 					if tg.is_labelled_isomorphic(t):             # <<<<<<<<<<<<<<
 * 						has_type = 1
 * 
 */
        __pyx_t_5 = ((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_tg->__pyx_vtab)->is_labelled_isomorphic(__pyx_v_tg, __pyx_v_t, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1510, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_8) {

          /* "flagmatic/hypergraph_flag.pyx":1511
 * 					t = g.c_induced_subgraph(pf1, s)
 * 					if tg.is_labelled_isomorphic(t):
 * 						has_type = 1             # <<<<<<<<<<<<<<
 * 
 * 				if has_type == 0:
 */
          __pyx_v_has_type = 1;

          /* "flagmatic/hypergraph_flag.pyx":1510
 * 					has_type = 0
 * 					t = g.c_induced_subgraph(pf1, s)
 * 					if tg.is_labelled_isomorphic(t):             # <<<<<<<<<<<<<<
 * 						has_type = 1
 * 
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1502
 * 				pp = &p[(i * n)]
 * 
 * 				if pp[0] != 0:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(s):
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1513
 * 						has_type = 1
 * 
 * 				if has_type == 0:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      __pyx_t_8 = ((__pyx_v_has_type == 0) != 0);
      if (__pyx_t_8) {

        /* "flagmatic/hypergraph_flag.pyx":1514
 * 
 * 				if has_type == 0:
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				if has_type and pp[s] != 0:
 */
        goto __pyx_L6_continue;

        /* "flagmatic/hypergraph_flag.pyx":1513
 * 						has_type = 1
 * 
 * 				if has_type == 0:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1516
 * 					continue
 * 
 * 				if has_type and pp[s] != 0:             # <<<<<<<<<<<<<<
 * 
 * 					has_f1 = 0
 */
      __pyx_t_7 = (__pyx_v_has_type != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_8 = __pyx_t_7;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_7 = (((__pyx_v_pp[__pyx_v_s]) != 0) != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_8) {

        /* "flagmatic/hypergraph_flag.pyx":1518
 * 				if has_type and pp[s] != 0:
 * 
 * 					has_f1 = 0             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(m1 - s):
 */
        __pyx_v_has_f1 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1520
 * 					has_f1 = 0
 * 
 * 					for j in range(m1 - s):             # <<<<<<<<<<<<<<
 * 						pf1[s + j] = pp[s + j]
 * 
 */
        __pyx_t_13 = (__pyx_v_m1 - __pyx_v_s);
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1521
 * 
 * 					for j in range(m1 - s):
 * 						pf1[s + j] = pp[s + j]             # <<<<<<<<<<<<<<
 * 
 * 					f1 = g.c_induced_subgraph(pf1, m1)
 */
          (__pyx_v_pf1[(__pyx_v_s + __pyx_v_j)]) = (__pyx_v_pp[(__pyx_v_s + __pyx_v_j)]);
        }

        /* "flagmatic/hypergraph_flag.pyx":1523
 * 						pf1[s + j] = pp[s + j]
 * 
 * 					f1 = g.c_induced_subgraph(pf1, m1)             # <<<<<<<<<<<<<<
 * 					f1.t = s
 * 					f1.make_minimal_isomorph()
 */
        __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_g->__pyx_vtab)->c_induced_subgraph(__pyx_v_g, __pyx_v_pf1, __pyx_v_m1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1523, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_f1, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1524
 * 
 * 					f1 = g.c_induced_subgraph(pf1, m1)
 * 					f1.t = s             # <<<<<<<<<<<<<<
 * 					f1.make_minimal_isomorph()
 * 
 */
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_f1), __pyx_n_s_t, __pyx_t_5) < 0) __PYX_ERR(0, 1524, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1525
 * 					f1 = g.c_induced_subgraph(pf1, m1)
 * 					f1.t = s
 * 					f1.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(flags1.len):
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_f1), __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (__pyx_t_3) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1525, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1525, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1527
 * 					f1.make_minimal_isomorph()
 * 
 * 					for j in range(flags1.len):             # <<<<<<<<<<<<<<
 * 						if f1.is_labelled_isomorphic(<HypergraphFlag> flags1.graphs[j]):
 * 							has_f1 = 1
 */
        __pyx_t_13 = __pyx_v_flags1->len;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1528
 * 
 * 					for j in range(flags1.len):
 * 						if f1.is_labelled_isomorphic(<HypergraphFlag> flags1.graphs[j]):             # <<<<<<<<<<<<<<
 * 							has_f1 = 1
 * 							f1index = j
 */
          __pyx_t_5 = ((PyObject *)(__pyx_v_flags1->graphs[__pyx_v_j]));
          __Pyx_INCREF(__pyx_t_5);
          __pyx_t_1 = ((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_f1->__pyx_vtab)->is_labelled_isomorphic(__pyx_v_f1, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_5), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1528, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_8) {

            /* "flagmatic/hypergraph_flag.pyx":1529
 * 					for j in range(flags1.len):
 * 						if f1.is_labelled_isomorphic(<HypergraphFlag> flags1.graphs[j]):
 * 							has_f1 = 1             # <<<<<<<<<<<<<<
 * 							f1index = j
 * 							break
 */
            __pyx_v_has_f1 = 1;

            /* "flagmatic/hypergraph_flag.pyx":1530
 * 						if f1.is_labelled_isomorphic(<HypergraphFlag> flags1.graphs[j]):
 * 							has_f1 = 1
 * 							f1index = j             # <<<<<<<<<<<<<<
 * 							break
 * 
 */
            __pyx_v_f1index = __pyx_v_j;

            /* "flagmatic/hypergraph_flag.pyx":1531
 * 							has_f1 = 1
 * 							f1index = j
 * 							break             # <<<<<<<<<<<<<<
 * 
 * 				if has_f1 == 0:
 */
            goto __pyx_L19_break;

            /* "flagmatic/hypergraph_flag.pyx":1528
 * 
 * 					for j in range(flags1.len):
 * 						if f1.is_labelled_isomorphic(<HypergraphFlag> flags1.graphs[j]):             # <<<<<<<<<<<<<<
 * 							has_f1 = 1
 * 							f1index = j
 */
          }
        }
        __pyx_L19_break:;

        /* "flagmatic/hypergraph_flag.pyx":1516
 * 					continue
 * 
 * 				if has_type and pp[s] != 0:             # <<<<<<<<<<<<<<
 * 
 * 					has_f1 = 0
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1533
 * 							break
 * 
 * 				if has_f1 == 0:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      __pyx_t_8 = ((__pyx_v_has_f1 == 0) != 0);
      if (__pyx_t_8) {

        /* "flagmatic/hypergraph_flag.pyx":1534
 * 
 * 				if has_f1 == 0:
 * 					continue             # <<<<<<<<<<<<<<
 * 
 * 				for j in range(m2 - s):
 */
        goto __pyx_L6_continue;

        /* "flagmatic/hypergraph_flag.pyx":1533
 * 							break
 * 
 * 				if has_f1 == 0:             # <<<<<<<<<<<<<<
 * 					continue
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1536
 * 					continue
 * 
 * 				for j in range(m2 - s):             # <<<<<<<<<<<<<<
 * 					pf2[s + j] = pp[m1 + j]
 * 
 */
      __pyx_t_13 = (__pyx_v_m2 - __pyx_v_s);
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_j = __pyx_t_14;

        /* "flagmatic/hypergraph_flag.pyx":1537
 * 
 * 				for j in range(m2 - s):
 * 					pf2[s + j] = pp[m1 + j]             # <<<<<<<<<<<<<<
 * 
 * 				f2 = g.c_induced_subgraph(pf2, m2)
 */
        (__pyx_v_pf2[(__pyx_v_s + __pyx_v_j)]) = (__pyx_v_pp[(__pyx_v_m1 + __pyx_v_j)]);
      }

      /* "flagmatic/hypergraph_flag.pyx":1539
 * 					pf2[s + j] = pp[m1 + j]
 * 
 * 				f2 = g.c_induced_subgraph(pf2, m2)             # <<<<<<<<<<<<<<
 * 				f2.t = s
 * 				f2.make_minimal_isomorph()
 */
      __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_g->__pyx_vtab)->c_induced_subgraph(__pyx_v_g, __pyx_v_pf2, __pyx_v_m2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_f2, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1540
 * 
 * 				f2 = g.c_induced_subgraph(pf2, m2)
 * 				f2.t = s             # <<<<<<<<<<<<<<
 * 				f2.make_minimal_isomorph()
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_f2), __pyx_n_s_t, __pyx_t_1) < 0) __PYX_ERR(0, 1540, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1541
 * 				f2 = g.c_induced_subgraph(pf2, m2)
 * 				f2.t = s
 * 				f2.make_minimal_isomorph()             # <<<<<<<<<<<<<<
 * 
 * 				for j in range(flags2.len):
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_f2), __pyx_n_s_make_minimal_isomorph); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1543
 * 				f2.make_minimal_isomorph()
 * 
 * 				for j in range(flags2.len):             # <<<<<<<<<<<<<<
 * 					if f2.is_labelled_isomorphic(<HypergraphFlag> flags2.graphs[j]):
 * 						f2index = j
 */
      __pyx_t_13 = __pyx_v_flags2->len;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_j = __pyx_t_14;

        /* "flagmatic/hypergraph_flag.pyx":1544
 * 
 * 				for j in range(flags2.len):
 * 					if f2.is_labelled_isomorphic(<HypergraphFlag> flags2.graphs[j]):             # <<<<<<<<<<<<<<
 * 						f2index = j
 * 						grb[(f1index * flags1.len) + f2index] += 1
 */
        __pyx_t_1 = ((PyObject *)(__pyx_v_flags2->graphs[__pyx_v_j]));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = ((struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_f2->__pyx_vtab)->is_labelled_isomorphic(__pyx_v_f2, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_1), 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1544, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_8) {

          /* "flagmatic/hypergraph_flag.pyx":1545
 * 				for j in range(flags2.len):
 * 					if f2.is_labelled_isomorphic(<HypergraphFlag> flags2.graphs[j]):
 * 						f2index = j             # <<<<<<<<<<<<<<
 * 						grb[(f1index * flags1.len) + f2index] += 1
 * 						break
 */
          __pyx_v_f2index = __pyx_v_j;

          /* "flagmatic/hypergraph_flag.pyx":1546
 * 					if f2.is_labelled_isomorphic(<HypergraphFlag> flags2.graphs[j]):
 * 						f2index = j
 * 						grb[(f1index * flags1.len) + f2index] += 1             # <<<<<<<<<<<<<<
 * 						break
 * 
 */
          __pyx_t_15 = ((__pyx_v_f1index * __pyx_v_flags1->len) + __pyx_v_f2index);
          (__pyx_v_grb[__pyx_t_15]) = ((__pyx_v_grb[__pyx_t_15]) + 1);

          /* "flagmatic/hypergraph_flag.pyx":1547
 * 						f2index = j
 * 						grb[(f1index * flags1.len) + f2index] += 1
 * 						break             # <<<<<<<<<<<<<<
 * 
 * 			if equal_flags_mode:
 */
          goto __pyx_L25_break;

          /* "flagmatic/hypergraph_flag.pyx":1544
 * 
 * 				for j in range(flags2.len):
 * 					if f2.is_labelled_isomorphic(<HypergraphFlag> flags2.graphs[j]):             # <<<<<<<<<<<<<<
 * 						f2index = j
 * 						grb[(f1index * flags1.len) + f2index] += 1
 */
        }
      }
      __pyx_L25_break:;
      __pyx_L6_continue:;
    }

    /* "flagmatic/hypergraph_flag.pyx":1549
 * 						break
 * 
 * 			if equal_flags_mode:             # <<<<<<<<<<<<<<
 * 
 * 				nzcount = 0
 */
    __pyx_t_8 = (__pyx_v_equal_flags_mode != 0);
    if (__pyx_t_8) {

      /* "flagmatic/hypergraph_flag.pyx":1551
 * 			if equal_flags_mode:
 * 
 * 				nzcount = 0             # <<<<<<<<<<<<<<
 * 				for i in range(flags1.len):
 * 					for j in range(i, flags1.len):
 */
      __pyx_v_nzcount = 0;

      /* "flagmatic/hypergraph_flag.pyx":1552
 * 
 * 				nzcount = 0
 * 				for i in range(flags1.len):             # <<<<<<<<<<<<<<
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 */
      __pyx_t_10 = __pyx_v_flags1->len;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1553
 * 				nzcount = 0
 * 				for i in range(flags1.len):
 * 					for j in range(i, flags1.len):             # <<<<<<<<<<<<<<
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:
 */
        __pyx_t_13 = __pyx_v_flags1->len;
        for (__pyx_t_14 = __pyx_v_i; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1554
 * 				for i in range(flags1.len):
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]             # <<<<<<<<<<<<<<
 * 						if k != 0:
 * 							nzcount += 1
 */
          __pyx_v_k = ((__pyx_v_grb[((__pyx_v_i * __pyx_v_flags1->len) + __pyx_v_j)]) + (__pyx_v_grb[((__pyx_v_j * __pyx_v_flags1->len) + __pyx_v_i)]));

          /* "flagmatic/hypergraph_flag.pyx":1555
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							nzcount += 1
 * 
 */
          __pyx_t_8 = ((__pyx_v_k != 0) != 0);
          if (__pyx_t_8) {

            /* "flagmatic/hypergraph_flag.pyx":1556
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:
 * 							nzcount += 1             # <<<<<<<<<<<<<<
 * 
 * 				rarray.resize([row + nzcount, 5], refcheck=False)
 */
            __pyx_v_nzcount = (__pyx_v_nzcount + 1);

            /* "flagmatic/hypergraph_flag.pyx":1555
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							nzcount += 1
 * 
 */
          }
        }
      }

      /* "flagmatic/hypergraph_flag.pyx":1558
 * 							nzcount += 1
 * 
 * 				rarray.resize([row + nzcount, 5], refcheck=False)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(flags1.len):
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rarray, __pyx_n_s_resize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_row + __pyx_v_nzcount)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_5);
      __Pyx_GIVEREF(__pyx_int_5);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_5);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1558, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1560
 * 				rarray.resize([row + nzcount, 5], refcheck=False)
 * 
 * 				for i in range(flags1.len):             # <<<<<<<<<<<<<<
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 */
      __pyx_t_10 = __pyx_v_flags1->len;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1561
 * 
 * 				for i in range(flags1.len):
 * 					for j in range(i, flags1.len):             # <<<<<<<<<<<<<<
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:
 */
        __pyx_t_13 = __pyx_v_flags1->len;
        for (__pyx_t_14 = __pyx_v_i; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1562
 * 				for i in range(flags1.len):
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]             # <<<<<<<<<<<<<<
 * 						if k != 0:
 * 							rarray[row, 0] = gi
 */
          __pyx_v_k = ((__pyx_v_grb[((__pyx_v_i * __pyx_v_flags1->len) + __pyx_v_j)]) + (__pyx_v_grb[((__pyx_v_j * __pyx_v_flags1->len) + __pyx_v_i)]));

          /* "flagmatic/hypergraph_flag.pyx":1563
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 */
          __pyx_t_8 = ((__pyx_v_k != 0) != 0);
          if (__pyx_t_8) {

            /* "flagmatic/hypergraph_flag.pyx":1564
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:
 * 							rarray[row, 0] = gi             # <<<<<<<<<<<<<<
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_gi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_GIVEREF(__pyx_int_0);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_2) < 0)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1565
 * 						if k != 0:
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i             # <<<<<<<<<<<<<<
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1565, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
            __Pyx_INCREF(__pyx_int_1);
            __Pyx_GIVEREF(__pyx_int_1);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
            __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_3, __pyx_t_2) < 0)) __PYX_ERR(0, 1565, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1566
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j             # <<<<<<<<<<<<<<
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np * 2
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1566, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_2);
            __Pyx_GIVEREF(__pyx_int_2);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_2) < 0)) __PYX_ERR(0, 1566, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1567
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k             # <<<<<<<<<<<<<<
 * 							rarray[row, 4] = np * 2
 * 							row += 1
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1567, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1567, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1567, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
            __Pyx_INCREF(__pyx_int_3);
            __Pyx_GIVEREF(__pyx_int_3);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
            __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_3, __pyx_t_2) < 0)) __PYX_ERR(0, 1567, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1568
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np * 2             # <<<<<<<<<<<<<<
 * 							row += 1
 * 
 */
            __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_np * 2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1568, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1568, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1568, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_4);
            __Pyx_GIVEREF(__pyx_int_4);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_4);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_2) < 0)) __PYX_ERR(0, 1568, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1569
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np * 2
 * 							row += 1             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
            __pyx_v_row = (__pyx_v_row + 1);

            /* "flagmatic/hypergraph_flag.pyx":1563
 * 					for j in range(i, flags1.len):
 * 						k = grb[(i * flags1.len) + j] + grb[(j * flags1.len) + i]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 */
          }
        }
      }

      /* "flagmatic/hypergraph_flag.pyx":1549
 * 						break
 * 
 * 			if equal_flags_mode:             # <<<<<<<<<<<<<<
 * 
 * 				nzcount = 0
 */
      goto __pyx_L27;
    }

    /* "flagmatic/hypergraph_flag.pyx":1573
 * 			else:
 * 
 * 				nzcount = 0             # <<<<<<<<<<<<<<
 * 				for i in range(flags1.len):
 * 					for j in range(flags2.len):
 */
    /*else*/ {
      __pyx_v_nzcount = 0;

      /* "flagmatic/hypergraph_flag.pyx":1574
 * 
 * 				nzcount = 0
 * 				for i in range(flags1.len):             # <<<<<<<<<<<<<<
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 */
      __pyx_t_10 = __pyx_v_flags1->len;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1575
 * 				nzcount = 0
 * 				for i in range(flags1.len):
 * 					for j in range(flags2.len):             # <<<<<<<<<<<<<<
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:
 */
        __pyx_t_13 = __pyx_v_flags2->len;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1576
 * 				for i in range(flags1.len):
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]             # <<<<<<<<<<<<<<
 * 						if k != 0:
 * 							nzcount += 1
 */
          __pyx_v_k = (__pyx_v_grb[((__pyx_v_i * __pyx_v_flags1->len) + __pyx_v_j)]);

          /* "flagmatic/hypergraph_flag.pyx":1577
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							nzcount += 1
 * 
 */
          __pyx_t_8 = ((__pyx_v_k != 0) != 0);
          if (__pyx_t_8) {

            /* "flagmatic/hypergraph_flag.pyx":1578
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:
 * 							nzcount += 1             # <<<<<<<<<<<<<<
 * 
 * 				rarray.resize([row + nzcount, 5], refcheck=False)
 */
            __pyx_v_nzcount = (__pyx_v_nzcount + 1);

            /* "flagmatic/hypergraph_flag.pyx":1577
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							nzcount += 1
 * 
 */
          }
        }
      }

      /* "flagmatic/hypergraph_flag.pyx":1580
 * 							nzcount += 1
 * 
 * 				rarray.resize([row + nzcount, 5], refcheck=False)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(flags1.len):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rarray, __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_row + __pyx_v_nzcount)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_5);
      __Pyx_GIVEREF(__pyx_int_5);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_5);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1580, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1582
 * 				rarray.resize([row + nzcount, 5], refcheck=False)
 * 
 * 				for i in range(flags1.len):             # <<<<<<<<<<<<<<
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 */
      __pyx_t_10 = __pyx_v_flags1->len;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "flagmatic/hypergraph_flag.pyx":1583
 * 
 * 				for i in range(flags1.len):
 * 					for j in range(flags2.len):             # <<<<<<<<<<<<<<
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:
 */
        __pyx_t_13 = __pyx_v_flags2->len;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "flagmatic/hypergraph_flag.pyx":1584
 * 				for i in range(flags1.len):
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]             # <<<<<<<<<<<<<<
 * 						if k != 0:
 * 							rarray[row, 0] = gi
 */
          __pyx_v_k = (__pyx_v_grb[((__pyx_v_i * __pyx_v_flags1->len) + __pyx_v_j)]);

          /* "flagmatic/hypergraph_flag.pyx":1585
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 */
          __pyx_t_8 = ((__pyx_v_k != 0) != 0);
          if (__pyx_t_8) {

            /* "flagmatic/hypergraph_flag.pyx":1586
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:
 * 							rarray[row, 0] = gi             # <<<<<<<<<<<<<<
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_gi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1586, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1586, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_GIVEREF(__pyx_int_0);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 1586, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1587
 * 						if k != 0:
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i             # <<<<<<<<<<<<<<
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
            __Pyx_INCREF(__pyx_int_1);
            __Pyx_GIVEREF(__pyx_int_1);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
            __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_3, __pyx_t_5) < 0)) __PYX_ERR(0, 1587, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1588
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j             # <<<<<<<<<<<<<<
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1588, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_2);
            __Pyx_GIVEREF(__pyx_int_2);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 1588, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1589
 * 							rarray[row, 1] = i
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k             # <<<<<<<<<<<<<<
 * 							rarray[row, 4] = np
 * 							row += 1
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
            __Pyx_INCREF(__pyx_int_3);
            __Pyx_GIVEREF(__pyx_int_3);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
            __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_3, __pyx_t_5) < 0)) __PYX_ERR(0, 1589, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1590
 * 							rarray[row, 2] = j
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np             # <<<<<<<<<<<<<<
 * 							row += 1
 * 
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
            __Pyx_INCREF(__pyx_int_4);
            __Pyx_GIVEREF(__pyx_int_4);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_4);
            __pyx_t_3 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_rarray, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 1590, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "flagmatic/hypergraph_flag.pyx":1591
 * 							rarray[row, 3] = k
 * 							rarray[row, 4] = np
 * 							row += 1             # <<<<<<<<<<<<<<
 * 
 * 		free(cur_edges)
 */
            __pyx_v_row = (__pyx_v_row + 1);

            /* "flagmatic/hypergraph_flag.pyx":1585
 * 					for j in range(flags2.len):
 * 						k = grb[(i * flags1.len) + j]
 * 						if k != 0:             # <<<<<<<<<<<<<<
 * 							rarray[row, 0] = gi
 * 							rarray[row, 1] = i
 */
          }
        }
      }
    }
    __pyx_L27:;
  }

  /* "flagmatic/hypergraph_flag.pyx":1593
 * 							row += 1
 * 
 * 		free(cur_edges)             # <<<<<<<<<<<<<<
 * 		free(pf1)
 * 		free(pf2)
 */
  free(__pyx_v_cur_edges);

  /* "flagmatic/hypergraph_flag.pyx":1594
 * 
 * 		free(cur_edges)
 * 		free(pf1)             # <<<<<<<<<<<<<<
 * 		free(pf2)
 * 		free(grb)
 */
  free(__pyx_v_pf1);

  /* "flagmatic/hypergraph_flag.pyx":1595
 * 		free(cur_edges)
 * 		free(pf1)
 * 		free(pf2)             # <<<<<<<<<<<<<<
 * 		free(grb)
 * 
 */
  free(__pyx_v_pf2);

  /* "flagmatic/hypergraph_flag.pyx":1596
 * 		free(pf1)
 * 		free(pf2)
 * 		free(grb)             # <<<<<<<<<<<<<<
 * 
 * 		#sig_off()
 */
  free(__pyx_v_grb);

  /* "flagmatic/hypergraph_flag.pyx":1600
 * 		#sig_off()
 * 
 * 		return rarray             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rarray);
  __pyx_r = __pyx_v_rarray;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1448
 * 
 * 	@classmethod
 * 	def flag_products (cls, graph_block gb, HypergraphFlag tg, graph_block flags1, graph_block flags2):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *p, np, *pp, *pf1, *pf2, *edges, *cur_edges
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.flag_products", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF((PyObject *)__pyx_v_f1);
  __Pyx_XDECREF((PyObject *)__pyx_v_f2);
  __Pyx_XDECREF(__pyx_v_rarray);
  __Pyx_XDECREF((PyObject *)__pyx_v_flags2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pxd":43
 * 	cdef int _multiplicity
 * 	cdef int _t
 * 	cdef readonly bint is_degenerate             # <<<<<<<<<<<<<<
 * 	cdef readonly bint _certified_minimal_isomorph
 * 	cdef readonly int ne
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->is_degenerate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.is_degenerate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pxd":44
 * 	cdef int _t
 * 	cdef readonly bint is_degenerate
 * 	cdef readonly bint _certified_minimal_isomorph             # <<<<<<<<<<<<<<
 * 	cdef readonly int ne
 * 	cdef int _edges[MAX_NUMBER_OF_EDGE_INTS]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_certified_minimal_isomorph); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag._certified_minimal_isomorph.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pxd":45
 * 	cdef readonly bint is_degenerate
 * 	cdef readonly bint _certified_minimal_isomorph
 * 	cdef readonly int ne             # <<<<<<<<<<<<<<
 * 	cdef int _edges[MAX_NUMBER_OF_EDGE_INTS]
 * 	cpdef is_labelled_isomorphic(self, HypergraphFlag other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne___get__(((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne___get__(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ne); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.HypergraphFlag.ne.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1608
 * 
 * 
 * cdef void raw_minimize_edges(int *edges, int m, int r, bint oriented):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int i, *e, round, swapped
 */

static void __pyx_f_9flagmatic_15hypergraph_flag_raw_minimize_edges(int *__pyx_v_edges, int __pyx_v_m, int __pyx_v_r, int __pyx_v_oriented) {
  int __pyx_v_i;
  int *__pyx_v_e;
  int __pyx_v_round;
  int __pyx_v_swapped;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("raw_minimize_edges", 0);

  /* "flagmatic/hypergraph_flag.pyx":1612
 * 	cdef int i, *e, round, swapped
 * 
 * 	if r == 3:             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(m):
 */
  switch (__pyx_v_r) {
    case 3:

    /* "flagmatic/hypergraph_flag.pyx":1614
 * 	if r == 3:
 * 
 * 		for i in range(m):             # <<<<<<<<<<<<<<
 * 			e = &edges[i * 3]
 * 			if e[0] > e[1]:
 */
    __pyx_t_1 = __pyx_v_m;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "flagmatic/hypergraph_flag.pyx":1615
 * 
 * 		for i in range(m):
 * 			e = &edges[i * 3]             # <<<<<<<<<<<<<<
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]
 */
      __pyx_v_e = (&(__pyx_v_edges[(__pyx_v_i * 3)]));

      /* "flagmatic/hypergraph_flag.pyx":1616
 * 		for i in range(m):
 * 			e = &edges[i * 3]
 * 			if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 				e[0], e[1] = e[1], e[0]
 * 			if e[1] > e[2]:
 */
      __pyx_t_3 = (((__pyx_v_e[0]) > (__pyx_v_e[1])) != 0);
      if (__pyx_t_3) {

        /* "flagmatic/hypergraph_flag.pyx":1617
 * 			e = &edges[i * 3]
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]             # <<<<<<<<<<<<<<
 * 			if e[1] > e[2]:
 * 				e[1], e[2] = e[2], e[1]
 */
        __pyx_t_4 = (__pyx_v_e[1]);
        __pyx_t_5 = (__pyx_v_e[0]);
        (__pyx_v_e[0]) = __pyx_t_4;
        (__pyx_v_e[1]) = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":1616
 * 		for i in range(m):
 * 			e = &edges[i * 3]
 * 			if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 				e[0], e[1] = e[1], e[0]
 * 			if e[1] > e[2]:
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1618
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]
 * 			if e[1] > e[2]:             # <<<<<<<<<<<<<<
 * 				e[1], e[2] = e[2], e[1]
 * 			if e[0] > e[1]:
 */
      __pyx_t_3 = (((__pyx_v_e[1]) > (__pyx_v_e[2])) != 0);
      if (__pyx_t_3) {

        /* "flagmatic/hypergraph_flag.pyx":1619
 * 				e[0], e[1] = e[1], e[0]
 * 			if e[1] > e[2]:
 * 				e[1], e[2] = e[2], e[1]             # <<<<<<<<<<<<<<
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]
 */
        __pyx_t_5 = (__pyx_v_e[2]);
        __pyx_t_4 = (__pyx_v_e[1]);
        (__pyx_v_e[1]) = __pyx_t_5;
        (__pyx_v_e[2]) = __pyx_t_4;

        /* "flagmatic/hypergraph_flag.pyx":1618
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]
 * 			if e[1] > e[2]:             # <<<<<<<<<<<<<<
 * 				e[1], e[2] = e[2], e[1]
 * 			if e[0] > e[1]:
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1620
 * 			if e[1] > e[2]:
 * 				e[1], e[2] = e[2], e[1]
 * 			if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 				e[0], e[1] = e[1], e[0]
 * 
 */
      __pyx_t_3 = (((__pyx_v_e[0]) > (__pyx_v_e[1])) != 0);
      if (__pyx_t_3) {

        /* "flagmatic/hypergraph_flag.pyx":1621
 * 				e[1], e[2] = e[2], e[1]
 * 			if e[0] > e[1]:
 * 				e[0], e[1] = e[1], e[0]             # <<<<<<<<<<<<<<
 * 
 * 		round = 1
 */
        __pyx_t_4 = (__pyx_v_e[1]);
        __pyx_t_5 = (__pyx_v_e[0]);
        (__pyx_v_e[0]) = __pyx_t_4;
        (__pyx_v_e[1]) = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":1620
 * 			if e[1] > e[2]:
 * 				e[1], e[2] = e[2], e[1]
 * 			if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 				e[0], e[1] = e[1], e[0]
 * 
 */
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1623
 * 				e[0], e[1] = e[1], e[0]
 * 
 * 		round = 1             # <<<<<<<<<<<<<<
 * 
 * 		while True:
 */
    __pyx_v_round = 1;

    /* "flagmatic/hypergraph_flag.pyx":1625
 * 		round = 1
 * 
 * 		while True:             # <<<<<<<<<<<<<<
 * 
 * 			swapped = 0
 */
    while (1) {

      /* "flagmatic/hypergraph_flag.pyx":1627
 * 		while True:
 * 
 * 			swapped = 0             # <<<<<<<<<<<<<<
 * 			for i in range(m - round):
 * 
 */
      __pyx_v_swapped = 0;

      /* "flagmatic/hypergraph_flag.pyx":1628
 * 
 * 			swapped = 0
 * 			for i in range(m - round):             # <<<<<<<<<<<<<<
 * 
 * 				e = &edges[i * 3]
 */
      __pyx_t_1 = (__pyx_v_m - __pyx_v_round);
      for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;

        /* "flagmatic/hypergraph_flag.pyx":1630
 * 			for i in range(m - round):
 * 
 * 				e = &edges[i * 3]             # <<<<<<<<<<<<<<
 * 
 * 				if e[0] < e[3]:
 */
        __pyx_v_e = (&(__pyx_v_edges[(__pyx_v_i * 3)]));

        /* "flagmatic/hypergraph_flag.pyx":1632
 * 				e = &edges[i * 3]
 * 
 * 				if e[0] < e[3]:             # <<<<<<<<<<<<<<
 * 					continue
 * 				if e[0] == e[3]:
 */
        __pyx_t_3 = (((__pyx_v_e[0]) < (__pyx_v_e[3])) != 0);
        if (__pyx_t_3) {

          /* "flagmatic/hypergraph_flag.pyx":1633
 * 
 * 				if e[0] < e[3]:
 * 					continue             # <<<<<<<<<<<<<<
 * 				if e[0] == e[3]:
 * 					if e[1] < e[4]:
 */
          goto __pyx_L10_continue;

          /* "flagmatic/hypergraph_flag.pyx":1632
 * 				e = &edges[i * 3]
 * 
 * 				if e[0] < e[3]:             # <<<<<<<<<<<<<<
 * 					continue
 * 				if e[0] == e[3]:
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1634
 * 				if e[0] < e[3]:
 * 					continue
 * 				if e[0] == e[3]:             # <<<<<<<<<<<<<<
 * 					if e[1] < e[4]:
 * 						continue
 */
        __pyx_t_3 = (((__pyx_v_e[0]) == (__pyx_v_e[3])) != 0);
        if (__pyx_t_3) {

          /* "flagmatic/hypergraph_flag.pyx":1635
 * 					continue
 * 				if e[0] == e[3]:
 * 					if e[1] < e[4]:             # <<<<<<<<<<<<<<
 * 						continue
 * 					if e[1] == e[4]:
 */
          __pyx_t_3 = (((__pyx_v_e[1]) < (__pyx_v_e[4])) != 0);
          if (__pyx_t_3) {

            /* "flagmatic/hypergraph_flag.pyx":1636
 * 				if e[0] == e[3]:
 * 					if e[1] < e[4]:
 * 						continue             # <<<<<<<<<<<<<<
 * 					if e[1] == e[4]:
 * 						if e[2] < e[5]:
 */
            goto __pyx_L10_continue;

            /* "flagmatic/hypergraph_flag.pyx":1635
 * 					continue
 * 				if e[0] == e[3]:
 * 					if e[1] < e[4]:             # <<<<<<<<<<<<<<
 * 						continue
 * 					if e[1] == e[4]:
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1637
 * 					if e[1] < e[4]:
 * 						continue
 * 					if e[1] == e[4]:             # <<<<<<<<<<<<<<
 * 						if e[2] < e[5]:
 * 							continue
 */
          __pyx_t_3 = (((__pyx_v_e[1]) == (__pyx_v_e[4])) != 0);
          if (__pyx_t_3) {

            /* "flagmatic/hypergraph_flag.pyx":1638
 * 						continue
 * 					if e[1] == e[4]:
 * 						if e[2] < e[5]:             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */
            __pyx_t_3 = (((__pyx_v_e[2]) < (__pyx_v_e[5])) != 0);
            if (__pyx_t_3) {

              /* "flagmatic/hypergraph_flag.pyx":1639
 * 					if e[1] == e[4]:
 * 						if e[2] < e[5]:
 * 							continue             # <<<<<<<<<<<<<<
 * 
 * 				e[0], e[3] = e[3], e[0]
 */
              goto __pyx_L10_continue;

              /* "flagmatic/hypergraph_flag.pyx":1638
 * 						continue
 * 					if e[1] == e[4]:
 * 						if e[2] < e[5]:             # <<<<<<<<<<<<<<
 * 							continue
 * 
 */
            }

            /* "flagmatic/hypergraph_flag.pyx":1637
 * 					if e[1] < e[4]:
 * 						continue
 * 					if e[1] == e[4]:             # <<<<<<<<<<<<<<
 * 						if e[2] < e[5]:
 * 							continue
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1634
 * 				if e[0] < e[3]:
 * 					continue
 * 				if e[0] == e[3]:             # <<<<<<<<<<<<<<
 * 					if e[1] < e[4]:
 * 						continue
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1641
 * 							continue
 * 
 * 				e[0], e[3] = e[3], e[0]             # <<<<<<<<<<<<<<
 * 				e[1], e[4] = e[4], e[1]
 * 				e[2], e[5] = e[5], e[2]
 */
        __pyx_t_5 = (__pyx_v_e[3]);
        __pyx_t_4 = (__pyx_v_e[0]);
        (__pyx_v_e[0]) = __pyx_t_5;
        (__pyx_v_e[3]) = __pyx_t_4;

        /* "flagmatic/hypergraph_flag.pyx":1642
 * 
 * 				e[0], e[3] = e[3], e[0]
 * 				e[1], e[4] = e[4], e[1]             # <<<<<<<<<<<<<<
 * 				e[2], e[5] = e[5], e[2]
 * 
 */
        __pyx_t_4 = (__pyx_v_e[4]);
        __pyx_t_5 = (__pyx_v_e[1]);
        (__pyx_v_e[1]) = __pyx_t_4;
        (__pyx_v_e[4]) = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":1643
 * 				e[0], e[3] = e[3], e[0]
 * 				e[1], e[4] = e[4], e[1]
 * 				e[2], e[5] = e[5], e[2]             # <<<<<<<<<<<<<<
 * 
 * 				swapped = 1
 */
        __pyx_t_5 = (__pyx_v_e[5]);
        __pyx_t_4 = (__pyx_v_e[2]);
        (__pyx_v_e[2]) = __pyx_t_5;
        (__pyx_v_e[5]) = __pyx_t_4;

        /* "flagmatic/hypergraph_flag.pyx":1645
 * 				e[2], e[5] = e[5], e[2]
 * 
 * 				swapped = 1             # <<<<<<<<<<<<<<
 * 
 * 			if swapped == 0:
 */
        __pyx_v_swapped = 1;
        __pyx_L10_continue:;
      }

      /* "flagmatic/hypergraph_flag.pyx":1647
 * 				swapped = 1
 * 
 * 			if swapped == 0:             # <<<<<<<<<<<<<<
 * 				break
 * 
 */
      __pyx_t_3 = ((__pyx_v_swapped == 0) != 0);
      if (__pyx_t_3) {

        /* "flagmatic/hypergraph_flag.pyx":1648
 * 
 * 			if swapped == 0:
 * 				break             # <<<<<<<<<<<<<<
 * 
 * 			round += 1
 */
        goto __pyx_L9_break;

        /* "flagmatic/hypergraph_flag.pyx":1647
 * 				swapped = 1
 * 
 * 			if swapped == 0:             # <<<<<<<<<<<<<<
 * 				break
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1650
 * 				break
 * 
 * 			round += 1             # <<<<<<<<<<<<<<
 * 
 * 	elif r == 2:
 */
      __pyx_v_round = (__pyx_v_round + 1);
    }
    __pyx_L9_break:;

    /* "flagmatic/hypergraph_flag.pyx":1612
 * 	cdef int i, *e, round, swapped
 * 
 * 	if r == 3:             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(m):
 */
    break;

    /* "flagmatic/hypergraph_flag.pyx":1652
 * 			round += 1
 * 
 * 	elif r == 2:             # <<<<<<<<<<<<<<
 * 
 * 		if oriented == False:
 */
    case 2:

    /* "flagmatic/hypergraph_flag.pyx":1654
 * 	elif r == 2:
 * 
 * 		if oriented == False:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(m):
 */
    __pyx_t_3 = ((__pyx_v_oriented == 0) != 0);
    if (__pyx_t_3) {

      /* "flagmatic/hypergraph_flag.pyx":1656
 * 		if oriented == False:
 * 
 * 			for i in range(m):             # <<<<<<<<<<<<<<
 * 				e = &edges[i * 2]
 * 				if e[0] > e[1]:
 */
      __pyx_t_1 = __pyx_v_m;
      for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;

        /* "flagmatic/hypergraph_flag.pyx":1657
 * 
 * 			for i in range(m):
 * 				e = &edges[i * 2]             # <<<<<<<<<<<<<<
 * 				if e[0] > e[1]:
 * 					e[0], e[1] = e[1], e[0]
 */
        __pyx_v_e = (&(__pyx_v_edges[(__pyx_v_i * 2)]));

        /* "flagmatic/hypergraph_flag.pyx":1658
 * 			for i in range(m):
 * 				e = &edges[i * 2]
 * 				if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 					e[0], e[1] = e[1], e[0]
 * 
 */
        __pyx_t_3 = (((__pyx_v_e[0]) > (__pyx_v_e[1])) != 0);
        if (__pyx_t_3) {

          /* "flagmatic/hypergraph_flag.pyx":1659
 * 				e = &edges[i * 2]
 * 				if e[0] > e[1]:
 * 					e[0], e[1] = e[1], e[0]             # <<<<<<<<<<<<<<
 * 
 * 		round = 1
 */
          __pyx_t_4 = (__pyx_v_e[1]);
          __pyx_t_5 = (__pyx_v_e[0]);
          (__pyx_v_e[0]) = __pyx_t_4;
          (__pyx_v_e[1]) = __pyx_t_5;

          /* "flagmatic/hypergraph_flag.pyx":1658
 * 			for i in range(m):
 * 				e = &edges[i * 2]
 * 				if e[0] > e[1]:             # <<<<<<<<<<<<<<
 * 					e[0], e[1] = e[1], e[0]
 * 
 */
        }
      }

      /* "flagmatic/hypergraph_flag.pyx":1654
 * 	elif r == 2:
 * 
 * 		if oriented == False:             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(m):
 */
    }

    /* "flagmatic/hypergraph_flag.pyx":1661
 * 					e[0], e[1] = e[1], e[0]
 * 
 * 		round = 1             # <<<<<<<<<<<<<<
 * 
 * 		while True:
 */
    __pyx_v_round = 1;

    /* "flagmatic/hypergraph_flag.pyx":1663
 * 		round = 1
 * 
 * 		while True:             # <<<<<<<<<<<<<<
 * 
 * 			swapped = 0
 */
    while (1) {

      /* "flagmatic/hypergraph_flag.pyx":1665
 * 		while True:
 * 
 * 			swapped = 0             # <<<<<<<<<<<<<<
 * 			for i in range(m - round):
 * 
 */
      __pyx_v_swapped = 0;

      /* "flagmatic/hypergraph_flag.pyx":1666
 * 
 * 			swapped = 0
 * 			for i in range(m - round):             # <<<<<<<<<<<<<<
 * 
 * 				e = &edges[i * 2]
 */
      __pyx_t_1 = (__pyx_v_m - __pyx_v_round);
      for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;

        /* "flagmatic/hypergraph_flag.pyx":1668
 * 			for i in range(m - round):
 * 
 * 				e = &edges[i * 2]             # <<<<<<<<<<<<<<
 * 
 * 				if e[0] < e[2]:
 */
        __pyx_v_e = (&(__pyx_v_edges[(__pyx_v_i * 2)]));

        /* "flagmatic/hypergraph_flag.pyx":1670
 * 				e = &edges[i * 2]
 * 
 * 				if e[0] < e[2]:             # <<<<<<<<<<<<<<
 * 					continue
 * 				if e[0] == e[2]:
 */
        __pyx_t_3 = (((__pyx_v_e[0]) < (__pyx_v_e[2])) != 0);
        if (__pyx_t_3) {

          /* "flagmatic/hypergraph_flag.pyx":1671
 * 
 * 				if e[0] < e[2]:
 * 					continue             # <<<<<<<<<<<<<<
 * 				if e[0] == e[2]:
 * 					if e[1] < e[3]:
 */
          goto __pyx_L24_continue;

          /* "flagmatic/hypergraph_flag.pyx":1670
 * 				e = &edges[i * 2]
 * 
 * 				if e[0] < e[2]:             # <<<<<<<<<<<<<<
 * 					continue
 * 				if e[0] == e[2]:
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1672
 * 				if e[0] < e[2]:
 * 					continue
 * 				if e[0] == e[2]:             # <<<<<<<<<<<<<<
 * 					if e[1] < e[3]:
 * 						continue
 */
        __pyx_t_3 = (((__pyx_v_e[0]) == (__pyx_v_e[2])) != 0);
        if (__pyx_t_3) {

          /* "flagmatic/hypergraph_flag.pyx":1673
 * 					continue
 * 				if e[0] == e[2]:
 * 					if e[1] < e[3]:             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
          __pyx_t_3 = (((__pyx_v_e[1]) < (__pyx_v_e[3])) != 0);
          if (__pyx_t_3) {

            /* "flagmatic/hypergraph_flag.pyx":1674
 * 				if e[0] == e[2]:
 * 					if e[1] < e[3]:
 * 						continue             # <<<<<<<<<<<<<<
 * 
 * 				e[0], e[2] = e[2], e[0]
 */
            goto __pyx_L24_continue;

            /* "flagmatic/hypergraph_flag.pyx":1673
 * 					continue
 * 				if e[0] == e[2]:
 * 					if e[1] < e[3]:             # <<<<<<<<<<<<<<
 * 						continue
 * 
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1672
 * 				if e[0] < e[2]:
 * 					continue
 * 				if e[0] == e[2]:             # <<<<<<<<<<<<<<
 * 					if e[1] < e[3]:
 * 						continue
 */
        }

        /* "flagmatic/hypergraph_flag.pyx":1676
 * 						continue
 * 
 * 				e[0], e[2] = e[2], e[0]             # <<<<<<<<<<<<<<
 * 				e[1], e[3] = e[3], e[1]
 * 
 */
        __pyx_t_5 = (__pyx_v_e[2]);
        __pyx_t_4 = (__pyx_v_e[0]);
        (__pyx_v_e[0]) = __pyx_t_5;
        (__pyx_v_e[2]) = __pyx_t_4;

        /* "flagmatic/hypergraph_flag.pyx":1677
 * 
 * 				e[0], e[2] = e[2], e[0]
 * 				e[1], e[3] = e[3], e[1]             # <<<<<<<<<<<<<<
 * 
 * 				swapped = 1
 */
        __pyx_t_4 = (__pyx_v_e[3]);
        __pyx_t_5 = (__pyx_v_e[1]);
        (__pyx_v_e[1]) = __pyx_t_4;
        (__pyx_v_e[3]) = __pyx_t_5;

        /* "flagmatic/hypergraph_flag.pyx":1679
 * 				e[1], e[3] = e[3], e[1]
 * 
 * 				swapped = 1             # <<<<<<<<<<<<<<
 * 
 * 			if swapped == 0:
 */
        __pyx_v_swapped = 1;
        __pyx_L24_continue:;
      }

      /* "flagmatic/hypergraph_flag.pyx":1681
 * 				swapped = 1
 * 
 * 			if swapped == 0:             # <<<<<<<<<<<<<<
 * 				break
 * 
 */
      __pyx_t_3 = ((__pyx_v_swapped == 0) != 0);
      if (__pyx_t_3) {

        /* "flagmatic/hypergraph_flag.pyx":1682
 * 
 * 			if swapped == 0:
 * 				break             # <<<<<<<<<<<<<<
 * 
 * 			round += 1
 */
        goto __pyx_L23_break;

        /* "flagmatic/hypergraph_flag.pyx":1681
 * 				swapped = 1
 * 
 * 			if swapped == 0:             # <<<<<<<<<<<<<<
 * 				break
 * 
 */
      }

      /* "flagmatic/hypergraph_flag.pyx":1684
 * 				break
 * 
 * 			round += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_round = (__pyx_v_round + 1);
    }
    __pyx_L23_break:;

    /* "flagmatic/hypergraph_flag.pyx":1652
 * 			round += 1
 * 
 * 	elif r == 2:             # <<<<<<<<<<<<<<
 * 
 * 		if oriented == False:
 */
    break;
    default: break;
  }

  /* "flagmatic/hypergraph_flag.pyx":1608
 * 
 * 
 * cdef void raw_minimize_edges(int *edges, int m, int r, bint oriented):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int i, *e, round, swapped
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "flagmatic/hypergraph_flag.pyx":1692
 * previous_permutations = {}
 * 
 * cdef int *generate_permutations_fixing(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_permutations_fixing(int __pyx_v_n, int __pyx_v_s, int *__pyx_v_number_of) {
  int *__pyx_v_p;
  int __pyx_v_fac;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *__pyx_v_cib = NULL;
  PyObject *__pyx_v_perms = NULL;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("generate_permutations_fixing", 0);

  /* "flagmatic/hypergraph_flag.pyx":1697
 * 
 * 	# see if we've already generated it!
 * 	key = (n, s)             # <<<<<<<<<<<<<<
 * 	if key in previous_permutations.iterkeys():
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_key = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1698
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_permutations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_permutations[key]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_permutations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1698, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1700
 * 	if key in previous_permutations.iterkeys():
 * 
 * 		cib = <combinatorial_info_block>previous_permutations[key]             # <<<<<<<<<<<<<<
 * 		fac = cib.np
 * 		p = cib.p
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_permutations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1701
 * 
 * 		cib = <combinatorial_info_block>previous_permutations[key]
 * 		fac = cib.np             # <<<<<<<<<<<<<<
 * 		p = cib.p
 * 
 */
    __pyx_t_6 = __pyx_v_cib->np;
    __pyx_v_fac = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":1702
 * 		cib = <combinatorial_info_block>previous_permutations[key]
 * 		fac = cib.np
 * 		p = cib.p             # <<<<<<<<<<<<<<
 * 
 * 	else:
 */
    __pyx_t_7 = __pyx_v_cib->p;
    __pyx_v_p = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":1698
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_permutations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_permutations[key]
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1706
 * 	else:
 * 
 * 		perms = Permutations(range(s + 1, n + 1)).list()             # <<<<<<<<<<<<<<
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Permutations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_From_long((__pyx_v_s + 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_v_n + 1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1706, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_perms = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1707
 * 
 * 		perms = Permutations(range(s + 1, n + 1)).list()
 * 		fac = len(perms)             # <<<<<<<<<<<<<<
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		for i in range(fac):
 */
    __pyx_t_11 = PyObject_Length(__pyx_v_perms); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1707, __pyx_L1_error)
    __pyx_v_fac = __pyx_t_11;

    /* "flagmatic/hypergraph_flag.pyx":1708
 * 		perms = Permutations(range(s + 1, n + 1)).list()
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * n * fac)             # <<<<<<<<<<<<<<
 * 		for i in range(fac):
 * 			for j in range(n):
 */
    __pyx_v_p = ((int *)malloc((((sizeof(int)) * __pyx_v_n) * __pyx_v_fac)));

    /* "flagmatic/hypergraph_flag.pyx":1709
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		for i in range(fac):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				if j < s:
 */
    __pyx_t_6 = __pyx_v_fac;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_6; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "flagmatic/hypergraph_flag.pyx":1710
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		for i in range(fac):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				if j < s:
 * 					p[(i * n) + j] = j + 1
 */
      __pyx_t_13 = __pyx_v_n;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_j = __pyx_t_14;

        /* "flagmatic/hypergraph_flag.pyx":1711
 * 		for i in range(fac):
 * 			for j in range(n):
 * 				if j < s:             # <<<<<<<<<<<<<<
 * 					p[(i * n) + j] = j + 1
 * 				else:
 */
        __pyx_t_5 = ((__pyx_v_j < __pyx_v_s) != 0);
        if (__pyx_t_5) {

          /* "flagmatic/hypergraph_flag.pyx":1712
 * 			for j in range(n):
 * 				if j < s:
 * 					p[(i * n) + j] = j + 1             # <<<<<<<<<<<<<<
 * 				else:
 * 					p[(i * n) + j] = <int> perms[i][j - s]
 */
          (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = (__pyx_v_j + 1);

          /* "flagmatic/hypergraph_flag.pyx":1711
 * 		for i in range(fac):
 * 			for j in range(n):
 * 				if j < s:             # <<<<<<<<<<<<<<
 * 					p[(i * n) + j] = j + 1
 * 				else:
 */
          goto __pyx_L8;
        }

        /* "flagmatic/hypergraph_flag.pyx":1714
 * 					p[(i * n) + j] = j + 1
 * 				else:
 * 					p[(i * n) + j] = <int> perms[i][j - s]             # <<<<<<<<<<<<<<
 * 
 * 		cib = combinatorial_info_block()
 */
        /*else*/ {
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_perms, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = (__pyx_v_j - __pyx_v_s);
          __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1714, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = ((int)__pyx_t_15);
        }
        __pyx_L8:;
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1716
 * 					p[(i * n) + j] = <int> perms[i][j - s]
 * 
 * 		cib = combinatorial_info_block()             # <<<<<<<<<<<<<<
 * 		cib.np = fac
 * 		cib.p = p
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1717
 * 
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac             # <<<<<<<<<<<<<<
 * 		cib.p = p
 * 		previous_permutations[key] = cib
 */
    __pyx_v_cib->np = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1718
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac
 * 		cib.p = p             # <<<<<<<<<<<<<<
 * 		previous_permutations[key] = cib
 * 
 */
    __pyx_v_cib->p = __pyx_v_p;

    /* "flagmatic/hypergraph_flag.pyx":1719
 * 		cib.np = fac
 * 		cib.p = p
 * 		previous_permutations[key] = cib             # <<<<<<<<<<<<<<
 * 
 * 	if number_of:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_permutations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_key, ((PyObject *)__pyx_v_cib)) < 0)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1721
 * 		previous_permutations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  __pyx_t_5 = (__pyx_v_number_of != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1722
 * 
 * 	if number_of:
 * 		number_of[0] = fac             # <<<<<<<<<<<<<<
 * 
 * 	return p
 */
    (__pyx_v_number_of[0]) = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1721
 * 		previous_permutations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1724
 * 		number_of[0] = fac
 * 
 * 	return p             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_permutations(int n, int *number_of):
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1692
 * previous_permutations = {}
 * 
 * cdef int *generate_permutations_fixing(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.generate_permutations_fixing", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_cib);
  __Pyx_XDECREF(__pyx_v_perms);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1726
 * 	return p
 * 
 * cdef int *generate_permutations(int n, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_permutations(int __pyx_v_n, int *__pyx_v_number_of) {
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_permutations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1728
 * cdef int *generate_permutations(int n, int *number_of):
 * 
 * 	return generate_permutations_fixing(n, <int> 0, number_of)             # <<<<<<<<<<<<<<
 * 
 * def get_permutations (n):
 */
  __pyx_r = __pyx_f_9flagmatic_15hypergraph_flag_generate_permutations_fixing(__pyx_v_n, ((int)0), __pyx_v_number_of);
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1726
 * 	return p
 * 
 * cdef int *generate_permutations(int n, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1730
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 * 
 * def get_permutations (n):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_1get_permutations(PyObject *__pyx_self, PyObject *__pyx_v_n); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_1get_permutations = {"get_permutations", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_1get_permutations, METH_O, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_1get_permutations(PyObject *__pyx_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_permutations (wrapper)", 0);
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_get_permutations(__pyx_self, ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_get_permutations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("get_permutations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1733
 * 
 * 	cdef int *p, np, i, j
 * 	p = generate_permutations(n, &np)             # <<<<<<<<<<<<<<
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1733, __pyx_L1_error)
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_permutations(__pyx_t_1, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1734
 * 	cdef int *p, np, i, j
 * 	p = generate_permutations(n, &np)
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_v_np;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_n); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1734, __pyx_L1_error)
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_7, __pyx_v_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_p[__pyx_t_10])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1730
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 * 
 * def get_permutations (n):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_permutations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1739
 * previous_combinations = {}
 * 
 * cdef int *generate_combinations(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations(int __pyx_v_n, int __pyx_v_s, int *__pyx_v_number_of) {
  int *__pyx_v_p;
  int __pyx_v_fac;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *__pyx_v_cib = NULL;
  PyObject *__pyx_v_perms = NULL;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("generate_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1744
 * 
 * 	# see if we've already generated it!
 * 	key = (n, s)             # <<<<<<<<<<<<<<
 * 	if key in previous_combinations.iterkeys():
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_key = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1745
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_combinations[key]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1747
 * 	if key in previous_combinations.iterkeys():
 * 
 * 		cib = <combinatorial_info_block>previous_combinations[key]             # <<<<<<<<<<<<<<
 * 		fac = cib.np
 * 		p = cib.p
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1748
 * 
 * 		cib = <combinatorial_info_block>previous_combinations[key]
 * 		fac = cib.np             # <<<<<<<<<<<<<<
 * 		p = cib.p
 * 
 */
    __pyx_t_6 = __pyx_v_cib->np;
    __pyx_v_fac = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":1749
 * 		cib = <combinatorial_info_block>previous_combinations[key]
 * 		fac = cib.np
 * 		p = cib.p             # <<<<<<<<<<<<<<
 * 
 * 	else:
 */
    __pyx_t_7 = __pyx_v_cib->p;
    __pyx_v_p = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":1745
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_combinations[key]
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1753
 * 	else:
 * 
 * 		perms = Combinations(range(1, n + 1), s).list()             # <<<<<<<<<<<<<<
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_From_long((__pyx_v_n + 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1753, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_perms = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1754
 * 
 * 		perms = Combinations(range(1, n + 1), s).list()
 * 		fac = len(perms)             # <<<<<<<<<<<<<<
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):
 */
    __pyx_t_11 = PyObject_Length(__pyx_v_perms); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __pyx_v_fac = __pyx_t_11;

    /* "flagmatic/hypergraph_flag.pyx":1755
 * 		perms = Combinations(range(1, n + 1), s).list()
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)             # <<<<<<<<<<<<<<
 * 		for i in range(fac):
 * 			for j in range(s):
 */
    __pyx_v_p = ((int *)malloc((((sizeof(int)) * __pyx_v_s) * __pyx_v_fac)));

    /* "flagmatic/hypergraph_flag.pyx":1756
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):             # <<<<<<<<<<<<<<
 * 			for j in range(s):
 * 				p[(i * s) + j] = <int> perms[i][j]
 */
    __pyx_t_6 = __pyx_v_fac;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_6; __pyx_t_13+=1) {
      __pyx_v_i = __pyx_t_13;

      /* "flagmatic/hypergraph_flag.pyx":1757
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):
 * 			for j in range(s):             # <<<<<<<<<<<<<<
 * 				p[(i * s) + j] = <int> perms[i][j]
 * 
 */
      __pyx_t_14 = __pyx_v_s;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_j = __pyx_t_15;

        /* "flagmatic/hypergraph_flag.pyx":1758
 * 		for i in range(fac):
 * 			for j in range(s):
 * 				p[(i * s) + j] = <int> perms[i][j]             # <<<<<<<<<<<<<<
 * 
 * 		cib = combinatorial_info_block()
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_perms, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_p[((__pyx_v_i * __pyx_v_s) + __pyx_v_j)]) = ((int)__pyx_t_16);
      }
    }

    /* "flagmatic/hypergraph_flag.pyx":1760
 * 				p[(i * s) + j] = <int> perms[i][j]
 * 
 * 		cib = combinatorial_info_block()             # <<<<<<<<<<<<<<
 * 		cib.np = fac
 * 		cib.p = p
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1761
 * 
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac             # <<<<<<<<<<<<<<
 * 		cib.p = p
 * 		previous_combinations[key] = cib
 */
    __pyx_v_cib->np = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1762
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac
 * 		cib.p = p             # <<<<<<<<<<<<<<
 * 		previous_combinations[key] = cib
 * 
 */
    __pyx_v_cib->p = __pyx_v_p;

    /* "flagmatic/hypergraph_flag.pyx":1763
 * 		cib.np = fac
 * 		cib.p = p
 * 		previous_combinations[key] = cib             # <<<<<<<<<<<<<<
 * 
 * 	if number_of:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_key, ((PyObject *)__pyx_v_cib)) < 0)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1765
 * 		previous_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  __pyx_t_5 = (__pyx_v_number_of != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1766
 * 
 * 	if number_of:
 * 		number_of[0] = fac             # <<<<<<<<<<<<<<
 * 
 * 	return p
 */
    (__pyx_v_number_of[0]) = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1765
 * 		previous_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1768
 * 		number_of[0] = fac
 * 
 * 	return p             # <<<<<<<<<<<<<<
 * 
 * def get_combinations (n, s):
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1739
 * previous_combinations = {}
 * 
 * cdef int *generate_combinations(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.generate_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_cib);
  __Pyx_XDECREF(__pyx_v_perms);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1770
 * 	return p
 * 
 * def get_combinations (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_3get_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_3get_combinations = {"get_combinations", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_3get_combinations, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_3get_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_combinations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_s,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_combinations", 1, 2, 2, 1); __PYX_ERR(0, 1770, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_combinations") < 0)) __PYX_ERR(0, 1770, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = values[0];
    __pyx_v_s = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_combinations", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1770, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_2get_combinations(__pyx_self, __pyx_v_n, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_2get_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("get_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1773
 * 
 * 	cdef int *p, np, i, j
 * 	p = generate_combinations(n, s, &np)             # <<<<<<<<<<<<<<
 * 	return [[p[(i * s) + j] for j in range(s)] for i in range(np)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_s); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L1_error)
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations(__pyx_t_1, __pyx_t_2, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1774
 * 	cdef int *p, np, i, j
 * 	p = generate_combinations(n, s, &np)
 * 	return [[p[(i * s) + j] for j in range(s)] for i in range(np)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_v_np;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_s); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1774, __pyx_L1_error)
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_7, __pyx_v_s); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_p[__pyx_t_10])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1770
 * 	return p
 * 
 * def get_combinations (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1780
 * previous_combinations_plus = {}
 * 
 * cdef int *generate_combinations_plus(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations_plus(int __pyx_v_n, int __pyx_v_s, int *__pyx_v_number_of) {
  int *__pyx_v_p;
  int __pyx_v_fac;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *__pyx_v_cib = NULL;
  PyObject *__pyx_v_perms = NULL;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("generate_combinations_plus", 0);

  /* "flagmatic/hypergraph_flag.pyx":1785
 * 
 * 	# see if we've already generated it!
 * 	key = (n, s)             # <<<<<<<<<<<<<<
 * 	if key in previous_combinations_plus.iterkeys():
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_key = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1786
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_combinations_plus.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_combinations_plus[key]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations_plus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1786, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1786, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1788
 * 	if key in previous_combinations_plus.iterkeys():
 * 
 * 		cib = <combinatorial_info_block>previous_combinations_plus[key]             # <<<<<<<<<<<<<<
 * 		fac = cib.np
 * 		p = cib.p
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations_plus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1789
 * 
 * 		cib = <combinatorial_info_block>previous_combinations_plus[key]
 * 		fac = cib.np             # <<<<<<<<<<<<<<
 * 		p = cib.p
 * 
 */
    __pyx_t_6 = __pyx_v_cib->np;
    __pyx_v_fac = __pyx_t_6;

    /* "flagmatic/hypergraph_flag.pyx":1790
 * 		cib = <combinatorial_info_block>previous_combinations_plus[key]
 * 		fac = cib.np
 * 		p = cib.p             # <<<<<<<<<<<<<<
 * 
 * 	else:
 */
    __pyx_t_7 = __pyx_v_cib->p;
    __pyx_v_p = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":1786
 * 	# see if we've already generated it!
 * 	key = (n, s)
 * 	if key in previous_combinations_plus.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_combinations_plus[key]
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1794
 * 	else:
 * 
 * 		perms = Combinations(range(1, n), s - 1).list()             # <<<<<<<<<<<<<<
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_v_s - 1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1794, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1794, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_perms = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1795
 * 
 * 		perms = Combinations(range(1, n), s - 1).list()
 * 		fac = len(perms)             # <<<<<<<<<<<<<<
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):
 */
    __pyx_t_11 = PyObject_Length(__pyx_v_perms); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __pyx_v_fac = __pyx_t_11;

    /* "flagmatic/hypergraph_flag.pyx":1796
 * 		perms = Combinations(range(1, n), s - 1).list()
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)             # <<<<<<<<<<<<<<
 * 		for i in range(fac):
 * 			for j in range(s - 1):
 */
    __pyx_v_p = ((int *)malloc((((sizeof(int)) * __pyx_v_s) * __pyx_v_fac)));

    /* "flagmatic/hypergraph_flag.pyx":1797
 * 		fac = len(perms)
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):             # <<<<<<<<<<<<<<
 * 			for j in range(s - 1):
 * 				p[(i * s) + j] = <int> perms[i][j]
 */
    __pyx_t_6 = __pyx_v_fac;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_6; __pyx_t_13+=1) {
      __pyx_v_i = __pyx_t_13;

      /* "flagmatic/hypergraph_flag.pyx":1798
 * 		p = <int *> malloc (sizeof(int) * s * fac)
 * 		for i in range(fac):
 * 			for j in range(s - 1):             # <<<<<<<<<<<<<<
 * 				p[(i * s) + j] = <int> perms[i][j]
 * 			p[(i * s) + s - 1] = n
 */
      __pyx_t_14 = (__pyx_v_s - 1);
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_j = __pyx_t_15;

        /* "flagmatic/hypergraph_flag.pyx":1799
 * 		for i in range(fac):
 * 			for j in range(s - 1):
 * 				p[(i * s) + j] = <int> perms[i][j]             # <<<<<<<<<<<<<<
 * 			p[(i * s) + s - 1] = n
 * 
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_perms, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1799, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_p[((__pyx_v_i * __pyx_v_s) + __pyx_v_j)]) = ((int)__pyx_t_16);
      }

      /* "flagmatic/hypergraph_flag.pyx":1800
 * 			for j in range(s - 1):
 * 				p[(i * s) + j] = <int> perms[i][j]
 * 			p[(i * s) + s - 1] = n             # <<<<<<<<<<<<<<
 * 
 * 		cib = combinatorial_info_block()
 */
      (__pyx_v_p[(((__pyx_v_i * __pyx_v_s) + __pyx_v_s) - 1)]) = __pyx_v_n;
    }

    /* "flagmatic/hypergraph_flag.pyx":1802
 * 			p[(i * s) + s - 1] = n
 * 
 * 		cib = combinatorial_info_block()             # <<<<<<<<<<<<<<
 * 		cib.np = fac
 * 		cib.p = p
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1803
 * 
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac             # <<<<<<<<<<<<<<
 * 		cib.p = p
 * 		previous_combinations_plus[key] = cib
 */
    __pyx_v_cib->np = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1804
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac
 * 		cib.p = p             # <<<<<<<<<<<<<<
 * 		previous_combinations_plus[key] = cib
 * 
 */
    __pyx_v_cib->p = __pyx_v_p;

    /* "flagmatic/hypergraph_flag.pyx":1805
 * 		cib.np = fac
 * 		cib.p = p
 * 		previous_combinations_plus[key] = cib             # <<<<<<<<<<<<<<
 * 
 * 	if number_of:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_combinations_plus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_key, ((PyObject *)__pyx_v_cib)) < 0)) __PYX_ERR(0, 1805, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1807
 * 		previous_combinations_plus[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  __pyx_t_5 = (__pyx_v_number_of != 0);
  if (__pyx_t_5) {

    /* "flagmatic/hypergraph_flag.pyx":1808
 * 
 * 	if number_of:
 * 		number_of[0] = fac             # <<<<<<<<<<<<<<
 * 
 * 	return p
 */
    (__pyx_v_number_of[0]) = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1807
 * 		previous_combinations_plus[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1810
 * 		number_of[0] = fac
 * 
 * 	return p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1780
 * previous_combinations_plus = {}
 * 
 * cdef int *generate_combinations_plus(int n, int s, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.generate_combinations_plus", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_cib);
  __Pyx_XDECREF(__pyx_v_perms);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1813
 * 
 * 
 * def get_combinations_plus (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_5get_combinations_plus(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_5get_combinations_plus = {"get_combinations_plus", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_5get_combinations_plus, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_5get_combinations_plus(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_combinations_plus (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_s,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_combinations_plus", 1, 2, 2, 1); __PYX_ERR(0, 1813, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_combinations_plus") < 0)) __PYX_ERR(0, 1813, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = values[0];
    __pyx_v_s = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_combinations_plus", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1813, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_combinations_plus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_4get_combinations_plus(__pyx_self, __pyx_v_n, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_4get_combinations_plus(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("get_combinations_plus", 0);

  /* "flagmatic/hypergraph_flag.pyx":1816
 * 
 * 	cdef int *p, np, i, j
 * 	p = generate_combinations_plus(n, s, &np)             # <<<<<<<<<<<<<<
 * 	return [[p[(i * s) + j] for j in range(s)] for i in range(np)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_s); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_combinations_plus(__pyx_t_1, __pyx_t_2, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1817
 * 	cdef int *p, np, i, j
 * 	p = generate_combinations_plus(n, s, &np)
 * 	return [[p[(i * s) + j] for j in range(s)] for i in range(np)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_v_np;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_s); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1817, __pyx_L1_error)
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_7, __pyx_v_s); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_p[__pyx_t_10])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1813
 * 
 * 
 * def get_combinations_plus (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_combinations_plus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1822
 * previous_pair_combinations = {}
 * 
 * cdef int *generate_pair_combinations(int n, int s, int m1, int m2, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_pair_combinations(int __pyx_v_n, int __pyx_v_s, int __pyx_v_m1, int __pyx_v_m2, int *__pyx_v_number_of) {
  int *__pyx_v_p;
  int __pyx_v_fac;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *__pyx_v_cib = NULL;
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_perms = NULL;
  PyObject *__pyx_v_perm = NULL;
  PyObject *__pyx_v_available_verts = NULL;
  PyObject *__pyx_v_combs1 = NULL;
  int __pyx_v_first_one;
  PyObject *__pyx_v_comb1 = NULL;
  PyObject *__pyx_v_remaining_verts = NULL;
  PyObject *__pyx_v_combs2 = NULL;
  int __pyx_v_first_two;
  PyObject *__pyx_v_comb2 = NULL;
  PyObject *__pyx_v_v = NULL;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int *__pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_t_18;
  int __pyx_t_19;
  __Pyx_RefNannySetupContext("generate_pair_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1827
 * 
 * 	# see if we've already generated it!
 * 	key = (n, s, m1, m2)             # <<<<<<<<<<<<<<
 * 	if key in previous_pair_combinations.iterkeys():
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_m1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_m2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_key = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1828
 * 	# see if we've already generated it!
 * 	key = (n, s, m1, m2)
 * 	if key in previous_pair_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_pair_combinations[key]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_pair_combinations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1828, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "flagmatic/hypergraph_flag.pyx":1830
 * 	if key in previous_pair_combinations.iterkeys():
 * 
 * 		cib = <combinatorial_info_block>previous_pair_combinations[key]             # <<<<<<<<<<<<<<
 * 		fac = cib.np
 * 		p = cib.p
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_pair_combinations); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_GetItem(__pyx_t_5, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1831
 * 
 * 		cib = <combinatorial_info_block>previous_pair_combinations[key]
 * 		fac = cib.np             # <<<<<<<<<<<<<<
 * 		p = cib.p
 * 
 */
    __pyx_t_8 = __pyx_v_cib->np;
    __pyx_v_fac = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":1832
 * 		cib = <combinatorial_info_block>previous_pair_combinations[key]
 * 		fac = cib.np
 * 		p = cib.p             # <<<<<<<<<<<<<<
 * 
 * 	else:
 */
    __pyx_t_9 = __pyx_v_cib->p;
    __pyx_v_p = __pyx_t_9;

    /* "flagmatic/hypergraph_flag.pyx":1828
 * 	# see if we've already generated it!
 * 	key = (n, s, m1, m2)
 * 	if key in previous_pair_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_pair_combinations[key]
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1836
 * 	else:
 * 
 * 		fac = falling_factorial(n, s) * binomial(n - s, m1 - s) * binomial(n - m1, m2 - s)             # <<<<<<<<<<<<<<
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_falling_factorial); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_n - __pyx_v_s)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_m1 - __pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_PyInt_From_int((__pyx_v_n - __pyx_v_m1)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_m2 - __pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_12 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_fac = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":1837
 * 
 * 		fac = falling_factorial(n, s) * binomial(n - s, m1 - s) * binomial(n - m1, m2 - s)
 * 		p = <int *> malloc (sizeof(int) * n * fac)             # <<<<<<<<<<<<<<
 * 		i = 0
 * 		vertices = range(1, n + 1)
 */
    __pyx_v_p = ((int *)malloc((((sizeof(int)) * __pyx_v_n) * __pyx_v_fac)));

    /* "flagmatic/hypergraph_flag.pyx":1838
 * 		fac = falling_factorial(n, s) * binomial(n - s, m1 - s) * binomial(n - m1, m2 - s)
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0             # <<<<<<<<<<<<<<
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 */
    __pyx_v_i = 0;

    /* "flagmatic/hypergraph_flag.pyx":1839
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0
 * 		vertices = range(1, n + 1)             # <<<<<<<<<<<<<<
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:
 */
    __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_n + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_vertices = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1840
 * 		i = 0
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)             # <<<<<<<<<<<<<<
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Permutations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vertices);
    __Pyx_GIVEREF(__pyx_v_vertices);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_v_vertices);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_perms = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1841
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:             # <<<<<<<<<<<<<<
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m1 - s)
 */
    if (likely(PyList_CheckExact(__pyx_v_perms)) || PyTuple_CheckExact(__pyx_v_perms)) {
      __pyx_t_5 = __pyx_v_perms; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_perms); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1841, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1841, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1841, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_13(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1841, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_perm, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1842
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]             # <<<<<<<<<<<<<<
 * 			combs1 = Combinations(available_verts, m1 - s)
 * 			first_one = True
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
        __pyx_t_4 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1842, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1842, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1842, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1842, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1842, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_15(__pyx_t_4);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1842, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_perm, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1842, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_7 != 0);
        if (__pyx_t_6) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_v_v))) __PYX_ERR(0, 1842, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_available_verts, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1843
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m1 - s)             # <<<<<<<<<<<<<<
 * 			first_one = True
 * 			for comb1 in combs1:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_m1 - __pyx_v_s)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_14 = 1;
        }
      }
      __pyx_t_12 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_available_verts);
      __Pyx_GIVEREF(__pyx_v_available_verts);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_14, __pyx_v_available_verts);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_14, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_combs1, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1844
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m1 - s)
 * 			first_one = True             # <<<<<<<<<<<<<<
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 */
      __pyx_v_first_one = 1;

      /* "flagmatic/hypergraph_flag.pyx":1845
 * 			combs1 = Combinations(available_verts, m1 - s)
 * 			first_one = True
 * 			for comb1 in combs1:             # <<<<<<<<<<<<<<
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 */
      if (likely(PyList_CheckExact(__pyx_v_combs1)) || PyTuple_CheckExact(__pyx_v_combs1)) {
        __pyx_t_3 = __pyx_v_combs1; __Pyx_INCREF(__pyx_t_3); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_combs1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1845, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_15 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1845, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_4); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1845, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1845, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_4); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1845, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1845, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_15(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1845, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_comb1, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1846
 * 			first_one = True
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]             # <<<<<<<<<<<<<<
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 * 				first_two = True
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = __pyx_v_available_verts; __Pyx_INCREF(__pyx_t_12); __pyx_t_16 = 0;
        for (;;) {
          if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1846, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_12, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1846, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_comb1, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1846, __pyx_L1_error)
          __pyx_t_7 = (__pyx_t_6 != 0);
          if (__pyx_t_7) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_v))) __PYX_ERR(0, 1846, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_remaining_verts, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1847
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m2 - s)             # <<<<<<<<<<<<<<
 * 				first_two = True
 * 				for comb2 in combs2:
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_m2 - __pyx_v_s)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = NULL;
        __pyx_t_16 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_16 = 1;
          }
        }
        __pyx_t_2 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_remaining_verts);
        __Pyx_GIVEREF(__pyx_v_remaining_verts);
        PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_16, __pyx_v_remaining_verts);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_16, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_combs2, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1848
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 * 				first_two = True             # <<<<<<<<<<<<<<
 * 				for comb2 in combs2:
 * 					for j in range(s):
 */
        __pyx_v_first_two = 1;

        /* "flagmatic/hypergraph_flag.pyx":1849
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 * 				first_two = True
 * 				for comb2 in combs2:             # <<<<<<<<<<<<<<
 * 					for j in range(s):
 * 						if first_one:
 */
        if (likely(PyList_CheckExact(__pyx_v_combs2)) || PyTuple_CheckExact(__pyx_v_combs2)) {
          __pyx_t_4 = __pyx_v_combs2; __Pyx_INCREF(__pyx_t_4); __pyx_t_16 = 0;
          __pyx_t_17 = NULL;
        } else {
          __pyx_t_16 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_combs2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1849, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_17 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1849, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_17)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_12 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_12); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1849, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1849, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            } else {
              if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_12); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1849, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1849, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            }
          } else {
            __pyx_t_12 = __pyx_t_17(__pyx_t_4);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1849, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          __Pyx_XDECREF_SET(__pyx_v_comb2, __pyx_t_12);
          __pyx_t_12 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1850
 * 				first_two = True
 * 				for comb2 in combs2:
 * 					for j in range(s):             # <<<<<<<<<<<<<<
 * 						if first_one:
 * 							p[(i * n) + j] = <int> perm[j]
 */
          __pyx_t_8 = __pyx_v_s;
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_8; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1851
 * 				for comb2 in combs2:
 * 					for j in range(s):
 * 						if first_one:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 */
            __pyx_t_7 = (__pyx_v_first_one != 0);
            if (__pyx_t_7) {

              /* "flagmatic/hypergraph_flag.pyx":1852
 * 					for j in range(s):
 * 						if first_one:
 * 							p[(i * n) + j] = <int> perm[j]             # <<<<<<<<<<<<<<
 * 						else:
 * 							p[(i * n) + j] = <int> 0
 */
              __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_perm, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1852, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1852, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = ((int)__pyx_t_19);

              /* "flagmatic/hypergraph_flag.pyx":1851
 * 				for comb2 in combs2:
 * 					for j in range(s):
 * 						if first_one:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 */
              goto __pyx_L18;
            }

            /* "flagmatic/hypergraph_flag.pyx":1854
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 * 							p[(i * n) + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					for j in range(m1 - s):
 * 						if first_two:
 */
            /*else*/ {
              (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = ((int)0);
            }
            __pyx_L18:;
          }

          /* "flagmatic/hypergraph_flag.pyx":1855
 * 						else:
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m1 - s):             # <<<<<<<<<<<<<<
 * 						if first_two:
 * 							p[(i * n) + s + j] = <int> comb1[j]
 */
          __pyx_t_8 = (__pyx_v_m1 - __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_8; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1856
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m1 - s):
 * 						if first_two:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 */
            __pyx_t_7 = (__pyx_v_first_two != 0);
            if (__pyx_t_7) {

              /* "flagmatic/hypergraph_flag.pyx":1857
 * 					for j in range(m1 - s):
 * 						if first_two:
 * 							p[(i * n) + s + j] = <int> comb1[j]             # <<<<<<<<<<<<<<
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0
 */
              __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_comb1, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1857, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1857, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_s) + __pyx_v_j)]) = ((int)__pyx_t_19);

              /* "flagmatic/hypergraph_flag.pyx":1856
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m1 - s):
 * 						if first_two:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 */
              goto __pyx_L21;
            }

            /* "flagmatic/hypergraph_flag.pyx":1859
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					for j in range(m2 - s):
 * 						p[(i * n) + m1 + j] = <int> comb2[j]
 */
            /*else*/ {
              (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_s) + __pyx_v_j)]) = ((int)0);
            }
            __pyx_L21:;
          }

          /* "flagmatic/hypergraph_flag.pyx":1860
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0
 * 					for j in range(m2 - s):             # <<<<<<<<<<<<<<
 * 						p[(i * n) + m1 + j] = <int> comb2[j]
 * 					for j in range(n - m1 - m2 + s):
 */
          __pyx_t_8 = (__pyx_v_m2 - __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_8; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1861
 * 							p[(i * n) + s + j] = <int> 0
 * 					for j in range(m2 - s):
 * 						p[(i * n) + m1 + j] = <int> comb2[j]             # <<<<<<<<<<<<<<
 * 					for j in range(n - m1 - m2 + s):
 * 						p[(i * n) + m1 + m2 - s + j] = <int> 0
 */
            __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_comb2, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1861, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1861, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_m1) + __pyx_v_j)]) = ((int)__pyx_t_19);
          }

          /* "flagmatic/hypergraph_flag.pyx":1862
 * 					for j in range(m2 - s):
 * 						p[(i * n) + m1 + j] = <int> comb2[j]
 * 					for j in range(n - m1 - m2 + s):             # <<<<<<<<<<<<<<
 * 						p[(i * n) + m1 + m2 - s + j] = <int> 0
 * 					first_one = False
 */
          __pyx_t_8 = (((__pyx_v_n - __pyx_v_m1) - __pyx_v_m2) + __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_8; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1863
 * 						p[(i * n) + m1 + j] = <int> comb2[j]
 * 					for j in range(n - m1 - m2 + s):
 * 						p[(i * n) + m1 + m2 - s + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					first_one = False
 * 					first_two = False
 */
            (__pyx_v_p[(((((__pyx_v_i * __pyx_v_n) + __pyx_v_m1) + __pyx_v_m2) - __pyx_v_s) + __pyx_v_j)]) = ((int)0);
          }

          /* "flagmatic/hypergraph_flag.pyx":1864
 * 					for j in range(n - m1 - m2 + s):
 * 						p[(i * n) + m1 + m2 - s + j] = <int> 0
 * 					first_one = False             # <<<<<<<<<<<<<<
 * 					first_two = False
 * 					i += 1
 */
          __pyx_v_first_one = 0;

          /* "flagmatic/hypergraph_flag.pyx":1865
 * 						p[(i * n) + m1 + m2 - s + j] = <int> 0
 * 					first_one = False
 * 					first_two = False             # <<<<<<<<<<<<<<
 * 					i += 1
 * 
 */
          __pyx_v_first_two = 0;

          /* "flagmatic/hypergraph_flag.pyx":1866
 * 					first_one = False
 * 					first_two = False
 * 					i += 1             # <<<<<<<<<<<<<<
 * 
 * 		cib = combinatorial_info_block()
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "flagmatic/hypergraph_flag.pyx":1849
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 * 				first_two = True
 * 				for comb2 in combs2:             # <<<<<<<<<<<<<<
 * 					for j in range(s):
 * 						if first_one:
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1845
 * 			combs1 = Combinations(available_verts, m1 - s)
 * 			first_one = True
 * 			for comb1 in combs1:             # <<<<<<<<<<<<<<
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m2 - s)
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1841
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:             # <<<<<<<<<<<<<<
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m1 - s)
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1868
 * 					i += 1
 * 
 * 		cib = combinatorial_info_block()             # <<<<<<<<<<<<<<
 * 		cib.np = fac
 * 		cib.p = p
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1869
 * 
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac             # <<<<<<<<<<<<<<
 * 		cib.p = p
 * 		previous_pair_combinations[key] = cib
 */
    __pyx_v_cib->np = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1870
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac
 * 		cib.p = p             # <<<<<<<<<<<<<<
 * 		previous_pair_combinations[key] = cib
 * 
 */
    __pyx_v_cib->p = __pyx_v_p;

    /* "flagmatic/hypergraph_flag.pyx":1871
 * 		cib.np = fac
 * 		cib.p = p
 * 		previous_pair_combinations[key] = cib             # <<<<<<<<<<<<<<
 * 
 * 	if number_of:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_pair_combinations); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_v_key, ((PyObject *)__pyx_v_cib)) < 0)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1873
 * 		previous_pair_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  __pyx_t_7 = (__pyx_v_number_of != 0);
  if (__pyx_t_7) {

    /* "flagmatic/hypergraph_flag.pyx":1874
 * 
 * 	if number_of:
 * 		number_of[0] = fac             # <<<<<<<<<<<<<<
 * 
 * 	return p
 */
    (__pyx_v_number_of[0]) = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1873
 * 		previous_pair_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1876
 * 		number_of[0] = fac
 * 
 * 	return p             # <<<<<<<<<<<<<<
 * 
 * def get_pair_combinations (n, s, m1, m2):
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1822
 * previous_pair_combinations = {}
 * 
 * cdef int *generate_pair_combinations(int n, int s, int m1, int m2, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.generate_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_cib);
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_perms);
  __Pyx_XDECREF(__pyx_v_perm);
  __Pyx_XDECREF(__pyx_v_available_verts);
  __Pyx_XDECREF(__pyx_v_combs1);
  __Pyx_XDECREF(__pyx_v_comb1);
  __Pyx_XDECREF(__pyx_v_remaining_verts);
  __Pyx_XDECREF(__pyx_v_combs2);
  __Pyx_XDECREF(__pyx_v_comb2);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1878
 * 	return p
 * 
 * def get_pair_combinations (n, s, m1, m2):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_7get_pair_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_7get_pair_combinations = {"get_pair_combinations", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_7get_pair_combinations, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_7get_pair_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_m1 = 0;
  PyObject *__pyx_v_m2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pair_combinations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_s,&__pyx_n_s_m1,&__pyx_n_s_m2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_pair_combinations", 1, 4, 4, 1); __PYX_ERR(0, 1878, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_pair_combinations", 1, 4, 4, 2); __PYX_ERR(0, 1878, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_pair_combinations", 1, 4, 4, 3); __PYX_ERR(0, 1878, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_pair_combinations") < 0)) __PYX_ERR(0, 1878, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_n = values[0];
    __pyx_v_s = values[1];
    __pyx_v_m1 = values[2];
    __pyx_v_m2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_pair_combinations", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1878, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_6get_pair_combinations(__pyx_self, __pyx_v_n, __pyx_v_s, __pyx_v_m1, __pyx_v_m2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_6get_pair_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("get_pair_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1881
 * 
 * 	cdef int *p, np, i, j
 * 	p = generate_pair_combinations(n, s, m1, m2, &np)             # <<<<<<<<<<<<<<
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1881, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_s); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1881, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_m1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1881, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_m2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1881, __pyx_L1_error)
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_pair_combinations(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1882
 * 	cdef int *p, np, i, j
 * 	p = generate_pair_combinations(n, s, m1, m2, &np)
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __pyx_v_np;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_4; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_As_long(__pyx_v_n); if (unlikely((__pyx_t_7 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1882, __pyx_L1_error)
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyNumber_Multiply(__pyx_t_8, __pyx_v_n); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = PyNumber_Add(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_10); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_From_int((__pyx_v_p[__pyx_t_11])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1878
 * 	return p
 * 
 * def get_pair_combinations (n, s, m1, m2):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1887
 * previous_equal_pair_combinations = {}
 * 
 * cdef int *generate_equal_pair_combinations(int n, int s, int m, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j, smallest
 */

static int *__pyx_f_9flagmatic_15hypergraph_flag_generate_equal_pair_combinations(int __pyx_v_n, int __pyx_v_s, int __pyx_v_m, int *__pyx_v_number_of) {
  int *__pyx_v_p;
  int __pyx_v_fac;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_smallest;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *__pyx_v_cib = NULL;
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_perms = NULL;
  PyObject *__pyx_v_perm = NULL;
  PyObject *__pyx_v_available_verts = NULL;
  PyObject *__pyx_v_combs1 = NULL;
  int __pyx_v_first_one;
  PyObject *__pyx_v_comb1 = NULL;
  PyObject *__pyx_v_remaining_verts = NULL;
  PyObject *__pyx_v_combs2 = NULL;
  int __pyx_v_first_two;
  PyObject *__pyx_v_comb2 = NULL;
  PyObject *__pyx_v_v = NULL;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_t_18;
  int __pyx_t_19;
  __Pyx_RefNannySetupContext("generate_equal_pair_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1892
 * 
 * 	# see if we've already generated it!
 * 	key = (n, s, m)             # <<<<<<<<<<<<<<
 * 	if key in previous_equal_pair_combinations.iterkeys():
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_key = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1893
 * 	# see if we've already generated it!
 * 	key = (n, s, m)
 * 	if key in previous_equal_pair_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_equal_pair_combinations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterkeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":1895
 * 	if key in previous_equal_pair_combinations.iterkeys():
 * 
 * 		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]             # <<<<<<<<<<<<<<
 * 		fac = cib.np
 * 		p = cib.p
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_equal_pair_combinations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_4, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1896
 * 
 * 		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]
 * 		fac = cib.np             # <<<<<<<<<<<<<<
 * 		p = cib.p
 * 
 */
    __pyx_t_7 = __pyx_v_cib->np;
    __pyx_v_fac = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":1897
 * 		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]
 * 		fac = cib.np
 * 		p = cib.p             # <<<<<<<<<<<<<<
 * 
 * 	else:
 */
    __pyx_t_8 = __pyx_v_cib->p;
    __pyx_v_p = __pyx_t_8;

    /* "flagmatic/hypergraph_flag.pyx":1893
 * 	# see if we've already generated it!
 * 	key = (n, s, m)
 * 	if key in previous_equal_pair_combinations.iterkeys():             # <<<<<<<<<<<<<<
 * 
 * 		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]
 */
    goto __pyx_L3;
  }

  /* "flagmatic/hypergraph_flag.pyx":1900
 * 
 * 	else:
 * 		fac = falling_factorial(n, s) * binomial(n - s, m - s) * binomial(n - m, m - s)/2             # <<<<<<<<<<<<<<
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_falling_factorial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_n - __pyx_v_s)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_m - __pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_binomial); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyInt_From_int((__pyx_v_n - __pyx_v_m)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_m - __pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_3);
    __pyx_t_12 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_11, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_int_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_fac = __pyx_t_7;

    /* "flagmatic/hypergraph_flag.pyx":1901
 * 	else:
 * 		fac = falling_factorial(n, s) * binomial(n - s, m - s) * binomial(n - m, m - s)/2
 * 		p = <int *> malloc (sizeof(int) * n * fac)             # <<<<<<<<<<<<<<
 * 		i = 0
 * 		vertices = range(1, n + 1)
 */
    __pyx_v_p = ((int *)malloc((((sizeof(int)) * __pyx_v_n) * __pyx_v_fac)));

    /* "flagmatic/hypergraph_flag.pyx":1902
 * 		fac = falling_factorial(n, s) * binomial(n - s, m - s) * binomial(n - m, m - s)/2
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0             # <<<<<<<<<<<<<<
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 */
    __pyx_v_i = 0;

    /* "flagmatic/hypergraph_flag.pyx":1903
 * 		p = <int *> malloc (sizeof(int) * n * fac)
 * 		i = 0
 * 		vertices = range(1, n + 1)             # <<<<<<<<<<<<<<
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_n + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_vertices = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1904
 * 		i = 0
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)             # <<<<<<<<<<<<<<
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Permutations); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vertices);
    __Pyx_GIVEREF(__pyx_v_vertices);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_vertices);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_perms = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1905
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:             # <<<<<<<<<<<<<<
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m - s)
 */
    if (likely(PyList_CheckExact(__pyx_v_perms)) || PyTuple_CheckExact(__pyx_v_perms)) {
      __pyx_t_2 = __pyx_v_perms; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_perms); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1905, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1905, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1905, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_13(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1905, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_perm, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1906
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]             # <<<<<<<<<<<<<<
 * 			combs1 = Combinations(available_verts, m - s)
 * 			first_one = True
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
        __pyx_t_3 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_3); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1906, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_15 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1906, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1906, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1906, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1906, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1906, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_15(__pyx_t_3);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1906, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_perm, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1906, __pyx_L1_error)
        __pyx_t_5 = (__pyx_t_6 != 0);
        if (__pyx_t_5) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_v))) __PYX_ERR(0, 1906, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_available_verts, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1907
 * 		for perm in perms:
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m - s)             # <<<<<<<<<<<<<<
 * 			first_one = True
 * 			for comb1 in combs1:
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_m - __pyx_v_s)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_14 = 1;
        }
      }
      __pyx_t_12 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_available_verts);
      __Pyx_GIVEREF(__pyx_v_available_verts);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_14, __pyx_v_available_verts);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_14, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_combs1, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1908
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m - s)
 * 			first_one = True             # <<<<<<<<<<<<<<
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 */
      __pyx_v_first_one = 1;

      /* "flagmatic/hypergraph_flag.pyx":1909
 * 			combs1 = Combinations(available_verts, m - s)
 * 			first_one = True
 * 			for comb1 in combs1:             # <<<<<<<<<<<<<<
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m - s)
 */
      if (likely(PyList_CheckExact(__pyx_v_combs1)) || PyTuple_CheckExact(__pyx_v_combs1)) {
        __pyx_t_4 = __pyx_v_combs1; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_combs1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1909, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1909, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1909, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_15(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1909, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_comb1, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1910
 * 			first_one = True
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]             # <<<<<<<<<<<<<<
 * 				combs2 = Combinations(remaining_verts, m - s)
 * 				smallest = min(comb1)
 */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1910, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = __pyx_v_available_verts; __Pyx_INCREF(__pyx_t_12); __pyx_t_16 = 0;
        for (;;) {
          if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1910, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_12, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1910, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_comb1, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1910, __pyx_L1_error)
          __pyx_t_6 = (__pyx_t_5 != 0);
          if (__pyx_t_6) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_v_v))) __PYX_ERR(0, 1910, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_remaining_verts, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1911
 * 			for comb1 in combs1:
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m - s)             # <<<<<<<<<<<<<<
 * 				smallest = min(comb1)
 * 				first_two = True
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_Combinations); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_m - __pyx_v_s)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_9 = NULL;
        __pyx_t_16 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_16 = 1;
          }
        }
        __pyx_t_1 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_INCREF(__pyx_v_remaining_verts);
        __Pyx_GIVEREF(__pyx_v_remaining_verts);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_16, __pyx_v_remaining_verts);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_16, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_combs2, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1912
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m - s)
 * 				smallest = min(comb1)             # <<<<<<<<<<<<<<
 * 				first_two = True
 * 				for comb2 in combs2:
 */
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_comb1);
        __Pyx_GIVEREF(__pyx_v_comb1);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_comb1);
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_min, __pyx_t_3, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_smallest = __pyx_t_7;

        /* "flagmatic/hypergraph_flag.pyx":1913
 * 				combs2 = Combinations(remaining_verts, m - s)
 * 				smallest = min(comb1)
 * 				first_two = True             # <<<<<<<<<<<<<<
 * 				for comb2 in combs2:
 * 					if min(comb2) < smallest:
 */
        __pyx_v_first_two = 1;

        /* "flagmatic/hypergraph_flag.pyx":1914
 * 				smallest = min(comb1)
 * 				first_two = True
 * 				for comb2 in combs2:             # <<<<<<<<<<<<<<
 * 					if min(comb2) < smallest:
 * 						continue
 */
        if (likely(PyList_CheckExact(__pyx_v_combs2)) || PyTuple_CheckExact(__pyx_v_combs2)) {
          __pyx_t_12 = __pyx_v_combs2; __Pyx_INCREF(__pyx_t_12); __pyx_t_16 = 0;
          __pyx_t_17 = NULL;
        } else {
          __pyx_t_16 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_combs2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1914, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_17 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1914, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_17)) {
            if (likely(PyList_CheckExact(__pyx_t_12))) {
              if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1914, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1914, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1914, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1914, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_17(__pyx_t_12);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1914, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_comb2, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "flagmatic/hypergraph_flag.pyx":1915
 * 				first_two = True
 * 				for comb2 in combs2:
 * 					if min(comb2) < smallest:             # <<<<<<<<<<<<<<
 * 						continue
 * 					for j in range(s):
 */
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1915, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_comb2);
          __Pyx_GIVEREF(__pyx_v_comb2);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_comb2);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_min, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1915, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_smallest); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1915, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1915, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_6) {

            /* "flagmatic/hypergraph_flag.pyx":1916
 * 				for comb2 in combs2:
 * 					if min(comb2) < smallest:
 * 						continue             # <<<<<<<<<<<<<<
 * 					for j in range(s):
 * 						if first_one:
 */
            goto __pyx_L14_continue;

            /* "flagmatic/hypergraph_flag.pyx":1915
 * 				first_two = True
 * 				for comb2 in combs2:
 * 					if min(comb2) < smallest:             # <<<<<<<<<<<<<<
 * 						continue
 * 					for j in range(s):
 */
          }

          /* "flagmatic/hypergraph_flag.pyx":1917
 * 					if min(comb2) < smallest:
 * 						continue
 * 					for j in range(s):             # <<<<<<<<<<<<<<
 * 						if first_one:
 * 							p[(i * n) + j] = <int> perm[j]
 */
          __pyx_t_7 = __pyx_v_s;
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_7; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1918
 * 						continue
 * 					for j in range(s):
 * 						if first_one:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 */
            __pyx_t_6 = (__pyx_v_first_one != 0);
            if (__pyx_t_6) {

              /* "flagmatic/hypergraph_flag.pyx":1919
 * 					for j in range(s):
 * 						if first_one:
 * 							p[(i * n) + j] = <int> perm[j]             # <<<<<<<<<<<<<<
 * 						else:
 * 							p[(i * n) + j] = <int> 0
 */
              __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_perm, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1919, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = ((int)__pyx_t_19);

              /* "flagmatic/hypergraph_flag.pyx":1918
 * 						continue
 * 					for j in range(s):
 * 						if first_one:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 */
              goto __pyx_L19;
            }

            /* "flagmatic/hypergraph_flag.pyx":1921
 * 							p[(i * n) + j] = <int> perm[j]
 * 						else:
 * 							p[(i * n) + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					for j in range(m - s):
 * 						if first_two:
 */
            /*else*/ {
              (__pyx_v_p[((__pyx_v_i * __pyx_v_n) + __pyx_v_j)]) = ((int)0);
            }
            __pyx_L19:;
          }

          /* "flagmatic/hypergraph_flag.pyx":1922
 * 						else:
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m - s):             # <<<<<<<<<<<<<<
 * 						if first_two:
 * 							p[(i * n) + s + j] = <int> comb1[j]
 */
          __pyx_t_7 = (__pyx_v_m - __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_7; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1923
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m - s):
 * 						if first_two:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 */
            __pyx_t_6 = (__pyx_v_first_two != 0);
            if (__pyx_t_6) {

              /* "flagmatic/hypergraph_flag.pyx":1924
 * 					for j in range(m - s):
 * 						if first_two:
 * 							p[(i * n) + s + j] = <int> comb1[j]             # <<<<<<<<<<<<<<
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0
 */
              __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_comb1, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1924, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1924, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_s) + __pyx_v_j)]) = ((int)__pyx_t_19);

              /* "flagmatic/hypergraph_flag.pyx":1923
 * 							p[(i * n) + j] = <int> 0
 * 					for j in range(m - s):
 * 						if first_two:             # <<<<<<<<<<<<<<
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 */
              goto __pyx_L22;
            }

            /* "flagmatic/hypergraph_flag.pyx":1926
 * 							p[(i * n) + s + j] = <int> comb1[j]
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					for j in range(m - s):
 * 						p[(i * n) + m + j] = <int> comb2[j]
 */
            /*else*/ {
              (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_s) + __pyx_v_j)]) = ((int)0);
            }
            __pyx_L22:;
          }

          /* "flagmatic/hypergraph_flag.pyx":1927
 * 						else:
 * 							p[(i * n) + s + j] = <int> 0
 * 					for j in range(m - s):             # <<<<<<<<<<<<<<
 * 						p[(i * n) + m + j] = <int> comb2[j]
 * 					for j in range(n - m - m + s):
 */
          __pyx_t_7 = (__pyx_v_m - __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_7; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1928
 * 							p[(i * n) + s + j] = <int> 0
 * 					for j in range(m - s):
 * 						p[(i * n) + m + j] = <int> comb2[j]             # <<<<<<<<<<<<<<
 * 					for j in range(n - m - m + s):
 * 						p[(i * n) + m + m - s + j] = <int> 0
 */
            __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_comb2, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1928, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1928, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            (__pyx_v_p[(((__pyx_v_i * __pyx_v_n) + __pyx_v_m) + __pyx_v_j)]) = ((int)__pyx_t_19);
          }

          /* "flagmatic/hypergraph_flag.pyx":1929
 * 					for j in range(m - s):
 * 						p[(i * n) + m + j] = <int> comb2[j]
 * 					for j in range(n - m - m + s):             # <<<<<<<<<<<<<<
 * 						p[(i * n) + m + m - s + j] = <int> 0
 * 					first_one = False
 */
          __pyx_t_7 = (((__pyx_v_n - __pyx_v_m) - __pyx_v_m) + __pyx_v_s);
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_7; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "flagmatic/hypergraph_flag.pyx":1930
 * 						p[(i * n) + m + j] = <int> comb2[j]
 * 					for j in range(n - m - m + s):
 * 						p[(i * n) + m + m - s + j] = <int> 0             # <<<<<<<<<<<<<<
 * 					first_one = False
 * 					first_two = False
 */
            (__pyx_v_p[(((((__pyx_v_i * __pyx_v_n) + __pyx_v_m) + __pyx_v_m) - __pyx_v_s) + __pyx_v_j)]) = ((int)0);
          }

          /* "flagmatic/hypergraph_flag.pyx":1931
 * 					for j in range(n - m - m + s):
 * 						p[(i * n) + m + m - s + j] = <int> 0
 * 					first_one = False             # <<<<<<<<<<<<<<
 * 					first_two = False
 * 					i += 1
 */
          __pyx_v_first_one = 0;

          /* "flagmatic/hypergraph_flag.pyx":1932
 * 						p[(i * n) + m + m - s + j] = <int> 0
 * 					first_one = False
 * 					first_two = False             # <<<<<<<<<<<<<<
 * 					i += 1
 * 
 */
          __pyx_v_first_two = 0;

          /* "flagmatic/hypergraph_flag.pyx":1933
 * 					first_one = False
 * 					first_two = False
 * 					i += 1             # <<<<<<<<<<<<<<
 * 
 * 		cib = combinatorial_info_block()
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "flagmatic/hypergraph_flag.pyx":1914
 * 				smallest = min(comb1)
 * 				first_two = True
 * 				for comb2 in combs2:             # <<<<<<<<<<<<<<
 * 					if min(comb2) < smallest:
 * 						continue
 */
          __pyx_L14_continue:;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "flagmatic/hypergraph_flag.pyx":1909
 * 			combs1 = Combinations(available_verts, m - s)
 * 			first_one = True
 * 			for comb1 in combs1:             # <<<<<<<<<<<<<<
 * 				remaining_verts = [v for v in available_verts if not v in comb1]
 * 				combs2 = Combinations(remaining_verts, m - s)
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flagmatic/hypergraph_flag.pyx":1905
 * 		vertices = range(1, n + 1)
 * 		perms = Permutations(vertices, s)
 * 		for perm in perms:             # <<<<<<<<<<<<<<
 * 			available_verts = [v for v in vertices if not v in perm]
 * 			combs1 = Combinations(available_verts, m - s)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1935
 * 					i += 1
 * 
 * 		cib = combinatorial_info_block()             # <<<<<<<<<<<<<<
 * 		cib.np = fac
 * 		cib.p = p
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cib = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1936
 * 
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac             # <<<<<<<<<<<<<<
 * 		cib.p = p
 * 		previous_equal_pair_combinations[key] = cib
 */
    __pyx_v_cib->np = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1937
 * 		cib = combinatorial_info_block()
 * 		cib.np = fac
 * 		cib.p = p             # <<<<<<<<<<<<<<
 * 		previous_equal_pair_combinations[key] = cib
 * 
 */
    __pyx_v_cib->p = __pyx_v_p;

    /* "flagmatic/hypergraph_flag.pyx":1938
 * 		cib.np = fac
 * 		cib.p = p
 * 		previous_equal_pair_combinations[key] = cib             # <<<<<<<<<<<<<<
 * 
 * 	if number_of:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_previous_equal_pair_combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_key, ((PyObject *)__pyx_v_cib)) < 0)) __PYX_ERR(0, 1938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "flagmatic/hypergraph_flag.pyx":1940
 * 		previous_equal_pair_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  __pyx_t_6 = (__pyx_v_number_of != 0);
  if (__pyx_t_6) {

    /* "flagmatic/hypergraph_flag.pyx":1941
 * 
 * 	if number_of:
 * 		number_of[0] = fac             # <<<<<<<<<<<<<<
 * 
 * 	return p
 */
    (__pyx_v_number_of[0]) = __pyx_v_fac;

    /* "flagmatic/hypergraph_flag.pyx":1940
 * 		previous_equal_pair_combinations[key] = cib
 * 
 * 	if number_of:             # <<<<<<<<<<<<<<
 * 		number_of[0] = fac
 * 
 */
  }

  /* "flagmatic/hypergraph_flag.pyx":1943
 * 		number_of[0] = fac
 * 
 * 	return p             # <<<<<<<<<<<<<<
 * 
 * def get_equal_pair_combinations (n, s, m):
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1887
 * previous_equal_pair_combinations = {}
 * 
 * cdef int *generate_equal_pair_combinations(int n, int s, int m, int *number_of):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, fac, i, j, smallest
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("flagmatic.hypergraph_flag.generate_equal_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_cib);
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_perms);
  __Pyx_XDECREF(__pyx_v_perm);
  __Pyx_XDECREF(__pyx_v_available_verts);
  __Pyx_XDECREF(__pyx_v_combs1);
  __Pyx_XDECREF(__pyx_v_comb1);
  __Pyx_XDECREF(__pyx_v_remaining_verts);
  __Pyx_XDECREF(__pyx_v_combs2);
  __Pyx_XDECREF(__pyx_v_comb2);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1945
 * 	return p
 * 
 * def get_equal_pair_combinations (n, s, m):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_9get_equal_pair_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_9get_equal_pair_combinations = {"get_equal_pair_combinations", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_9get_equal_pair_combinations, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_9get_equal_pair_combinations(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_m = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_equal_pair_combinations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_s,&__pyx_n_s_m,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_equal_pair_combinations", 1, 3, 3, 1); __PYX_ERR(0, 1945, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_equal_pair_combinations", 1, 3, 3, 2); __PYX_ERR(0, 1945, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_equal_pair_combinations") < 0)) __PYX_ERR(0, 1945, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_n = values[0];
    __pyx_v_s = values[1];
    __pyx_v_m = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_equal_pair_combinations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1945, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_equal_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_8get_equal_pair_combinations(__pyx_self, __pyx_v_n, __pyx_v_s, __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_8get_equal_pair_combinations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n, PyObject *__pyx_v_s, PyObject *__pyx_v_m) {
  int *__pyx_v_p;
  int __pyx_v_np;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("get_equal_pair_combinations", 0);

  /* "flagmatic/hypergraph_flag.pyx":1948
 * 
 * 	cdef int *p, np, i, j
 * 	p = generate_equal_pair_combinations(n, s, m, &np)             # <<<<<<<<<<<<<<
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1948, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_s); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1948, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1948, __pyx_L1_error)
  __pyx_v_p = __pyx_f_9flagmatic_15hypergraph_flag_generate_equal_pair_combinations(__pyx_t_1, __pyx_t_2, __pyx_t_3, (&__pyx_v_np));

  /* "flagmatic/hypergraph_flag.pyx":1949
 * 	cdef int *p, np, i, j
 * 	p = generate_equal_pair_combinations(n, s, m, &np)
 * 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_v_np;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_v_n); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1949, __pyx_L1_error)
    for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_6; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_t_7, __pyx_v_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_p[__pyx_t_10])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1949, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1945
 * 	return p
 * 
 * def get_equal_pair_combinations (n, s, m):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.get_equal_pair_combinations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1956
 * 
 * 
 * def make_graph_block(graphs, n):             # <<<<<<<<<<<<<<
 * 
 * 	gb = graph_block()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_11make_graph_block(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_11make_graph_block = {"make_graph_block", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_11make_graph_block, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_11make_graph_block(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graphs = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_graph_block (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graphs,&__pyx_n_s_n,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graphs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_graph_block", 1, 2, 2, 1); __PYX_ERR(0, 1956, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_graph_block") < 0)) __PYX_ERR(0, 1956, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graphs = values[0];
    __pyx_v_n = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_graph_block", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1956, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.make_graph_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_10make_graph_block(__pyx_self, __pyx_v_graphs, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_10make_graph_block(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graphs, PyObject *__pyx_v_n) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("make_graph_block", 0);

  /* "flagmatic/hypergraph_flag.pyx":1958
 * def make_graph_block(graphs, n):
 * 
 * 	gb = graph_block()             # <<<<<<<<<<<<<<
 * 	gb.n = n
 * 	gb.len = len(graphs)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_graph_block), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_gb = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1959
 * 
 * 	gb = graph_block()
 * 	gb.n = n             # <<<<<<<<<<<<<<
 * 	gb.len = len(graphs)
 * 	gb.graphs = <void **> malloc(gb.len * sizeof(void *))
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L1_error)
  __pyx_v_gb->n = __pyx_t_2;

  /* "flagmatic/hypergraph_flag.pyx":1960
 * 	gb = graph_block()
 * 	gb.n = n
 * 	gb.len = len(graphs)             # <<<<<<<<<<<<<<
 * 	gb.graphs = <void **> malloc(gb.len * sizeof(void *))
 * 	for i in range(gb.len):
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_graphs); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __pyx_v_gb->len = __pyx_t_3;

  /* "flagmatic/hypergraph_flag.pyx":1961
 * 	gb.n = n
 * 	gb.len = len(graphs)
 * 	gb.graphs = <void **> malloc(gb.len * sizeof(void *))             # <<<<<<<<<<<<<<
 * 	for i in range(gb.len):
 * 		gb.graphs[i] = <void *> graphs[i]
 */
  __pyx_v_gb->graphs = ((void **)malloc((__pyx_v_gb->len * (sizeof(void *)))));

  /* "flagmatic/hypergraph_flag.pyx":1962
 * 	gb.len = len(graphs)
 * 	gb.graphs = <void **> malloc(gb.len * sizeof(void *))
 * 	for i in range(gb.len):             # <<<<<<<<<<<<<<
 * 		gb.graphs[i] = <void *> graphs[i]
 * 	return gb
 */
  __pyx_t_2 = __pyx_v_gb->len;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "flagmatic/hypergraph_flag.pyx":1963
 * 	gb.graphs = <void **> malloc(gb.len * sizeof(void *))
 * 	for i in range(gb.len):
 * 		gb.graphs[i] = <void *> graphs[i]             # <<<<<<<<<<<<<<
 * 	return gb
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_graphs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    (__pyx_v_gb->graphs[__pyx_v_i]) = ((void *)__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":1964
 * 	for i in range(gb.len):
 * 		gb.graphs[i] = <void *> graphs[i]
 * 	return gb             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_gb));
  __pyx_r = ((PyObject *)__pyx_v_gb);
  goto __pyx_L0;

  /* "flagmatic/hypergraph_flag.pyx":1956
 * 
 * 
 * def make_graph_block(graphs, n):             # <<<<<<<<<<<<<<
 * 
 * 	gb = graph_block()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.make_graph_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flagmatic/hypergraph_flag.pyx":1967
 * 
 * 
 * def print_graph_block(graph_block gb):             # <<<<<<<<<<<<<<
 * 
 * 	for i in range(gb.len):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_13print_graph_block(PyObject *__pyx_self, PyObject *__pyx_v_gb); /*proto*/
static PyMethodDef __pyx_mdef_9flagmatic_15hypergraph_flag_13print_graph_block = {"print_graph_block", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_13print_graph_block, METH_O, 0};
static PyObject *__pyx_pw_9flagmatic_15hypergraph_flag_13print_graph_block(PyObject *__pyx_self, PyObject *__pyx_v_gb) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_graph_block (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gb), __pyx_ptype_9flagmatic_15hypergraph_flag_graph_block, 1, "gb", 0))) __PYX_ERR(0, 1967, __pyx_L1_error)
  __pyx_r = __pyx_pf_9flagmatic_15hypergraph_flag_12print_graph_block(__pyx_self, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *)__pyx_v_gb));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9flagmatic_15hypergraph_flag_12print_graph_block(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block *__pyx_v_gb) {
  int __pyx_v_i;
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("print_graph_block", 0);

  /* "flagmatic/hypergraph_flag.pyx":1969
 * def print_graph_block(graph_block gb):
 * 
 * 	for i in range(gb.len):             # <<<<<<<<<<<<<<
 * 		g = <HypergraphFlag ?> gb.graphs[i]
 * 		print str(g)
 */
  __pyx_t_1 = __pyx_v_gb->len;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "flagmatic/hypergraph_flag.pyx":1970
 * 
 * 	for i in range(gb.len):
 * 		g = <HypergraphFlag ?> gb.graphs[i]             # <<<<<<<<<<<<<<
 * 		print str(g)
 */
    __pyx_t_3 = ((PyObject *)(__pyx_v_gb->graphs[__pyx_v_i]));
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_g, ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "flagmatic/hypergraph_flag.pyx":1971
 * 	for i in range(gb.len):
 * 		g = <HypergraphFlag ?> gb.graphs[i]
 * 		print str(g)             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_g));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_g));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_g));
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "flagmatic/hypergraph_flag.pyx":1967
 * 
 * 
 * def print_graph_block(graph_block gb):             # <<<<<<<<<<<<<<
 * 
 * 	for i in range(gb.len):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("flagmatic.hypergraph_flag.print_graph_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 218, __pyx_L1_error)

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 222, __pyx_L1_error)

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 259, __pyx_L1_error)

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 278, __pyx_L1_error)
      break;
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 796, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 799, __pyx_L1_error)

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 803, __pyx_L1_error)

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 823, __pyx_L1_error)

        /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(2, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(2, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/structure/sage_object.pxd":7
 *     pass
 * 
 * cdef inline bint rich_to_bool(int op, int c):             # <<<<<<<<<<<<<<
 *     """
 *     Return the corresponding ``True`` or ``False`` value for a rich
 */

static CYTHON_INLINE int __pyx_f_4sage_9structure_11sage_object_rich_to_bool(int __pyx_v_op, int __pyx_v_c) {
  uint32_t __pyx_v_less_bits;
  uint32_t __pyx_v_equal_bits;
  uint32_t __pyx_v_greater_bits;
  uint32_t __pyx_v_bits;
  int __pyx_v_shift;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rich_to_bool", 0);

  /* "sage/structure/sage_object.pxd":47
 *     # The 4 lines below involve just constants, so the compiler should
 *     # optimize them to just one constant value for "bits".
 *     cdef uint32_t less_bits = (1 << Py_LT) + (1 << Py_LE) + (1 << Py_NE)             # <<<<<<<<<<<<<<
 *     cdef uint32_t equal_bits = (1 << Py_LE) + (1 << Py_GE) + (1 << Py_EQ)
 *     cdef uint32_t greater_bits = (1 << Py_GT) + (1 << Py_GE) + (1 << Py_NE)
 */
  __pyx_v_less_bits = (((1 << Py_LT) + (1 << Py_LE)) + (1 << Py_NE));

  /* "sage/structure/sage_object.pxd":48
 *     # optimize them to just one constant value for "bits".
 *     cdef uint32_t less_bits = (1 << Py_LT) + (1 << Py_LE) + (1 << Py_NE)
 *     cdef uint32_t equal_bits = (1 << Py_LE) + (1 << Py_GE) + (1 << Py_EQ)             # <<<<<<<<<<<<<<
 *     cdef uint32_t greater_bits = (1 << Py_GT) + (1 << Py_GE) + (1 << Py_NE)
 *     cdef uint32_t bits = (less_bits << 24) + (equal_bits) + (greater_bits << 8)
 */
  __pyx_v_equal_bits = (((1 << Py_LE) + (1 << Py_GE)) + (1 << Py_EQ));

  /* "sage/structure/sage_object.pxd":49
 *     cdef uint32_t less_bits = (1 << Py_LT) + (1 << Py_LE) + (1 << Py_NE)
 *     cdef uint32_t equal_bits = (1 << Py_LE) + (1 << Py_GE) + (1 << Py_EQ)
 *     cdef uint32_t greater_bits = (1 << Py_GT) + (1 << Py_GE) + (1 << Py_NE)             # <<<<<<<<<<<<<<
 *     cdef uint32_t bits = (less_bits << 24) + (equal_bits) + (greater_bits << 8)
 * 
 */
  __pyx_v_greater_bits = (((1 << Py_GT) + (1 << Py_GE)) + (1 << Py_NE));

  /* "sage/structure/sage_object.pxd":50
 *     cdef uint32_t equal_bits = (1 << Py_LE) + (1 << Py_GE) + (1 << Py_EQ)
 *     cdef uint32_t greater_bits = (1 << Py_GT) + (1 << Py_GE) + (1 << Py_NE)
 *     cdef uint32_t bits = (less_bits << 24) + (equal_bits) + (greater_bits << 8)             # <<<<<<<<<<<<<<
 * 
 *     cdef int shift = 8*c + op
 */
  __pyx_v_bits = (((__pyx_v_less_bits << 24) + __pyx_v_equal_bits) + (__pyx_v_greater_bits << 8));

  /* "sage/structure/sage_object.pxd":52
 *     cdef uint32_t bits = (less_bits << 24) + (equal_bits) + (greater_bits << 8)
 * 
 *     cdef int shift = 8*c + op             # <<<<<<<<<<<<<<
 * 
 *     # The shift masking (shift & 31) will likely be optimized away by
 */
  __pyx_v_shift = ((8 * __pyx_v_c) + __pyx_v_op);

  /* "sage/structure/sage_object.pxd":57
 *     # the compiler since shift and bit test instructions implicitly
 *     # mask their offset.
 *     return (bits >> (shift & 31)) & 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((__pyx_v_bits >> (__pyx_v_shift & 31)) & 1);
  goto __pyx_L0;

  /* "sage/structure/sage_object.pxd":7
 *     pass
 * 
 * cdef inline bint rich_to_bool(int op, int c):             # <<<<<<<<<<<<<<
 *     """
 *     Return the corresponding ``True`` or ``False`` value for a rich
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/structure/sage_object.pxd":60
 * 
 * 
 * cdef inline bint rich_to_bool_sgn(int op, int c):             # <<<<<<<<<<<<<<
 *     """
 *     Same as ``rich_to_bool``, but allow any `c < 0` and `c > 0`
 */

static CYTHON_INLINE int __pyx_f_4sage_9structure_11sage_object_rich_to_bool_sgn(int __pyx_v_op, int __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rich_to_bool_sgn", 0);

  /* "sage/structure/sage_object.pxd":69
 *         This is in particular needed for ``mpz_cmp()``.
 *     """
 *     return rich_to_bool(op, (c > 0) - (c < 0))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_4sage_9structure_11sage_object_rich_to_bool(__pyx_v_op, ((__pyx_v_c > 0) - (__pyx_v_c < 0)));
  goto __pyx_L0;

  /* "sage/structure/sage_object.pxd":60
 * 
 * 
 * cdef inline bint rich_to_bool_sgn(int op, int c):             # <<<<<<<<<<<<<<
 *     """
 *     Same as ``rich_to_bool``, but allow any `c < 0` and `c > 0`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9flagmatic_15hypergraph_flag_HypergraphFlag __pyx_vtable_9flagmatic_15hypergraph_flag_HypergraphFlag;

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_HypergraphFlag(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *p;
  PyObject *o = __pyx_ptype_9flagmatic_4flag_Flag->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *)o);
  p->__pyx_vtab = __pyx_vtabptr_9flagmatic_15hypergraph_flag_HypergraphFlag;
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_HypergraphFlag(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  if (likely(__pyx_ptype_9flagmatic_4flag_Flag)) __pyx_ptype_9flagmatic_4flag_Flag->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_HypergraphFlag);
}
static PyObject *__pyx_sq_item_9flagmatic_15hypergraph_flag_HypergraphFlag(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_r(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_1__get__(o);
}

static int __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_r(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1r_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_oriented(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_1__get__(o);
}

static int __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_oriented(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_8oriented_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_multiplicity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_1__get__(o);
}

static int __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_multiplicity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_12multiplicity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_n(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_1__get__(o);
}

static int __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_n(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1n_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_t(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_1__get__(o);
}

static int __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_t(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1t_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_degenerate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13is_degenerate_1__get__(o);
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag__certified_minimal_isomorph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27_certified_minimal_isomorph_1__get__(o);
}

static PyObject *__pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_ne(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_2ne_1__get__(o);
}

static PyMethodDef __pyx_methods_9flagmatic_15hypergraph_flag_HypergraphFlag[] = {
  {"add_edge", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_3add_edge, METH_O, 0},
  {"delete_edge", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_5delete_edge, METH_O, 0},
  {"init_from_string", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_11init_from_string, METH_O, 0},
  {"_repr_", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_13_repr_, METH_NOARGS, 0},
  {"__copy__", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_15__copy__, METH_NOARGS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_14__copy__},
  {"_latex_", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_17_latex_, METH_NOARGS, 0},
  {"__reduce__", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_19__reduce__, METH_NOARGS, 0},
  {"is_labelled_isomorphic", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_25is_labelled_isomorphic, METH_O, 0},
  {"default_density_graph", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_27default_density_graph, METH_VARARGS|METH_KEYWORDS, 0},
  {"generate_flags", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_29generate_flags, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_28generate_flags},
  {"generate_graphs", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_31generate_graphs, METH_VARARGS|METH_KEYWORDS, 0},
  {"flag_orbits", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_33flag_orbits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_32flag_orbits},
  {"flag_basis", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_35flag_basis, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_34flag_basis},
  {"homomorphic_images", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_37homomorphic_images, METH_NOARGS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_36homomorphic_images},
  {"minimal_by_inclusion", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_39minimal_by_inclusion, METH_O, 0},
  {"degrees", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_41degrees, METH_NOARGS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_40degrees},
  {"edge_density", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_43edge_density, METH_NOARGS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_42edge_density},
  {"subgraph_density", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_45subgraph_density, METH_O, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_44subgraph_density},
  {"complement", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_47complement, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_46complement},
  {"relabel", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_49relabel, METH_O, 0},
  {"identify_vertices", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_51identify_vertices, METH_VARARGS|METH_KEYWORDS, 0},
  {"minimize_edges", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_53minimize_edges, METH_NOARGS, 0},
  {"make_minimal_isomorph", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_55make_minimal_isomorph, METH_NOARGS, 0},
  {"induced_subgraph", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_57induced_subgraph, METH_O, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_56induced_subgraph},
  {"has_forbidden_edge_numbers", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_59has_forbidden_edge_numbers, METH_VARARGS|METH_KEYWORDS, 0},
  {"has_forbidden_graphs", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_61has_forbidden_graphs, METH_VARARGS|METH_KEYWORDS, 0},
  {"split_vertex", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_63split_vertex, METH_O, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_62split_vertex},
  {"degenerate_induced_subgraph", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_65degenerate_induced_subgraph, METH_O, 0},
  {"degenerate_edge_density", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_67degenerate_edge_density, METH_NOARGS, 0},
  {"degenerate_subgraph_density", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_69degenerate_subgraph_density, METH_O, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_68degenerate_subgraph_density},
  {"degenerate_flag_density", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_71degenerate_flag_density, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9flagmatic_15hypergraph_flag_14HypergraphFlag_70degenerate_flag_density},
  {"flag_products", (PyCFunction)__pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_73flag_products, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9flagmatic_15hypergraph_flag_HypergraphFlag[] = {
  {(char *)"edges", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_edges, 0, (char *)"\n\t\tA tuple containing the edges as tuples.\n\t\t", 0},
  {(char *)"r", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_r, __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_r, (char *)"\n\t\tThe number of vertices in an edge.\n\t\t", 0},
  {(char *)"oriented", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_oriented, __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_oriented, (char *)"\n\t\tWhether the order of vertices within an edge is significant.\n\t\t", 0},
  {(char *)"multiplicity", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_multiplicity, __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_multiplicity, (char *)"\n\t\tThe maximum number of parallel edges allowed.\n\t\t", 0},
  {(char *)"n", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_n, __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_n, (char *)"\n\t\tThe number of vertices.\n\t\t", 0},
  {(char *)"t", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_t, __pyx_setprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_t, (char *)"\n\t\tThe number of labelled vertices.\n\t\t", 0},
  {(char *)"is_degenerate", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_degenerate, 0, (char *)0, 0},
  {(char *)"_certified_minimal_isomorph", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag__certified_minimal_isomorph, 0, (char *)0, 0},
  {(char *)"ne", __pyx_getprop_9flagmatic_15hypergraph_flag_14HypergraphFlag_ne, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_HypergraphFlag = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9flagmatic_15hypergraph_flag_HypergraphFlag, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HypergraphFlag = {
  0, /*mp_length*/
  __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.HypergraphFlag", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_HypergraphFlag, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_HypergraphFlag, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HypergraphFlag, /*tp_as_mapping*/
  __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_21__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_23__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9flagmatic_15hypergraph_flag_HypergraphFlag, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9flagmatic_15hypergraph_flag_HypergraphFlag, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9flagmatic_15hypergraph_flag_14HypergraphFlag_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag_HypergraphFlag, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_combinatorial_info_block(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_combinatorial_info_block(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag_combinatorial_info_block = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.combinatorial_info_block", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag_combinatorial_info_block), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_combinatorial_info_block, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag_combinatorial_info_block, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag_graph_block(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_graph_block(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag_graph_block = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.graph_block", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag_graph_block), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag_graph_block, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag_graph_block, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags[8];
static int __pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags = 0;

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags)))) {
    o = (PyObject*)__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags[--__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags];
    memset(o, 0, sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(PyObject *o) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_multiplicity);
  Py_CLEAR(p->__pyx_v_nb);
  Py_CLEAR(p->__pyx_v_possible_edges);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags)))) {
    __pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags[__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags++] = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)o;
  if (p->__pyx_v_multiplicity) {
    e = (*v)(p->__pyx_v_multiplicity, a); if (e) return e;
  }
  if (p->__pyx_v_nb) {
    e = (*v)(p->__pyx_v_nb, a); if (e) return e;
  }
  if (p->__pyx_v_possible_edges) {
    e = (*v)(p->__pyx_v_possible_edges, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)o;
  tmp = ((PyObject*)p->__pyx_v_multiplicity);
  p->__pyx_v_multiplicity = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_nb);
  p->__pyx_v_nb = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_possible_edges);
  p->__pyx_v_possible_edges = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.__pyx_scope_struct__generate_flags", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags, /*tp_traverse*/
  __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr[--__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr[__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_e);
  p->__pyx_v_e = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr[--__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_e);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr[__pyx_freecount_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_e);
  p->__pyx_v_e = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "flagmatic.hypergraph_flag.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  __pyx_tp_clear_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "hypergraph_flag",
    __pyx_k_flagmatic_2_Copyright_c_2012_E, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0123456789abcdefghijklmnopqrstuv, __pyx_k_0123456789abcdefghijklmnopqrstuv, sizeof(__pyx_k_0123456789abcdefghijklmnopqrstuv), 0, 0, 1, 0},
  {&__pyx_kp_s_2_12, __pyx_k_2_12, sizeof(__pyx_k_2_12), 0, 0, 1, 0},
  {&__pyx_kp_s_3_123, __pyx_k_3_123, sizeof(__pyx_k_3_123), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_identify_vertices_of_mult, __pyx_k_Cannot_identify_vertices_of_mult, sizeof(__pyx_k_Cannot_identify_vertices_of_mult), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_split_vertices_of_multigr, __pyx_k_Cannot_split_vertices_of_multigr, sizeof(__pyx_k_Cannot_split_vertices_of_multigr), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_take_complements_of_multi, __pyx_k_Cannot_take_complements_of_multi, sizeof(__pyx_k_Cannot_take_complements_of_multi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_take_complements_of_orien, __pyx_k_Cannot_take_complements_of_orien, sizeof(__pyx_k_Cannot_take_complements_of_orien), 0, 0, 1, 0},
  {&__pyx_n_s_Combinations, __pyx_k_Combinations, sizeof(__pyx_k_Combinations), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_Integer, __pyx_k_Integer, sizeof(__pyx_k_Integer), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_representation, __pyx_k_Invalid_representation, sizeof(__pyx_k_Invalid_representation), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_t, __pyx_k_Invalid_t, sizeof(__pyx_k_Invalid_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Multigraphs_not_supported, __pyx_k_Multigraphs_not_supported, sizeof(__pyx_k_Multigraphs_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_possible_due_to_edges, __pyx_k_Not_possible_due_to_edges, sizeof(__pyx_k_Not_possible_due_to_edges), 0, 0, 1, 0},
  {&__pyx_n_s_Permutations, __pyx_k_Permutations, sizeof(__pyx_k_Permutations), 0, 0, 1, 1},
  {&__pyx_n_s_QQ, __pyx_k_QQ, sizeof(__pyx_k_QQ), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Subsets, __pyx_k_Subsets, sizeof(__pyx_k_Subsets), 0, 0, 1, 1},
  {&__pyx_kp_s_Too_many_edges, __pyx_k_Too_many_edges, sizeof(__pyx_k_Too_many_edges), 0, 0, 1, 0},
  {&__pyx_kp_s_Too_many_vertices, __pyx_k_Too_many_vertices, sizeof(__pyx_k_Too_many_vertices), 0, 0, 1, 0},
  {&__pyx_n_s_Tuples, __pyx_k_Tuples, sizeof(__pyx_k_Tuples), 0, 0, 1, 1},
  {&__pyx_kp_s_Unsupported_number_of_vertices, __pyx_k_Unsupported_number_of_vertices, sizeof(__pyx_k_Unsupported_number_of_vertices), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_k_Users_srobik_Github_flagmatic_d, sizeof(__pyx_k_Users_srobik_Github_flagmatic_d), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_ZZ, __pyx_k_ZZ, sizeof(__pyx_k_ZZ), 0, 0, 1, 1},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_n_s_add_edge, __pyx_k_add_edge, sizeof(__pyx_k_add_edge), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_s_bad_edge_size, __pyx_k_bad_edge_size, sizeof(__pyx_k_bad_edge_size), 0, 0, 1, 0},
  {&__pyx_n_s_binomial, __pyx_k_binomial, sizeof(__pyx_k_binomial), 0, 0, 1, 1},
  {&__pyx_n_s_block_matrix, __pyx_k_block_matrix, sizeof(__pyx_k_block_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_change_edge_size_of_a_non, __pyx_k_cannot_change_edge_size_of_a_non, sizeof(__pyx_k_cannot_change_edge_size_of_a_non), 0, 0, 1, 0},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_n_s_decode_symbol, __pyx_k_decode_symbol, sizeof(__pyx_k_decode_symbol), 0, 0, 1, 1},
  {&__pyx_n_s_default_density_graph, __pyx_k_default_density_graph, sizeof(__pyx_k_default_density_graph), 0, 0, 1, 1},
  {&__pyx_kp_s_degenerate_graphs_are_not_suppor, __pyx_k_degenerate_graphs_are_not_suppor, sizeof(__pyx_k_degenerate_graphs_are_not_suppor), 0, 0, 1, 0},
  {&__pyx_n_s_degenerate_induced_subgraph, __pyx_k_degenerate_induced_subgraph, sizeof(__pyx_k_degenerate_induced_subgraph), 0, 0, 1, 1},
  {&__pyx_n_s_degenerate_subgraph_density, __pyx_k_degenerate_subgraph_density, sizeof(__pyx_k_degenerate_subgraph_density), 0, 0, 1, 1},
  {&__pyx_n_s_degrees, __pyx_k_degrees, sizeof(__pyx_k_degrees), 0, 0, 1, 1},
  {&__pyx_n_s_delete_edge, __pyx_k_delete_edge, sizeof(__pyx_k_delete_edge), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_edge_density, __pyx_k_edge_density, sizeof(__pyx_k_edge_density), 0, 0, 1, 1},
  {&__pyx_kp_s_edge_not_present, __pyx_k_edge_not_present, sizeof(__pyx_k_edge_not_present), 0, 0, 1, 0},
  {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_falling_factorial, __pyx_k_falling_factorial, sizeof(__pyx_k_falling_factorial), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flag_basis, __pyx_k_flag_basis, sizeof(__pyx_k_flag_basis), 0, 0, 1, 1},
  {&__pyx_n_s_flag_orbits, __pyx_k_flag_orbits, sizeof(__pyx_k_flag_orbits), 0, 0, 1, 1},
  {&__pyx_n_s_flag_products, __pyx_k_flag_products, sizeof(__pyx_k_flag_products), 0, 0, 1, 1},
  {&__pyx_n_s_flagmatic_hypergraph_flag, __pyx_k_flagmatic_hypergraph_flag, sizeof(__pyx_k_flagmatic_hypergraph_flag), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flags1, __pyx_k_flags1, sizeof(__pyx_k_flags1), 0, 0, 1, 1},
  {&__pyx_n_s_flags2, __pyx_k_flags2, sizeof(__pyx_k_flags2), 0, 0, 1, 1},
  {&__pyx_n_s_forbidden_edge_numbers, __pyx_k_forbidden_edge_numbers, sizeof(__pyx_k_forbidden_edge_numbers), 0, 0, 1, 1},
  {&__pyx_n_s_forbidden_graphs, __pyx_k_forbidden_graphs, sizeof(__pyx_k_forbidden_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_forbidden_induced_graphs, __pyx_k_forbidden_induced_graphs, sizeof(__pyx_k_forbidden_induced_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_gb, __pyx_k_gb, sizeof(__pyx_k_gb), 0, 0, 1, 1},
  {&__pyx_n_s_generate_flags, __pyx_k_generate_flags, sizeof(__pyx_k_generate_flags), 0, 0, 1, 1},
  {&__pyx_n_s_generate_flags_locals_genexpr, __pyx_k_generate_flags_locals_genexpr, sizeof(__pyx_k_generate_flags_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_generate_graphs, __pyx_k_generate_graphs, sizeof(__pyx_k_generate_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_combinations, __pyx_k_get_combinations, sizeof(__pyx_k_get_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_get_combinations_plus, __pyx_k_get_combinations_plus, sizeof(__pyx_k_get_combinations_plus), 0, 0, 1, 1},
  {&__pyx_n_s_get_equal_pair_combinations, __pyx_k_get_equal_pair_combinations, sizeof(__pyx_k_get_equal_pair_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_get_pair_combinations, __pyx_k_get_pair_combinations, sizeof(__pyx_k_get_pair_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_get_permutations, __pyx_k_get_permutations, sizeof(__pyx_k_get_permutations), 0, 0, 1, 1},
  {&__pyx_n_s_gram_schmidt, __pyx_k_gram_schmidt, sizeof(__pyx_k_gram_schmidt), 0, 0, 1, 1},
  {&__pyx_n_s_graphs, __pyx_k_graphs, sizeof(__pyx_k_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_has_forbidden_edge_numbers, __pyx_k_has_forbidden_edge_numbers, sizeof(__pyx_k_has_forbidden_edge_numbers), 0, 0, 1, 1},
  {&__pyx_n_s_has_forbidden_graphs, __pyx_k_has_forbidden_graphs, sizeof(__pyx_k_has_forbidden_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_homomorphic_images, __pyx_k_homomorphic_images, sizeof(__pyx_k_homomorphic_images), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_identify_vertices, __pyx_k_identify_vertices, sizeof(__pyx_k_identify_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_induced, __pyx_k_induced, sizeof(__pyx_k_induced), 0, 0, 1, 1},
  {&__pyx_n_s_induced_subgraph, __pyx_k_induced_subgraph, sizeof(__pyx_k_induced_subgraph), 0, 0, 1, 1},
  {&__pyx_n_s_init_from_string, __pyx_k_init_from_string, sizeof(__pyx_k_init_from_string), 0, 0, 1, 1},
  {&__pyx_n_s_init_from_string_locals_decode_s, __pyx_k_init_from_string_locals_decode_s, sizeof(__pyx_k_init_from_string_locals_decode_s), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_is_degenerate, __pyx_k_is_degenerate, sizeof(__pyx_k_is_degenerate), 0, 0, 1, 1},
  {&__pyx_n_s_is_labelled_isomorphic, __pyx_k_is_labelled_isomorphic, sizeof(__pyx_k_is_labelled_isomorphic), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_m1, __pyx_k_m1, sizeof(__pyx_k_m1), 0, 0, 1, 1},
  {&__pyx_n_s_m2, __pyx_k_m2, sizeof(__pyx_k_m2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_graph_block, __pyx_k_make_graph_block, sizeof(__pyx_k_make_graph_block), 0, 0, 1, 1},
  {&__pyx_n_s_make_minimal_isomorph, __pyx_k_make_minimal_isomorph, sizeof(__pyx_k_make_minimal_isomorph), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_minimal, __pyx_k_minimal, sizeof(__pyx_k_minimal), 0, 0, 1, 1},
  {&__pyx_n_s_minimal_by_inclusion, __pyx_k_minimal_by_inclusion, sizeof(__pyx_k_minimal_by_inclusion), 0, 0, 1, 1},
  {&__pyx_n_s_minimal_by_inclusion_locals_lamb, __pyx_k_minimal_by_inclusion_locals_lamb, sizeof(__pyx_k_minimal_by_inclusion_locals_lamb), 0, 0, 1, 1},
  {&__pyx_n_s_minimize_edges, __pyx_k_minimize_edges, sizeof(__pyx_k_minimize_edges), 0, 0, 1, 1},
  {&__pyx_n_s_multiplicity, __pyx_k_multiplicity, sizeof(__pyx_k_multiplicity), 0, 0, 1, 1},
  {&__pyx_n_s_must_have_highest, __pyx_k_must_have_highest, sizeof(__pyx_k_must_have_highest), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_kp_s_n_cannot_be_less_than_t, __pyx_k_n_cannot_be_less_than_t, sizeof(__pyx_k_n_cannot_be_less_than_t), 0, 0, 1, 0},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ne, __pyx_k_ne, sizeof(__pyx_k_ne), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_only_2_graphs_and_3_graphs_are_s, __pyx_k_only_2_graphs_and_3_graphs_are_s, sizeof(__pyx_k_only_2_graphs_and_3_graphs_are_s), 0, 0, 1, 0},
  {&__pyx_kp_s_only_2_graphs_can_be_oriented, __pyx_k_only_2_graphs_can_be_oriented, sizeof(__pyx_k_only_2_graphs_can_be_oriented), 0, 0, 1, 0},
  {&__pyx_n_s_oriented, __pyx_k_oriented, sizeof(__pyx_k_oriented), 0, 0, 1, 1},
  {&__pyx_n_s_orthogonalize, __pyx_k_orthogonalize, sizeof(__pyx_k_orthogonalize), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_previous_combinations, __pyx_k_previous_combinations, sizeof(__pyx_k_previous_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_previous_combinations_plus, __pyx_k_previous_combinations_plus, sizeof(__pyx_k_previous_combinations_plus), 0, 0, 1, 1},
  {&__pyx_n_s_previous_equal_pair_combinations, __pyx_k_previous_equal_pair_combinations, sizeof(__pyx_k_previous_equal_pair_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_previous_pair_combinations, __pyx_k_previous_pair_combinations, sizeof(__pyx_k_previous_pair_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_previous_permutations, __pyx_k_previous_permutations, sizeof(__pyx_k_previous_permutations), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_graph_block, __pyx_k_print_graph_block, sizeof(__pyx_k_print_graph_block), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_refcheck, __pyx_k_refcheck, sizeof(__pyx_k_refcheck), 0, 0, 1, 1},
  {&__pyx_n_s_relabel, __pyx_k_relabel, sizeof(__pyx_k_relabel), 0, 0, 1, 1},
  {&__pyx_n_s_remove_duplicate_edges, __pyx_k_remove_duplicate_edges, sizeof(__pyx_k_remove_duplicate_edges), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_representation, __pyx_k_representation, sizeof(__pyx_k_representation), 0, 0, 1, 1},
  {&__pyx_n_s_require_mutable, __pyx_k_require_mutable, sizeof(__pyx_k_require_mutable), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sage_combinat_all, __pyx_k_sage_combinat_all, sizeof(__pyx_k_sage_combinat_all), 0, 0, 1, 1},
  {&__pyx_n_s_sage_matrix_all, __pyx_k_sage_matrix_all, sizeof(__pyx_k_sage_matrix_all), 0, 0, 1, 1},
  {&__pyx_n_s_sage_modules_misc, __pyx_k_sage_modules_misc, sizeof(__pyx_k_sage_modules_misc), 0, 0, 1, 1},
  {&__pyx_n_s_sage_rings_all, __pyx_k_sage_rings_all, sizeof(__pyx_k_sage_rings_all), 0, 0, 1, 1},
  {&__pyx_n_s_sage_rings_arith, __pyx_k_sage_rings_arith, sizeof(__pyx_k_sage_rings_arith), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_sparse, __pyx_k_sparse, sizeof(__pyx_k_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_split_vertex, __pyx_k_split_vertex, sizeof(__pyx_k_split_vertex), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tg, __pyx_k_tg, sizeof(__pyx_k_tg), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_s_type_must_not_contain_labelled_v, __pyx_k_type_must_not_contain_labelled_v, sizeof(__pyx_k_type_must_not_contain_labelled_v), 0, 0, 1, 0},
  {&__pyx_kp_s_type_should_not_contain_labelled, __pyx_k_type_should_not_contain_labelled, sizeof(__pyx_k_type_should_not_contain_labelled), 0, 0, 1, 0},
  {&__pyx_n_s_type_verts, __pyx_k_type_verts, sizeof(__pyx_k_type_verts), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_kp_s_verb, __pyx_k_verb, sizeof(__pyx_k_verb), 0, 0, 1, 0},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 306, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 550, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 717, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 1912, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 799, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "flagmatic/hypergraph_flag.pyx":68
 * 
 * 		if oriented and r != 2:
 * 			raise NotImplementedError("only 2-graphs can be oriented.")             # <<<<<<<<<<<<<<
 * 
 * 		if multiplicity < 1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_only_2_graphs_can_be_oriented); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "flagmatic/hypergraph_flag.pyx":91
 * 		elif representation in ZZ:
 * 			if representation < 0 or representation > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Unsupported number of vertices.")             # <<<<<<<<<<<<<<
 * 			self._n = representation
 * 			self.ne = 0
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unsupported_number_of_vertices); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "flagmatic/hypergraph_flag.pyx":132
 * 
 * 			if not (value == 2 or value == 3):
 * 				raise NotImplementedError("only 2-graphs and 3-graphs are supported.")             # <<<<<<<<<<<<<<
 * 
 * 			if self.ne != 0:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_only_2_graphs_and_3_graphs_are_s); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "flagmatic/hypergraph_flag.pyx":135
 * 
 * 			if self.ne != 0:
 * 				raise NotImplementedError("cannot change edge size of a non-empty flag.")             # <<<<<<<<<<<<<<
 * 
 * 			self._r = value
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_cannot_change_edge_size_of_a_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "flagmatic/hypergraph_flag.pyx":193
 * 
 * 			if value < self._t:
 * 				raise ValueError("n cannot be less than t.")             # <<<<<<<<<<<<<<
 * 
 * 			if value < self._n:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_n_cannot_be_less_than_t); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "flagmatic/hypergraph_flag.pyx":198
 * 				for i in range(self._r * self.ne):
 * 					if self._edges[i] >= value:
 * 						raise ValueError("Not possible due to edges.")             # <<<<<<<<<<<<<<
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Not_possible_due_to_edges); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "flagmatic/hypergraph_flag.pyx":201
 * 
 * 			if value > MAX_NUMBER_OF_VERTICES:
 * 				raise ValueError("Too many vertices.")             # <<<<<<<<<<<<<<
 * 
 * 			self._n = value
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Too_many_vertices); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "flagmatic/hypergraph_flag.pyx":234
 * 
 * 			if (self.ne + 1) * 3 > MAX_NUMBER_OF_EDGE_INTS:
 * 				raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 			x = <int?> edge[0]
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Too_many_edges); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "flagmatic/hypergraph_flag.pyx":255
 * 
 * 			if (self.ne + 1) * 2 > MAX_NUMBER_OF_EDGE_INTS:
 * 				raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 			x = <int?> edge[0]
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Too_many_edges); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "flagmatic/hypergraph_flag.pyx":282
 * 
 * 		if not len(edge) == self._r:
 * 			raise ValueError("bad edge size.")             # <<<<<<<<<<<<<<
 * 
 * 		se = tuple(sorted(edge))
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_bad_edge_size); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "flagmatic/hypergraph_flag.pyx":294
 * 				return
 * 
 * 		raise ValueError("edge not present.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_edge_not_present); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "flagmatic/hypergraph_flag.pyx":320
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 * 			except ValueError:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 		if s[1] != ":":
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Invalid_representation); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "flagmatic/hypergraph_flag.pyx":316
 * 	def init_from_string(self, s):
 * 
 * 		def decode_symbol(c):             # <<<<<<<<<<<<<<
 * 			try:
 * 				return "0123456789abcdefghijklmnopqrstuvwxyz".index(c)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_c); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_decode_symbol, 316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 316, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":323
 * 
 * 		if s[1] != ":":
 * 			raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 		n = decode_symbol(s[0])
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Invalid_representation); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "flagmatic/hypergraph_flag.pyx":327
 * 		n = decode_symbol(s[0])
 * 		if n < 0 or n > MAX_NUMBER_OF_VERTICES:
 * 			raise ValueError("Unsupported number of vertices.")             # <<<<<<<<<<<<<<
 * 		self._n = n
 * 		self.ne = 0
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Unsupported_number_of_vertices); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "flagmatic/hypergraph_flag.pyx":334
 * 		if s[-1] == ")":
 * 			if s[-3] != "(":
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Invalid_representation); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "flagmatic/hypergraph_flag.pyx":337
 * 			t = decode_symbol(s[-2])
 * 			if t < 0 or t > n:
 * 				raise ValueError("Invalid t.")             # <<<<<<<<<<<<<<
 * 			nei -= 3
 * 		else:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Invalid_t); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "flagmatic/hypergraph_flag.pyx":345
 * 
 * 		if nei > MAX_NUMBER_OF_EDGE_INTS:
 * 			raise NotImplementedError("Too many edges.")             # <<<<<<<<<<<<<<
 * 
 * 		if self._r == 3:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Too_many_edges); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "flagmatic/hypergraph_flag.pyx":350
 * 
 * 			if nei % 3 != 0:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(2, 2 + nei, 3):
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Invalid_representation); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "flagmatic/hypergraph_flag.pyx":358
 * 
 * 			if nei % 2 != 0:
 * 				raise ValueError("Invalid representation.")             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(2, 2 + nei, 2):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Invalid_representation); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "flagmatic/hypergraph_flag.pyx":510
 * 
 * 		if tg.t != 0:
 * 			raise NotImplementedError("type must not contain labelled vertices.")             # <<<<<<<<<<<<<<
 * 
 * 		s = tg.n
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_type_must_not_contain_labelled_v); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "flagmatic/hypergraph_flag.pyx":550
 * 			pe = sg.ne
 * 			ds = sg.degrees()
 * 			maxd = max(ds[s:] + (0,))             # <<<<<<<<<<<<<<
 * 
 * 			for ne in range(maxd, max_ne + 1):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "flagmatic/hypergraph_flag.pyx":647
 * 		row = 0
 * 		for orb in orbs:
 * 			for j in orb[1:]:             # <<<<<<<<<<<<<<
 * 				AntiInv[row, orb[0]] = 1
 * 				AntiInv[row, j] = -1
 */
  __pyx_slice__28 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__28)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__28);
  __Pyx_GIVEREF(__pyx_slice__28);

  /* "flagmatic/hypergraph_flag.pyx":751
 * 		"""
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		return self.ne / binomial(self.n, self.r)
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "flagmatic/hypergraph_flag.pyx":763
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		# Short-cut if we are dealing with edge/non-edge density
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "flagmatic/hypergraph_flag.pyx":795
 * 
 * 		if self.oriented:
 * 			raise NotImplementedError("Cannot take complements of oriented graphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if self.multiplicity != 1:
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Cannot_take_complements_of_orien); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "flagmatic/hypergraph_flag.pyx":798
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot take complements of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if self.is_degenerate:
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_Cannot_take_complements_of_multi); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "flagmatic/hypergraph_flag.pyx":860
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot identify vertices of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, j, k, v, x, y
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Cannot_identify_vertices_of_mult); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "flagmatic/hypergraph_flag.pyx":977
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i, *c_verts, num_verts
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "flagmatic/hypergraph_flag.pyx":996
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		ig.n = num_verts
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "flagmatic/hypergraph_flag.pyx":1057
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		if self._r != h._r or self._oriented != h._oriented:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "flagmatic/hypergraph_flag.pyx":1127
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		forb_k = [pair[0] for pair in forbidden_edge_numbers]
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "flagmatic/hypergraph_flag.pyx":1227
 * 
 * 		if self.is_degenerate:
 * 			raise NotImplementedError("degenerate graphs are not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(graphs)):
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_degenerate_graphs_are_not_suppor); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "flagmatic/hypergraph_flag.pyx":1267
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Cannot split vertices of multigraphs.")             # <<<<<<<<<<<<<<
 * 
 * 		if x < 1 or x > self._n:
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Cannot_split_vertices_of_multigr); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "flagmatic/hypergraph_flag.pyx":1314
 * 
 * 		if self.multiplicity != 1:
 * 			raise NotImplementedError("Multigraphs not supported.")             # <<<<<<<<<<<<<<
 * 
 * 		cg = self.__copy__()
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_Multigraphs_not_supported); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "flagmatic/hypergraph_flag.pyx":1366
 * 
 * 		if self._r == 3:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))             # <<<<<<<<<<<<<<
 * 		elif self._r == 2:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_3_123); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "flagmatic/hypergraph_flag.pyx":1368
 * 			return self.degenerate_subgraph_density(HypergraphFlag("3:123"))
 * 		elif self._r == 2:
 * 			return self.degenerate_subgraph_density(HypergraphFlag("2:12", 2))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_kp_s_2_12, __pyx_int_2); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "flagmatic/hypergraph_flag.pyx":1406
 * 		"""
 * 		if tg.t != 0:
 * 			raise NotImplementedError("type should not contain labelled vertices.")             # <<<<<<<<<<<<<<
 * 
 * 		s = tg.n
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_type_should_not_contain_labelled); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "../../sage/local/lib/python2.7/site-packages/Cython-0.24-py2.7-macosx-10.9-x86_64.egg/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "flagmatic/hypergraph_flag.pyx":1730
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 * 
 * def get_permutations (n):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_tuple__50 = PyTuple_Pack(5, __pyx_n_s_n, __pyx_n_s_p, __pyx_n_s_np, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_get_permutations, 1730, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 1730, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1770
 * 	return p
 * 
 * def get_combinations (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_tuple__52 = PyTuple_Pack(6, __pyx_n_s_n, __pyx_n_s_s, __pyx_n_s_p, __pyx_n_s_np, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_get_combinations, 1770, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 1770, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1813
 * 
 * 
 * def get_combinations_plus (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_tuple__54 = PyTuple_Pack(6, __pyx_n_s_n, __pyx_n_s_s, __pyx_n_s_p, __pyx_n_s_np, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_get_combinations_plus, 1813, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 1813, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1878
 * 	return p
 * 
 * def get_pair_combinations (n, s, m1, m2):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_tuple__56 = PyTuple_Pack(8, __pyx_n_s_n, __pyx_n_s_s, __pyx_n_s_m1, __pyx_n_s_m2, __pyx_n_s_p, __pyx_n_s_np, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_get_pair_combinations, 1878, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 1878, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1945
 * 	return p
 * 
 * def get_equal_pair_combinations (n, s, m):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_tuple__58 = PyTuple_Pack(7, __pyx_n_s_n, __pyx_n_s_s, __pyx_n_s_m, __pyx_n_s_p, __pyx_n_s_np, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_get_equal_pair_combinations, 1945, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 1945, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1956
 * 
 * 
 * def make_graph_block(graphs, n):             # <<<<<<<<<<<<<<
 * 
 * 	gb = graph_block()
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_graphs, __pyx_n_s_n, __pyx_n_s_gb, __pyx_n_s_i); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_make_graph_block, 1956, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 1956, __pyx_L1_error)

  /* "flagmatic/hypergraph_flag.pyx":1967
 * 
 * 
 * def print_graph_block(graph_block gb):             # <<<<<<<<<<<<<<
 * 
 * 	for i in range(gb.len):
 */
  __pyx_tuple__62 = PyTuple_Pack(3, __pyx_n_s_gb, __pyx_n_s_i, __pyx_n_s_g); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_srobik_Github_flagmatic_d, __pyx_n_s_print_graph_block, 1967, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inithypergraph_flag(void); /*proto*/
PyMODINIT_FUNC inithypergraph_flag(void)
#else
PyMODINIT_FUNC PyInit_hypergraph_flag(void); /*proto*/
PyMODINIT_FUNC PyInit_hypergraph_flag(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_hypergraph_flag(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("hypergraph_flag", __pyx_methods, __pyx_k_flagmatic_2_Copyright_c_2012_E, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_flagmatic__hypergraph_flag) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "flagmatic.hypergraph_flag")) {
      if (unlikely(PyDict_SetItemString(modules, "flagmatic.hypergraph_flag", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("generate_permutations_fixing", (void (*)(void))__pyx_f_9flagmatic_15hypergraph_flag_generate_permutations_fixing, "int *(int, int, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("generate_combinations", (void (*)(void))__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations, "int *(int, int, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("generate_combinations_plus", (void (*)(void))__pyx_f_9flagmatic_15hypergraph_flag_generate_combinations_plus, "int *(int, int, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("generate_pair_combinations", (void (*)(void))__pyx_f_9flagmatic_15hypergraph_flag_generate_pair_combinations, "int *(int, int, int, int, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("generate_equal_pair_combinations", (void (*)(void))__pyx_f_9flagmatic_15hypergraph_flag_generate_equal_pair_combinations, "int *(int, int, int, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Type init code ---*/
  __pyx_ptype_9flagmatic_4flag_Flag = __Pyx_ImportType("flagmatic.flag", "Flag", sizeof(struct __pyx_obj_9flagmatic_4flag_Flag), 1); if (unlikely(!__pyx_ptype_9flagmatic_4flag_Flag)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_9flagmatic_15hypergraph_flag_HypergraphFlag = &__pyx_vtable_9flagmatic_15hypergraph_flag_HypergraphFlag;
  __pyx_vtable_9flagmatic_15hypergraph_flag_HypergraphFlag.is_labelled_isomorphic = (PyObject *(*)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, int __pyx_skip_dispatch))__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_is_labelled_isomorphic;
  __pyx_vtable_9flagmatic_15hypergraph_flag_HypergraphFlag.c_induced_subgraph = (struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *(*)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, int *, int))__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_induced_subgraph;
  __pyx_vtable_9flagmatic_15hypergraph_flag_HypergraphFlag.c_has_subgraph = (int (*)(struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *, struct __pyx_obj_9flagmatic_15hypergraph_flag_HypergraphFlag *))__pyx_f_9flagmatic_15hypergraph_flag_14HypergraphFlag_c_has_subgraph;
  __pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag.tp_base = __pyx_ptype_9flagmatic_4flag_Flag;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag.tp_dict, __pyx_vtabptr_9flagmatic_15hypergraph_flag_HypergraphFlag) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "HypergraphFlag", (PyObject *)&__pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag = &__pyx_type_9flagmatic_15hypergraph_flag_HypergraphFlag;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag_combinatorial_info_block) < 0) __PYX_ERR(0, 1687, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag_combinatorial_info_block.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "combinatorial_info_block", (PyObject *)&__pyx_type_9flagmatic_15hypergraph_flag_combinatorial_info_block) < 0) __PYX_ERR(0, 1687, __pyx_L1_error)
  __pyx_ptype_9flagmatic_15hypergraph_flag_combinatorial_info_block = &__pyx_type_9flagmatic_15hypergraph_flag_combinatorial_info_block;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag_graph_block) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag_graph_block.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "graph_block", (PyObject *)&__pyx_type_9flagmatic_15hypergraph_flag_graph_block) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  __pyx_ptype_9flagmatic_15hypergraph_flag_graph_block = &__pyx_type_9flagmatic_15hypergraph_flag_graph_block;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags.tp_print = 0;
  __pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags = &__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct__generate_flags;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr = &__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr.tp_print = 0;
  __pyx_ptype_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr = &__pyx_type_9flagmatic_15hypergraph_flag___pyx_scope_struct_2_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_4sage_9structure_11sage_object_SageObject = __Pyx_ImportType("sage.structure.sage_object", "SageObject", sizeof(struct __pyx_obj_4sage_9structure_11sage_object_SageObject), 1); if (unlikely(!__pyx_ptype_4sage_9structure_11sage_object_SageObject)) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "flagmatic/hypergraph_flag.pyx":51
 * from libc.string cimport memset
 * 
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":54
 * cimport numpy
 * 
 * from sage.rings.arith import binomial, falling_factorial             # <<<<<<<<<<<<<<
 * from sage.combinat.all import Combinations, Permutations, Tuples, Subsets
 * from sage.rings.all import Integer, QQ, ZZ
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_binomial);
  __Pyx_GIVEREF(__pyx_n_s_binomial);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_binomial);
  __Pyx_INCREF(__pyx_n_s_falling_factorial);
  __Pyx_GIVEREF(__pyx_n_s_falling_factorial);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_falling_factorial);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_rings_arith, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_binomial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_binomial, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_falling_factorial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_falling_factorial, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":55
 * 
 * from sage.rings.arith import binomial, falling_factorial
 * from sage.combinat.all import Combinations, Permutations, Tuples, Subsets             # <<<<<<<<<<<<<<
 * from sage.rings.all import Integer, QQ, ZZ
 * from sage.matrix.all import matrix, block_matrix
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Combinations);
  __Pyx_GIVEREF(__pyx_n_s_Combinations);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Combinations);
  __Pyx_INCREF(__pyx_n_s_Permutations);
  __Pyx_GIVEREF(__pyx_n_s_Permutations);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Permutations);
  __Pyx_INCREF(__pyx_n_s_Tuples);
  __Pyx_GIVEREF(__pyx_n_s_Tuples);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Tuples);
  __Pyx_INCREF(__pyx_n_s_Subsets);
  __Pyx_GIVEREF(__pyx_n_s_Subsets);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Subsets);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sage_combinat_all, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Combinations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Combinations, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Permutations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Permutations, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Tuples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuples, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Subsets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Subsets, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":56
 * from sage.rings.arith import binomial, falling_factorial
 * from sage.combinat.all import Combinations, Permutations, Tuples, Subsets
 * from sage.rings.all import Integer, QQ, ZZ             # <<<<<<<<<<<<<<
 * from sage.matrix.all import matrix, block_matrix
 * from sage.modules.misc import gram_schmidt
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Integer);
  __Pyx_GIVEREF(__pyx_n_s_Integer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Integer);
  __Pyx_INCREF(__pyx_n_s_QQ);
  __Pyx_GIVEREF(__pyx_n_s_QQ);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_QQ);
  __Pyx_INCREF(__pyx_n_s_ZZ);
  __Pyx_GIVEREF(__pyx_n_s_ZZ);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ZZ);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_rings_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Integer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Integer, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_QQ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QQ, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZZ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZZ, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":57
 * from sage.combinat.all import Combinations, Permutations, Tuples, Subsets
 * from sage.rings.all import Integer, QQ, ZZ
 * from sage.matrix.all import matrix, block_matrix             # <<<<<<<<<<<<<<
 * from sage.modules.misc import gram_schmidt
 * 
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_matrix);
  __Pyx_GIVEREF(__pyx_n_s_matrix);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_matrix);
  __Pyx_INCREF(__pyx_n_s_block_matrix);
  __Pyx_GIVEREF(__pyx_n_s_block_matrix);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_block_matrix);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sage_matrix_all, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_block_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_block_matrix, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":58
 * from sage.rings.all import Integer, QQ, ZZ
 * from sage.matrix.all import matrix, block_matrix
 * from sage.modules.misc import gram_schmidt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_gram_schmidt);
  __Pyx_GIVEREF(__pyx_n_s_gram_schmidt);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_gram_schmidt);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_modules_misc, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_gram_schmidt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gram_schmidt, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flagmatic/hypergraph_flag.pyx":472
 * 
 * 	@classmethod
 * 	def default_density_graph(cls, r=3, oriented=False):             # <<<<<<<<<<<<<<
 * 		edge_graph = cls("%d:" % r, r, oriented)
 * 		edge_graph.add_edge(range(1, r + 1))
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_default_density_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "flagmatic/hypergraph_flag.pyx":471
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def default_density_graph(cls, r=3, oriented=False):
 * 		edge_graph = cls("%d:" % r, r, oriented)
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_default_density_graph, __pyx_t_1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":479
 * 
 * 	@classmethod
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		For an integer n, and a type tg, returns a list of all tg-flags on n
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_generate_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "flagmatic/hypergraph_flag.pyx":478
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def generate_flags(cls, n, tg, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):
 * 		"""
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_generate_flags, __pyx_t_2) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":586
 * 
 * 	@classmethod
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):             # <<<<<<<<<<<<<<
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 * 			forbidden_graphs=forbidden_graphs, forbidden_induced_graphs=forbidden_induced_graphs)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_generate_graphs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "flagmatic/hypergraph_flag.pyx":585
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def generate_graphs(cls, n, r=3, oriented=False, multiplicity=1, forbidden_edge_numbers=None, forbidden_graphs=None, forbidden_induced_graphs=None):
 * 		return cls.generate_flags(n, cls(r=r, oriented=oriented, multiplicity=multiplicity), r, oriented, multiplicity, forbidden_edge_numbers=forbidden_edge_numbers,
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_generate_graphs, __pyx_t_1) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":592
 * 
 * 	@classmethod
 * 	def flag_orbits(cls, tg, flags):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a list of tuples.
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_flag_orbits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "flagmatic/hypergraph_flag.pyx":591
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def flag_orbits(cls, tg, flags):
 * 		"""
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_flag_orbits, __pyx_t_2) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":623
 * 
 * 	@classmethod
 * 	def flag_basis(cls, tg, flags, orthogonalize=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		flags should be a list of flags of the type tg. Returns a basis for the flags
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_flag_basis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "flagmatic/hypergraph_flag.pyx":622
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def flag_basis(cls, tg, flags, orthogonalize=True):
 * 		"""
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_flag_basis, __pyx_t_1) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":716
 * 
 * 	@classmethod
 * 	def minimal_by_inclusion(cls, graphs):             # <<<<<<<<<<<<<<
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 * 		i = 0
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_minimal_by_inclusion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "flagmatic/hypergraph_flag.pyx":715
 * 
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def minimal_by_inclusion(cls, graphs):
 * 		L = sorted(graphs, key = lambda g : (g.n, g.ne))
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_minimal_by_inclusion, __pyx_t_2) < 0) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":1448
 * 
 * 	@classmethod
 * 	def flag_products (cls, graph_block gb, HypergraphFlag tg, graph_block flags1, graph_block flags2):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int *p, np, *pp, *pf1, *pf2, *edges, *cur_edges
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag, __pyx_n_s_flag_products); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "flagmatic/hypergraph_flag.pyx":1447
 * 	#
 * 
 * 	@classmethod             # <<<<<<<<<<<<<<
 * 	def flag_products (cls, graph_block gb, HypergraphFlag tg, graph_block flags1, graph_block flags2):
 * 
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag->tp_dict, __pyx_n_s_flag_products, __pyx_t_1) < 0) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9flagmatic_15hypergraph_flag_HypergraphFlag);

  /* "flagmatic/hypergraph_flag.pyx":1690
 * 	pass
 * 
 * previous_permutations = {}             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_permutations_fixing(int n, int s, int *number_of):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_previous_permutations, __pyx_t_1) < 0) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1730
 * 	return generate_permutations_fixing(n, <int> 0, number_of)
 * 
 * def get_permutations (n):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_1get_permutations, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_permutations, __pyx_t_1) < 0) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1737
 * 
 * 
 * previous_combinations = {}             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_combinations(int n, int s, int *number_of):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_previous_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1770
 * 	return p
 * 
 * def get_combinations (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_3get_combinations, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1778
 * 
 * # Combinations that always contain maximum element
 * previous_combinations_plus = {}             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_combinations_plus(int n, int s, int *number_of):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_previous_combinations_plus, __pyx_t_1) < 0) __PYX_ERR(0, 1778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1813
 * 
 * 
 * def get_combinations_plus (n, s):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_5get_combinations_plus, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_combinations_plus, __pyx_t_1) < 0) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1820
 * 
 * 
 * previous_pair_combinations = {}             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_pair_combinations(int n, int s, int m1, int m2, int *number_of):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_previous_pair_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1878
 * 	return p
 * 
 * def get_pair_combinations (n, s, m1, m2):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_7get_pair_combinations, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_pair_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1885
 * 
 * 
 * previous_equal_pair_combinations = {}             # <<<<<<<<<<<<<<
 * 
 * cdef int *generate_equal_pair_combinations(int n, int s, int m, int *number_of):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_previous_equal_pair_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1945
 * 	return p
 * 
 * def get_equal_pair_combinations (n, s, m):             # <<<<<<<<<<<<<<
 * 
 * 	cdef int *p, np, i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_9get_equal_pair_combinations, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_equal_pair_combinations, __pyx_t_1) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1956
 * 
 * 
 * def make_graph_block(graphs, n):             # <<<<<<<<<<<<<<
 * 
 * 	gb = graph_block()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_11make_graph_block, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_graph_block, __pyx_t_1) < 0) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1967
 * 
 * 
 * def print_graph_block(graph_block gb):             # <<<<<<<<<<<<<<
 * 
 * 	for i in range(gb.len):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9flagmatic_15hypergraph_flag_13print_graph_block, NULL, __pyx_n_s_flagmatic_hypergraph_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_print_graph_block, __pyx_t_1) < 0) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flagmatic/hypergraph_flag.pyx":1
 * """             # <<<<<<<<<<<<<<
 * 
 * flagmatic 2
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "sage/structure/sage_object.pxd":60
 * 
 * 
 * cdef inline bint rich_to_bool_sgn(int op, int c):             # <<<<<<<<<<<<<<
 *     """
 *     Same as ``rich_to_bool``, but allow any `c < 0` and `c > 0`
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init flagmatic.hypergraph_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init flagmatic.hypergraph_flag");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetModuleGlobalName */
    static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetItemInt */
        static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SaveResetException */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* BytesEquals */
              static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
              static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* ExtTypeTest */
              static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
              static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* None */
              static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyObjectCallMethod1 */
              static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* append */
              static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* SliceObject */
              static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
              static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
              static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SetItemInt */
              static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
                #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* WriteUnraisableException */
                static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* None */
                static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* RaiseNoneIterError */
                static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* CallNextTpDealloc */
                static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* SetVTable */
                static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
                static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetNameInClass */
                static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* Print */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* ClassMethod */
                static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* SwapException */
                #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
                #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                    #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
                    static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* ModuleImport */
                    #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
